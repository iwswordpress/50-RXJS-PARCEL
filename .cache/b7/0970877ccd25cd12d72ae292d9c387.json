{"id":"nckD","dependencies":[{"name":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\multicast.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\src\\internal\\operators\\multicast.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\package.json","includedInParent":true,"mtime":1623693486438},{"name":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1623692673362},{"name":"../observable/ConnectableObservable","loc":{"line":1,"column":38},"parent":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\multicast.js","resolved":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\dist\\esm5\\internal\\observable\\ConnectableObservable.js"},{"name":"../util/isFunction","loc":{"line":2,"column":27},"parent":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\multicast.js","resolved":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\dist\\esm5\\internal\\util\\isFunction.js"},{"name":"./connect","loc":{"line":3,"column":24},"parent":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\multicast.js","resolved":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\connect.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.multicast=t;var e=require(\"../observable/ConnectableObservable\"),n=require(\"../util/isFunction\"),r=require(\"./connect\");function t(t,c){var o=(0,n.isFunction)(t)?t:function(){return t};return(0,n.isFunction)(c)?(0,r.connect)(c,{connector:o}):function(n){return new e.ConnectableObservable(n,o)}}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":98,"column":1},"generated":{"line":1,"column":0}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":98,"column":1},"generated":{"line":1,"column":13}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":98,"column":1},"generated":{"line":1,"column":20}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":98,"column":1},"generated":{"line":1,"column":35}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":98,"column":1},"generated":{"line":1,"column":43}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":98,"column":1},"generated":{"line":1,"column":56}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":98,"column":1},"generated":{"line":1,"column":57}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":98,"column":1},"generated":{"line":1,"column":64}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":98,"column":1},"generated":{"line":1,"column":68}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":98,"column":1},"generated":{"line":1,"column":76}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":98,"column":1},"generated":{"line":1,"column":86}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":88}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":92}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":94}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":102}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":141}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":143}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":5,"column":0},"generated":{"line":1,"column":151}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":1,"column":173}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":1,"column":175}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":6,"column":0},"generated":{"line":1,"column":183}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":82,"column":6},"generated":{"line":1,"column":196}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":82,"column":16},"generated":{"line":1,"column":205}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":83,"column":2},"generated":{"line":1,"column":207}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":84,"column":2},"generated":{"line":1,"column":209}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":8},"generated":{"line":1,"column":212}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":8},"generated":{"line":1,"column":216}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":25},"generated":{"line":1,"column":219}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":36},"generated":{"line":1,"column":221}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":36},"generated":{"line":1,"column":223}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":36},"generated":{"line":1,"column":235}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":63},"generated":{"line":1,"column":238}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":89},"generated":{"line":1,"column":240}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":95},"generated":{"line":1,"column":251}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":86,"column":95},"generated":{"line":1,"column":258}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":88,"column":6},"generated":{"line":1,"column":261}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":88,"column":6},"generated":{"line":1,"column":268}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":88,"column":17},"generated":{"line":1,"column":270}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":88,"column":17},"generated":{"line":1,"column":272}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":88,"column":17},"generated":{"line":1,"column":284}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":92,"column":11},"generated":{"line":1,"column":288}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":92,"column":19},"generated":{"line":1,"column":290}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":92,"column":19},"generated":{"line":1,"column":292}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":92,"column":19},"generated":{"line":1,"column":301}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":92,"column":29},"generated":{"line":1,"column":303}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":93,"column":6},"generated":{"line":1,"column":304}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":93,"column":17},"generated":{"line":1,"column":314}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":97,"column":9},"generated":{"line":1,"column":318}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":97,"column":10},"generated":{"line":1,"column":327}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":97,"column":36},"generated":{"line":1,"column":330}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":97,"column":36},"generated":{"line":1,"column":337}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":97,"column":40},"generated":{"line":1,"column":341}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":97,"column":36},"generated":{"line":1,"column":343}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":97,"column":67},"generated":{"line":1,"column":365}},{"source":"../../../../src/internal/operators/multicast.ts","name":null,"original":{"line":97,"column":75},"generated":{"line":1,"column":367}}],"sources":{"../../../../src/internal/operators/multicast.ts":"import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { OperatorFunction, UnaryFunction, ObservedValueOf, ObservableInput } from '../types';\nimport { isFunction } from '../util/isFunction';\nimport { connect } from './connect';\n\n/**\n * An operator that creates a {@link ConnectableObservable}, that when connected,\n * with the `connect` method, will use the provided subject to multicast the values\n * from the source to all consumers.\n *\n * @param subject The subject to multicast through.\n * @return A function that returns a {@link ConnectableObservable}\n * @deprecated Will be removed in v8. To create a connectable observable, use {@link connectable}.\n * If you're using {@link refCount} after `multicast`, use the {@link share} operator instead.\n * `multicast(subject), refCount()` is equivalent to\n * `share({ connector: () => subject, resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false })`.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function multicast<T>(subject: Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\n\n/**\n * Because this is deprecated in favor of the {@link connect} operator, and was otherwise poorly documented,\n * rather than duplicate the effort of documenting the same behavior, please see documentation for the\n * {@link connect} operator.\n *\n * @param subject The subject used to multicast.\n * @param selector A setup function to setup the multicast\n * @return A function that returns an observable that mirrors the observable returned by the selector.\n * @deprecated Will be removed in v8. Use the {@link connect} operator instead.\n * `multicast(subject, selector)` is equivalent to\n * `connect(selector, { connector: () => subject })`.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function multicast<T, O extends ObservableInput<any>>(\n  subject: Subject<T>,\n  selector: (shared: Observable<T>) => O\n): OperatorFunction<T, ObservedValueOf<O>>;\n\n/**\n * An operator that creates a {@link ConnectableObservable}, that when connected,\n * with the `connect` method, will use the provided subject to multicast the values\n * from the source to all consumers.\n *\n * @param subjectFactory A factory that will be called to create the subject. Passing a function here\n * will cause the underlying subject to be \"reset\" on error, completion, or refCounted unsubscription of\n * the source.\n * @return A function that returns a {@link ConnectableObservable}\n * @deprecated Will be removed in v8. To create a connectable observable, use {@link connectable}.\n * If you're using {@link refCount} after `multicast`, use the {@link share} operator instead.\n * `multicast(() => new BehaviorSubject('test')), refCount()` is equivalent to\n * `share({ connector: () => new BehaviorSubject('test') })`.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function multicast<T>(subjectFactory: () => Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\n\n/**\n * Because this is deprecated in favor of the {@link connect} operator, and was otherwise poorly documented,\n * rather than duplicate the effort of documenting the same behavior, please see documentation for the\n * {@link connect} operator.\n *\n * @param subjectFactory A factory that creates the subject used to multicast.\n * @param selector A function to setup the multicast and select the output.\n * @return A function that returns an observable that mirrors the observable returned by the selector.\n * @deprecated Will be removed in v8. Use the {@link connect} operator instead.\n * `multicast(subjectFactory, selector)` is equivalent to\n * `connect(selector, { connector: subjectFactory })`.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function multicast<T, O extends ObservableInput<any>>(\n  subjectFactory: () => Subject<T>,\n  selector: (shared: Observable<T>) => O\n): OperatorFunction<T, ObservedValueOf<O>>;\n\n/**\n * @deprecated Will be removed in v8. Use the {@link connectable} observable, the {@link connect} operator or the\n * {@link share} operator instead. See the overloads below for equivalent replacement examples of this operator's\n * behaviors.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function multicast<T, R>(\n  subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n  selector?: (source: Observable<T>) => Observable<R>\n): OperatorFunction<T, R> {\n  const subjectFactory = isFunction(subjectOrSubjectFactory) ? subjectOrSubjectFactory : () => subjectOrSubjectFactory;\n\n  if (isFunction(selector)) {\n    // If a selector function is provided, then we're a \"normal\" operator that isn't\n    // going to return a ConnectableObservable. We can use `connect` to do what we\n    // need to do.\n    return connect(selector, {\n      connector: subjectFactory,\n    });\n  }\n\n  return (source: Observable<T>) => new ConnectableObservable<any>(source, subjectFactory);\n}\n"},"lineCount":null}},"error":null,"hash":"5bb479fcc98555e1cebd7997b77e8709","cacheData":{"env":{}}}