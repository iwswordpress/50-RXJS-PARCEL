{"id":"ee6F","dependencies":[{"name":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\expand.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\src\\internal\\operators\\expand.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\package.json","includedInParent":true,"mtime":1623693486438},{"name":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1623692673362},{"name":"../util/lift","loc":{"line":1,"column":24},"parent":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\expand.js","resolved":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\dist\\esm5\\internal\\util\\lift.js"},{"name":"./mergeInternals","loc":{"line":2,"column":31},"parent":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\expand.js","resolved":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\mergeInternals.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.expand=t;var e=require(\"../util/lift\"),r=require(\"./mergeInternals\");function t(t,n,i){return void 0===n&&(n=1/0),n=(n||0)<1?1/0:n,(0,e.operate)(function(e,u){return(0,r.mergeInternals)(e,u,t,n,void 0,!0,i)})}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":95,"column":1},"generated":{"line":1,"column":0}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":95,"column":1},"generated":{"line":1,"column":13}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":95,"column":1},"generated":{"line":1,"column":20}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":95,"column":1},"generated":{"line":1,"column":35}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":95,"column":1},"generated":{"line":1,"column":43}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":95,"column":1},"generated":{"line":1,"column":56}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":95,"column":1},"generated":{"line":1,"column":57}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":95,"column":1},"generated":{"line":1,"column":64}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":95,"column":1},"generated":{"line":1,"column":68}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":95,"column":1},"generated":{"line":1,"column":76}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":95,"column":1},"generated":{"line":1,"column":83}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":85}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":89}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":91}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":99}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":115}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":117}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":125}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":73,"column":6},"generated":{"line":1,"column":145}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":73,"column":16},"generated":{"line":1,"column":154}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":74,"column":2},"generated":{"line":1,"column":156}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":75,"column":2},"generated":{"line":1,"column":158}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":76,"column":2},"generated":{"line":1,"column":160}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":79,"column":9},"generated":{"line":1,"column":163}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":75,"column":2},"generated":{"line":1,"column":175}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":75,"column":2},"generated":{"line":1,"column":179}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":75,"column":2},"generated":{"line":1,"column":183}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":75,"column":2},"generated":{"line":1,"column":185}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":75,"column":2},"generated":{"line":1,"column":187}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":78,"column":2},"generated":{"line":1,"column":190}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":78,"column":16},"generated":{"line":1,"column":193}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":78,"column":30},"generated":{"line":1,"column":196}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":78,"column":35},"generated":{"line":1,"column":199}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":78,"column":39},"generated":{"line":1,"column":201}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":78,"column":39},"generated":{"line":1,"column":203}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":78,"column":50},"generated":{"line":1,"column":205}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":79,"column":9},"generated":{"line":1,"column":208}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":79,"column":17},"generated":{"line":1,"column":210}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":79,"column":17},"generated":{"line":1,"column":212}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":79,"column":17},"generated":{"line":1,"column":221}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":79,"column":18},"generated":{"line":1,"column":230}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":79,"column":26},"generated":{"line":1,"column":232}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":80,"column":4},"generated":{"line":1,"column":235}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":80,"column":4},"generated":{"line":1,"column":242}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":82,"column":6},"generated":{"line":1,"column":244}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":82,"column":6},"generated":{"line":1,"column":246}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":82,"column":6},"generated":{"line":1,"column":262}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":83,"column":6},"generated":{"line":1,"column":264}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":84,"column":6},"generated":{"line":1,"column":266}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":85,"column":6},"generated":{"line":1,"column":268}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":88,"column":6},"generated":{"line":1,"column":275}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":91,"column":6},"generated":{"line":1,"column":278}},{"source":"../../../../src/internal/operators/expand.ts","name":null,"original":{"line":92,"column":6},"generated":{"line":1,"column":280}}],"sources":{"../../../../src/internal/operators/expand.ts":"import { OperatorFunction, ObservableInput, ObservedValueOf, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\n\n/* tslint:disable:max-line-length */\nexport function expand<T, O extends ObservableInput<unknown>>(\n  project: (value: T, index: number) => O,\n  concurrent?: number,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, ObservedValueOf<O>>;\n/**\n * @deprecated The `scheduler` parameter will be removed in v8. If you need to schedule the inner subscription,\n * use `subscribeOn` within the projection function: `expand((value) => fn(value).pipe(subscribeOn(scheduler)))`.\n * Details: Details: https://rxjs.dev/deprecations/scheduler-argument\n */\nexport function expand<T, O extends ObservableInput<unknown>>(\n  project: (value: T, index: number) => O,\n  concurrent: number | undefined,\n  scheduler: SchedulerLike\n): OperatorFunction<T, ObservedValueOf<O>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * ![](expand.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * ## Example\n * Start emitting the powers of two on every click, at most 10 of them\n * ```ts\n * import { fromEvent, of } from 'rxjs';\n * import { expand, mapTo, delay, take } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const powersOfTwo = clicks.pipe(\n *   mapTo(1),\n *   expand(x => of(2 * x).pipe(delay(1000))),\n *   take(10),\n * );\n * powersOfTwo.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for subscribing to\n * each projected inner Observable.\n * @return A function that returns an Observable that emits the source values\n * and also result of applying the projection function to each value emitted on\n * the output Observable and merging the results of the Observables obtained\n * from this transformation.\n */\nexport function expand<T, O extends ObservableInput<unknown>>(\n  project: (value: T, index: number) => O,\n  concurrent = Infinity,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, ObservedValueOf<O>> {\n  concurrent = (concurrent || 0) < 1 ? Infinity : concurrent;\n  return operate((source, subscriber) =>\n    mergeInternals(\n      // General merge params\n      source,\n      subscriber,\n      project,\n      concurrent,\n\n      // onBeforeNext\n      undefined,\n\n      // Expand-specific\n      true, // Use expand path\n      scheduler // Inner subscription scheduler\n    )\n  );\n}\n"},"lineCount":null}},"error":null,"hash":"b38f1edc4ab9077d5c90eff2504ad140","cacheData":{"env":{}}}