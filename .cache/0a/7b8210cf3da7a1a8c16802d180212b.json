{"id":"SO7v","dependencies":[{"name":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\scan.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\src\\internal\\operators\\scan.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\package.json","includedInParent":true,"mtime":1623693486438},{"name":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1623692673362},{"name":"../util/lift","loc":{"line":1,"column":24},"parent":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\scan.js","resolved":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\dist\\esm5\\internal\\util\\lift.js"},{"name":"./scanInternals","loc":{"line":2,"column":30},"parent":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\scan.js","resolved":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\scanInternals.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.scan=t;var e=require(\"../util/lift\"),r=require(\"./scanInternals\");function t(t,n){return(0,e.operate)((0,r.scanInternals)(t,n,arguments.length>=2,!0))}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":100,"column":1},"generated":{"line":1,"column":0}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":100,"column":1},"generated":{"line":1,"column":13}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":100,"column":1},"generated":{"line":1,"column":20}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":100,"column":1},"generated":{"line":1,"column":35}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":100,"column":1},"generated":{"line":1,"column":43}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":100,"column":1},"generated":{"line":1,"column":56}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":100,"column":1},"generated":{"line":1,"column":57}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":100,"column":1},"generated":{"line":1,"column":64}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":100,"column":1},"generated":{"line":1,"column":68}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":100,"column":1},"generated":{"line":1,"column":76}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":100,"column":1},"generated":{"line":1,"column":81}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":83}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":87}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":89}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":97}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":113}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":115}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":3,"column":0},"generated":{"line":1,"column":123}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":93,"column":6},"generated":{"line":1,"column":142}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":93,"column":16},"generated":{"line":1,"column":151}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":93,"column":30},"generated":{"line":1,"column":153}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":93,"column":91},"generated":{"line":1,"column":155}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":99,"column":9},"generated":{"line":1,"column":158}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":99,"column":9},"generated":{"line":1,"column":165}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":99,"column":17},"generated":{"line":1,"column":167}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":99,"column":17},"generated":{"line":1,"column":169}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":99,"column":17},"generated":{"line":1,"column":179}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":99,"column":31},"generated":{"line":1,"column":181}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":99,"column":31},"generated":{"line":1,"column":183}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":99,"column":31},"generated":{"line":1,"column":198}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":99,"column":44},"generated":{"line":1,"column":200}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":99,"column":55},"generated":{"line":1,"column":202}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":99,"column":65},"generated":{"line":1,"column":212}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":99,"column":75},"generated":{"line":1,"column":220}},{"source":"../../../../src/internal/operators/scan.ts","name":null,"original":{"line":99,"column":78},"generated":{"line":1,"column":223}}],"sources":{"../../../../src/internal/operators/scan.ts":"import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { scanInternals } from './scanInternals';\n\nexport function scan<V, A = V>(accumulator: (acc: A | V, value: V, index: number) => A): OperatorFunction<V, V | A>;\nexport function scan<V, A>(accumulator: (acc: A, value: V, index: number) => A, seed: A): OperatorFunction<V, A>;\nexport function scan<V, A, S>(accumulator: (acc: A | S, value: V, index: number) => A, seed: S): OperatorFunction<V, A>;\n\n// TODO: link to a \"redux pattern\" section in the guide (location TBD)\n\n/**\n * Useful for encapsulating and managing state. Applies an accumulator (or \"reducer function\")\n * to each value from the source after an initial state is established -- either via\n * a `seed` value (second argument), or from the first value from the source.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation state after each update</span>\n *\n * ![](scan.png)\n *\n * This operator maintains an internal state and emits it after processing each value as follows:\n *\n * 1. First value arrives\n *   - If a `seed` value was supplied (as the second argument to `scan`), let `state = seed` and `value = firstValue`.\n *   - If NO `seed` value was supplied (no second argument), let `state = firstValue` and go to 3.\n * 2. Let `state = accumulator(state, value)`.\n *   - If an error is thrown by `accumulator`, notify the consumer of an error. The process ends.\n * 3. Emit `state`.\n * 4. Next value arrives, let `value = nextValue`, go to 2.\n *\n * ## Example\n *\n * An average of previous numbers. This example shows how\n * not providing a `seed` can prime the stream with the\n * first value from the source.\n *\n * ```ts\n * import { interval, of } from 'rxjs';\n * import { scan, map } from 'rxjs/operators';\n *\n * const numbers$ = of(1, 2, 3);\n *\n * numbers$\n *   .pipe(\n *     // Get the sum of the numbers coming in.\n *     scan((total, n) => total + n),\n *     // Get the average by dividing the sum by the total number\n *     // received so var (which is 1 more than the zero-based index).\n *     map((sum, index) => sum / (index + 1))\n *   )\n *   .subscribe(console.log);\n * ```\n *\n * ## Example\n *\n * The Fibonacci sequence. This example shows how you can use\n * a seed to prime accumulation process. Also... you know... Fibinacci.\n * So important to like, computers and stuff that its whiteboarded\n * in job interviews. Now you can show them the Rx version! (Please don't, haha)\n *\n * ```ts\n * import { interval } from 'rxjs';\n * import { scan, map, startWith } from 'rxjs/operators';\n *\n * const firstTwoFibs = [0, 1];\n * // An endless stream of Fibonnaci numbers.\n * const fibonnaci$ = interval(1000).pipe(\n *   // Scan to get the fibonnaci numbers (after 0, 1)\n *   scan(([a, b]) => [b, a + b], firstTwoFibs),\n *   // Get the second number in the tuple, it's the one you calculated\n *   map(([, n]) => n),\n *   // Start with our first two digits :)\n *   startWith(...firstTwoFibs)\n * );\n *\n * fibonnaci$.subscribe(console.log);\n * ```\n *\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n * @see {@link switchScan}\n *\n * @param accumulator A \"reducer function\". This will be called for each value after an initial state is\n * acquired.\n * @param seed The initial state. If this is not provided, the first value from the source will\n * be used as the initial state, and emitted without going through the accumulator. All subsequent values\n * will be processed by the accumulator function. If this is provided, all values will go through\n * the accumulator function.\n * @return A function that returns an Observable of the accumulated values.\n */\nexport function scan<V, A, S>(accumulator: (acc: V | A | S, value: V, index: number) => A, seed?: S): OperatorFunction<V, V | A> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  return operate(scanInternals(accumulator, seed as S, arguments.length >= 2, true));\n}\n"},"lineCount":null}},"error":null,"hash":"55d2573b08ea51b5901f17c9719b7dbd","cacheData":{"env":{}}}