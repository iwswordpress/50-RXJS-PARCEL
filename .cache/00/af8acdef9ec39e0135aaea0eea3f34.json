{"id":"aX3s","dependencies":[{"name":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\skip.js.map","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\src\\internal\\operators\\skip.ts","includedInParent":true,"mtime":499162500000},{"name":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\package.json","includedInParent":true,"mtime":1623693486438},{"name":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\package.json","includedInParent":true,"mtime":1623692673362},{"name":"./filter","loc":{"line":1,"column":23},"parent":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\skip.js","resolved":"C:\\Users\\Owner\\Dropbox\\COURSES\\NDC\\50-RXJS-FORM\\RXJS-PARCEL\\node_modules\\rxjs\\dist\\esm5\\internal\\operators\\filter.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.skip=r;var e=require(\"./filter\");function r(r){return(0,e.filter)(function(e,t){return r<=t})}"},"sourceMaps":{"js":{"mappings":[{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":37,"column":1},"generated":{"line":1,"column":0}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":37,"column":1},"generated":{"line":1,"column":13}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":37,"column":1},"generated":{"line":1,"column":20}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":37,"column":1},"generated":{"line":1,"column":35}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":37,"column":1},"generated":{"line":1,"column":43}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":37,"column":1},"generated":{"line":1,"column":56}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":37,"column":1},"generated":{"line":1,"column":57}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":37,"column":1},"generated":{"line":1,"column":64}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":37,"column":1},"generated":{"line":1,"column":68}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":37,"column":1},"generated":{"line":1,"column":76}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":37,"column":1},"generated":{"line":1,"column":81}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":83}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":87}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":89}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":2,"column":0},"generated":{"line":1,"column":97}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":35,"column":6},"generated":{"line":1,"column":109}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":35,"column":16},"generated":{"line":1,"column":118}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":35,"column":24},"generated":{"line":1,"column":120}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":36,"column":9},"generated":{"line":1,"column":123}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":36,"column":9},"generated":{"line":1,"column":130}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":36,"column":16},"generated":{"line":1,"column":132}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":36,"column":16},"generated":{"line":1,"column":134}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":36,"column":16},"generated":{"line":1,"column":142}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":36,"column":17},"generated":{"line":1,"column":151}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":36,"column":20},"generated":{"line":1,"column":153}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":36,"column":30},"generated":{"line":1,"column":156}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":36,"column":30},"generated":{"line":1,"column":163}},{"source":"../../../../src/internal/operators/skip.ts","name":null,"original":{"line":36,"column":39},"generated":{"line":1,"column":166}}],"sources":{"../../../../src/internal/operators/skip.ts":"import { MonoTypeOperatorFunction } from '../types';\nimport { filter } from './filter';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * ![](skip.png)\n *\n * Skips the values until the sent notifications are equal or less than provided skip count. It raises\n * an error if skip count is equal or more than the actual number of emits and source raises an error.\n *\n * ## Example\n * Skip the values before the emission\n * ```ts\n * import { interval } from 'rxjs';\n * import { skip } from 'rxjs/operators';\n *\n * //emit every half second\n * const source = interval(500);\n * //skip the first 10 emitted values\n * const example = source.pipe(skip(10));\n * //output: 10...11...12...13........\n * const subscribe = example.subscribe(val => console.log(val));\n * ```\n *\n * @see {@link last}\n * @see {@link skipWhile}\n * @see {@link skipUntil}\n * @see {@link skipLast}\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return A function that returns an Observable that skips the first `count`\n * values emitted by the source Observable.\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return filter((_, index) => count <= index);\n}\n"},"lineCount":null}},"error":null,"hash":"8eaffb7b0ed83b37b0f1234e0d00eded","cacheData":{"env":{}}}