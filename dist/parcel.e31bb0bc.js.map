{"version":3,"sources":["node_modules/tslib/tslib.es6.js","../../../../src/internal/util/isFunction.ts","../../../../src/internal/util/createErrorClass.ts","../../../../src/internal/util/UnsubscriptionError.ts","../../../../src/internal/util/arrRemove.ts","../../../src/internal/Subscription.ts","../../../src/internal/config.ts","../../../../src/internal/scheduler/timeoutProvider.ts","../../../../src/internal/util/reportUnhandledError.ts","../../../../src/internal/util/noop.ts","../../../src/internal/NotificationFactories.ts","../../../src/internal/Subscriber.ts","../../../../src/internal/symbol/observable.ts","../../../../src/internal/util/identity.ts","../../../../src/internal/util/pipe.ts","../../../src/internal/Observable.ts","../../../../src/internal/util/lift.ts","../../../../src/internal/operators/OperatorSubscriber.ts","../../../../src/internal/operators/refCount.ts","../../../../src/internal/observable/ConnectableObservable.ts","../../../../src/internal/scheduler/performanceTimestampProvider.ts","../../../../src/internal/scheduler/animationFrameProvider.ts","../../../../../src/internal/observable/dom/animationFrames.ts","../../../../src/internal/util/ObjectUnsubscribedError.ts","../../../src/internal/Subject.ts","../../../src/internal/BehaviorSubject.ts","../../../../src/internal/scheduler/dateTimestampProvider.ts","../../../src/internal/ReplaySubject.ts","../../../src/internal/AsyncSubject.ts","../../../../src/internal/scheduler/Action.ts","../../../../src/internal/scheduler/intervalProvider.ts","../../../../src/internal/scheduler/AsyncAction.ts","../../../../src/internal/util/Immediate.ts","../../../../src/internal/scheduler/immediateProvider.ts","../../../../src/internal/scheduler/AsapAction.ts","../../../src/internal/Scheduler.ts","../../../../src/internal/scheduler/AsyncScheduler.ts","../../../../src/internal/scheduler/AsapScheduler.ts","../../../../src/internal/scheduler/asap.ts","../../../../src/internal/scheduler/async.ts","../../../../src/internal/scheduler/QueueAction.ts","../../../../src/internal/scheduler/QueueScheduler.ts","../../../../src/internal/scheduler/queue.ts","../../../../src/internal/scheduler/AnimationFrameAction.ts","../../../../src/internal/scheduler/AnimationFrameScheduler.ts","../../../../src/internal/scheduler/animationFrame.ts","../../../../src/internal/scheduler/VirtualTimeScheduler.ts","../../../../src/internal/observable/empty.ts","../../../../src/internal/scheduled/scheduleArray.ts","../../../../src/internal/util/isArrayLike.ts","../../../../src/internal/util/isPromise.ts","../../../../src/internal/scheduled/scheduleObservable.ts","../../../../src/internal/scheduled/schedulePromise.ts","../../../../src/internal/symbol/iterator.ts","../../../../src/internal/util/caughtSchedule.ts","../../../../src/internal/scheduled/scheduleIterable.ts","../../../../src/internal/scheduled/scheduleAsyncIterable.ts","../../../../src/internal/util/isInteropObservable.ts","../../../../src/internal/util/isIterable.ts","../../../../src/internal/util/isAsyncIterable.ts","../../../../src/internal/util/throwUnobservableError.ts","../../../../src/internal/util/isReadableStreamLike.ts","../../../../src/internal/scheduled/scheduleReadableStreamLike.ts","../../../../src/internal/scheduled/scheduled.ts","node_modules/process/browser.js","../../../../src/internal/observable/from.ts","../../../../src/internal/observable/fromArray.ts","../../../../src/internal/util/isScheduler.ts","../../../../src/internal/util/args.ts","../../../../src/internal/observable/of.ts","../../../../src/internal/observable/throwError.ts","../../../src/internal/Notification.ts","../../../../src/internal/util/isObservable.ts","../../../../src/internal/util/EmptyError.ts","../../../src/internal/lastValueFrom.ts","../../../src/internal/firstValueFrom.ts","../../../../src/internal/util/ArgumentOutOfRangeError.ts","../../../../src/internal/util/NotFoundError.ts","../../../../src/internal/util/SequenceError.ts","../../../../src/internal/util/isDate.ts","../../../../src/internal/operators/timeout.ts","../../../../src/internal/operators/subscribeOn.ts","../../../../src/internal/operators/map.ts","../../../../src/internal/util/mapOneOrManyArgs.ts","../../../../src/internal/operators/observeOn.ts","../../../../src/internal/observable/bindCallbackInternals.ts","../../../../src/internal/observable/bindCallback.ts","../../../../src/internal/observable/bindNodeCallback.ts","../../../../src/internal/util/argsArgArrayOrObject.ts","../../../../src/internal/util/createObject.ts","../../../../src/internal/observable/combineLatest.ts","../../../../src/internal/operators/mergeInternals.ts","../../../../src/internal/operators/mergeMap.ts","../../../../src/internal/operators/mergeAll.ts","../../../../src/internal/operators/concatAll.ts","../../../../src/internal/observable/concat.ts","../../../../src/internal/observable/defer.ts","../../../../src/internal/observable/connectable.ts","../../../../src/internal/observable/forkJoin.ts","../../../../src/internal/observable/fromEvent.ts","../../../../src/internal/observable/fromEventPattern.ts","../../../../src/internal/observable/generate.ts","../../../../src/internal/observable/iif.ts","../../../../src/internal/observable/timer.ts","../../../../src/internal/observable/interval.ts","../../../../src/internal/observable/merge.ts","../../../../src/internal/observable/never.ts","../../../../src/internal/util/argsOrArgArray.ts","../../../../src/internal/operators/onErrorResumeNext.ts","../../../../src/internal/observable/onErrorResumeNext.ts","../../../../src/internal/observable/pairs.ts","../../../../src/internal/util/not.ts","../../../../src/internal/operators/filter.ts","../../../../src/internal/observable/partition.ts","../../../../src/internal/observable/race.ts","../../../../src/internal/observable/range.ts","../../../../src/internal/observable/using.ts","../../../../src/internal/observable/zip.ts","../../src/index.ts","../../../../src/internal/operators/audit.ts","../../../../src/internal/operators/auditTime.ts","../../../../src/internal/operators/buffer.ts","../../../../src/internal/operators/bufferCount.ts","../../../../src/internal/operators/bufferTime.ts","../../../../src/internal/operators/bufferToggle.ts","../../../../src/internal/operators/bufferWhen.ts","../../../../src/internal/operators/catchError.ts","../../../../src/internal/operators/scanInternals.ts","../../../../src/internal/operators/reduce.ts","../../../../src/internal/operators/toArray.ts","../../../../src/internal/operators/joinAllInternals.ts","../../../../src/internal/operators/combineLatestAll.ts","../../../../src/internal/operators/combineAll.ts","../../../../src/internal/operators/combineLatest.ts","../../../../src/internal/operators/combineLatestWith.ts","../../../../src/internal/operators/concat.ts","../../../../src/internal/operators/concatMap.ts","../../../../src/internal/operators/concatMapTo.ts","../../../../src/internal/operators/concatWith.ts","../../../../src/internal/observable/fromSubscribable.ts","../../../../src/internal/operators/connect.ts","../../../../src/internal/operators/count.ts","../../../../src/internal/operators/debounce.ts","../../../../src/internal/operators/debounceTime.ts","../../../../src/internal/operators/defaultIfEmpty.ts","../../../../src/internal/operators/take.ts","../../../../src/internal/operators/ignoreElements.ts","../../../../src/internal/operators/mapTo.ts","../../../../src/internal/operators/delayWhen.ts","../../../../src/internal/operators/delay.ts","../../../../src/internal/operators/dematerialize.ts","../../../../src/internal/operators/distinct.ts","../../../../src/internal/operators/distinctUntilChanged.ts","../../../../src/internal/operators/distinctUntilKeyChanged.ts","../../../../src/internal/operators/throwIfEmpty.ts","../../../../src/internal/operators/elementAt.ts","../../../../src/internal/operators/endWith.ts","../../../../src/internal/operators/every.ts","../../../../src/internal/operators/exhaustAll.ts","../../../../src/internal/operators/exhaust.ts","../../../../src/internal/operators/exhaustMap.ts","../../../../src/internal/operators/expand.ts","../../../../src/internal/operators/finalize.ts","../../../../src/internal/operators/find.ts","../../../../src/internal/operators/findIndex.ts","../../../../src/internal/operators/first.ts","../../../../src/internal/operators/groupBy.ts","../../../../src/internal/operators/isEmpty.ts","../../../../src/internal/operators/takeLast.ts","../../../../src/internal/operators/last.ts","../../../../src/internal/operators/materialize.ts","../../../../src/internal/operators/max.ts","../../../../src/internal/operators/merge.ts","../../../../src/internal/operators/flatMap.ts","../../../../src/internal/operators/mergeMapTo.ts","../../../../src/internal/operators/mergeScan.ts","../../../../src/internal/operators/mergeWith.ts","../../../../src/internal/operators/min.ts","../../../../src/internal/operators/multicast.ts","../../../../src/internal/operators/pairwise.ts","../../../../src/internal/operators/partition.ts","../../../../src/internal/operators/pluck.ts","../../../../src/internal/operators/publish.ts","../../../../src/internal/operators/publishBehavior.ts","../../../../src/internal/operators/publishLast.ts","../../../../src/internal/operators/publishReplay.ts","../../../../src/internal/operators/raceWith.ts","../../../../src/internal/operators/race.ts","../../../../src/internal/operators/repeat.ts","../../../../src/internal/operators/repeatWhen.ts","../../../../src/internal/operators/retry.ts","../../../../src/internal/operators/retryWhen.ts","../../../../src/internal/operators/sample.ts","../../../../src/internal/operators/sampleTime.ts","../../../../src/internal/operators/scan.ts","../../../../src/internal/operators/sequenceEqual.ts","../../../../src/internal/operators/share.ts","../../../../src/internal/operators/shareReplay.ts","../../../../src/internal/operators/single.ts","../../../../src/internal/operators/skip.ts","../../../../src/internal/operators/skipLast.ts","../../../../src/internal/operators/skipUntil.ts","../../../../src/internal/operators/skipWhile.ts","../../../../src/internal/operators/startWith.ts","../../../../src/internal/operators/switchMap.ts","../../../../src/internal/operators/switchAll.ts","../../../../src/internal/operators/switchMapTo.ts","../../../../src/internal/operators/switchScan.ts","../../../../src/internal/operators/takeUntil.ts","../../../../src/internal/operators/takeWhile.ts","../../../../src/internal/operators/tap.ts","../../../../src/internal/operators/throttle.ts","../../../../src/internal/operators/throttleTime.ts","../../../../src/internal/operators/timeInterval.ts","../../../../src/internal/operators/timeoutWith.ts","../../../../src/internal/operators/timestamp.ts","../../../../src/internal/operators/window.ts","../../../../src/internal/operators/windowCount.ts","../../../../src/internal/operators/windowTime.ts","../../../../src/internal/operators/windowToggle.ts","../../../../src/internal/operators/windowWhen.ts","../../../../src/internal/operators/withLatestFrom.ts","../../../../src/internal/operators/zip.ts","../../../../src/internal/operators/zipAll.ts","../../../../src/internal/operators/zipWith.ts","../../../src/operators/index.ts","src/util/helpers.js","src/lessons/01-form.js","index.js"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","prototype","hasOwnProperty","call","__extends","TypeError","String","__","constructor","create","__assign","assign","t","s","i","n","arguments","length","apply","__rest","e","indexOf","getOwnPropertySymbols","propertyIsEnumerable","__decorate","decorators","target","key","desc","c","r","getOwnPropertyDescriptor","Reflect","decorate","defineProperty","__param","paramIndex","decorator","__metadata","metadataKey","metadataValue","metadata","__awaiter","thisArg","_arguments","P","generator","adopt","value","resolve","Promise","reject","fulfilled","step","next","rejected","result","done","then","__generator","body","_","label","sent","trys","ops","f","y","g","verb","Symbol","iterator","v","op","pop","push","__createBinding","o","m","k","k2","undefined","enumerable","get","__exportStar","__values","__read","ar","error","__spread","concat","__spreadArrays","il","a","j","jl","__spreadArray","to","from","__await","__asyncGenerator","asyncIterator","q","resume","settle","fulfill","shift","__asyncDelegator","__asyncValues","__makeTemplateObject","cooked","raw","__setModuleDefault","__importStar","mod","__esModule","__importDefault","default","__classPrivateFieldGet","receiver","privateMap","has","__classPrivateFieldSet","set","process","module","exports","cachedSetTimeout","cachedClearTimeout","defaultSetTimout","Error","defaultClearTimeout","setTimeout","clearTimeout","runTimeout","fun","runClearTimeout","marker","queue","draining","currentQueue","queueIndex","cleanUpNextTick","drainQueue","timeout","len","run","nextTick","args","Item","array","title","env","argv","version","versions","noop","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask","btnShow","button","style","display","console","log","getUsers","x","url","getRandomUsers","getLocations","validNumberOfusers","val","el","innerHTML","validEmail","test","validPassword","printLatLon","id","city","lat","lon","container","document","getElementById","item","createElement","setAttribute","className","appendChild","createCard","data","arrUsers","login","output","email","password","validationEmail","validationPassword","email$","pipe","check","subscribe","err","message","complete","password$","info","button$"],"mappings":";AgEAA;AoKAA,ApKCA,AmKAA,InKAImI,OAAO,GAAGC,MAAM,CAACC,OAAP,GAAiB,EAA/B,EAEA;AACA;AACA,AmKHA;AnKIA;AtCAO,ANAA,AYNP,AwDAQ,AmBAA,ArGOD,A6NJP,IzMGa,ANAA,AYNT,AwDAI,AmBAA,ArGOK,MAAM,CkFPJ,AmBAA,ErGOqB,C0BPtB,AwDAM,AmBAA,G3EAH,CAAjB,CwDAyB,AmBAA,CnBAA,AmBAA,KjFMS,E8DN1B,AmBAA,CjFMoD,INAnB,GAAiC;AEN1E,AgEGA,ACAA,AQDA,AEDA,ADDA,AEAA,AhCCA,AkCDA,AuCAA,ArCCA,AEAA,ACCA,ApCDA,AwCCA,ACAA,AGFA,AECA,A7CDA,AiCAA,AaAA,AGGA,ACHA,ACEA,AIAA,ACEA,AMJA,ADAA,ArCAA,A0CAA,ACAA,AGEA,ACDA,ACCA,ACFA,ACCA,AKDA,ADEA,AEFA,ACEA,ACDA,ACDA,AEAA,AEEA,AEFA,ADEA,AECA,ACFA,AjDAA,AkDAA,AECA,ACDA,AQDA,A3BCA,AqBAA,ArCCA,AuCDA,AvFAA,AiEAA,AuBDA,ACAA,A9EAA,AFCA,ACAA,AkFAA,ACAA,AEDA,ACEA,A9FDA,A+FAA,ACDA,ACAA,ACCA,ACAA,ACAA,ACAA,AzDDA,A9GGA,A0KFA,ACAA,ACAA,ACAA,ACCA,ACFA,ACCA,AnECA,AoECA,AEHA,ACCA,ACAA,ACAA,ACCA,ACDA,ACDA,A1HCA,A4HAA,ADCA,AEFA,ACCA,A9DAA,A+DAA,ACAA,ACAA,AEDA,A1DAA,A4DAA,ACCA,AtFDA,AuFEA,AEFA,AEEA,AGDA,A/KDA,AQCA,ADDA,AJAA,ACAA,AUEA,ACFA,AlBAA,APAA,ACAA,AbOE,ANAA,AsBPF,A9BCO,AgEDP,AHAA,AzCEA,A6CFA,AtDAA,AuDAA,A3EAA,AqFCQ,ApFIF,AkDDA,ApDKA,AuFTA,A5EAA,AoCAC,AUAP,AoBOM,A9EHA,AwDHN,ACDA,AcCA,AtBDA,AiBCA,A1DAM,AsGDA,AvGAN,AoDIM,A7CAN,AoBDA,A7BKE,AqEPF,ADAA,AVOA,EtCDE,ANAA,AdCA,EMPW,AoBCT,AwDDI,AvCDK,AeQTC,CtCDC,ANAA,EMAA,ANAA,EhBFW,AkDDA,ApDKA,AuFTA,A5EAA,AkEOA,A9EHA,AQHA,AsGDA,AnDIA,G5BFhB,A+EFM,CtGCA,AsGDiB,CnGCA,CqCDC,CxCCJ,CGAO,ACDrB,AJCoB,AsGDpB,CvBCgB,ApFIhB,ASLsB,AoCAA,A3CQV,CoBDb,ANAA,AhBFwB,ASLvB,AZIA,A8GJ6D,ChCO7D,A9EHqB,AKIP,A0DApB,CwBPkE,ACD5D,A5EA0B,AkEOJ,C3EFtB,AqFLuB,CnCIvB,ClDCoD,AkDAxD,AhDEkC,CJE9B,ADLA,CCK8B,AuFT9B,AVOA,AgCPA,CvBCkE,AvFGnC,CuFHmC,ApFIlE,AqFLuC,AxCAb,A8BOM,AgCPyC,CnGCpD,AqCDC,C7CKqC,C6CL3B,GKIhC,AmCJA,EnCMJ,ApDGI,AuFToD,EvFSU,G0DL9D,C4BHE,A5BGyC,GNA3C,EAGJ,AMHI,EAAqD,KNArD,EAIJ,KAJI,EAIK;AoCRX,A3CAA,A2DAA,AQAA,AiDGA,AgDAA,AEFA,ArIDA,AtDUI,ANAA,AiCVE,AzCC2B,AoBEjC,AwDFQ,AmBKF,AvGAJ,AkDEA,ApDEA,AuFTA,A5EAA,AoCD4D,A8BQ5D,A9EHA,AeFF,A+FFE,AjGDF,A8CME,AWJF,AjEOE,A0DAF,AmKTA,E7NSE,E0BNI,AwDF6B,AxBQ/BC,E5DHE,AkDEJ,ApDEM,GmDVQ,AzCCkB,A+FKlB,AvGAd,AqFLO,A5EAA,AoCDqD,A8BQrD,A9EHA,A8GJA,AnDKA,C/CLP,AoCD6D,CvBUpD,ANAA,AhBJA,AkDET,C5BEU,ANAA,AlBAE,CuFTD,A7BKA,C6BLC,AxCDqD,A8BQrD,CSPgC,AtFS7B,CUTwB,A0COvC,ArDHc,C+BFG,CwDF+C,CuBAxD,C/EEoC,AyDFrC,CnCOP,AmCPmB,AxCDqD,AhDKjE,CWJyB,AoBElC,AsBKE,ALRyE,AWMlE,AIGT,C2CHM,A1DNsE,AWOxE,AtDEmB,CkFRiD,AmBKtC,ArDEhC,AyDPO,CvBA+D,AtFStD,AIDO,C+CTnB,A0BQoB,A9EHA,A8GJN,CnGAgC,C+FK9C,CtDN2B,AJAkC,A3CO/B,CqGDe,A5BE1C,CUPa,AsBAb,ErFSwB,AxBAhB,A6GTgB,CrFSC,A8DT1B,AvCD+E,A8BQrD,C7EEH,A6EFI,C9EHjC,CWJgC,A6EAb,EAAS,CrESU,A2DFA,C3DEC,ARTyB,AmEOzB,CrDE7B,A+DTS,AxCDyC,AWQxD,E6BP6B,CAAd,C/DSyB,AuBVqD,A8BQ3D,CnEPgC,A6EApC,AVOlC,AnBAS,ChDP8D,CQS7D,CMAD,EAAyC,AkCFpC,CxCEqC,A6BVqD,CAAP,CvBUxF,CkCFL,ClCEF,CdT6B,CqCD+E,CWQxF,EhDPgE,EQS7E,EAAuD,CwCFnC,ExCEpB,A6BVmD,E7BU1D,CwCFoB,IhDPS,CgDOQ,QAAnC,GAA8C,mBAA9C,GAAoE,MAAI,KAAJ,GAAS,GAD/E,IACkF,0HAF7E,CAAP;AtCLF,AHAA,AmEyIM,ADzIN,AEwHM,AQtHN,AEAA,ADDA,AEAA,AhCAA,AiCFA,ACCA,AuCaM,AtCbN,ACiFM,AE/EN,ACAA,ApCAA,AwCAA,AC0EM,AG5EN,AECA,A7CCA,AiCDA,AaAA,ACFA,ApGAA,AsGIA,ACHA,ACEA,ACFA,ACDA,ACAA,ACGA,ACEA,AMAO,ACLP,AFEA,AGDA,ACAA,AzC0DM,A0CzDN,ACAA,ACDA,AEEA,ACuDM,ACvDN,ACAA,ACDA,AKAA,ADCA,AEDA,ACCA,ACDA,AC2EM,AE1EN,ACDA,ACCA,AEEO,ADFP,AECA,ACFA,AjDAA,AkDwDM,AEvDN,ACAA,AQEO,APLP,ApBEA,AqBAA,ArCCA,AuCAA,AvFDA,AiEmCM,AuBnCN,ACAA,ACDA,A/EAA,AFGA,ACFA,AkFAA,ACAA,ACDA,ACCA,ACEA,A9FFA,AwBAA,AuEAA,ACDA,AC6EM,AC5EN,ACAA,ACAA,ACAA,AEDA,ADAA,A1DCA,A9GEA,A0KFA,ACGA,ACFA,ACEA,ACFA,ACDA,ACAA,AnEWM,AoETN,ACHA,ACCA,ACEA,AC8BM,AChCN,ACCA,ACDA,ACAA,A1H6DM,A4H7DN,ADCA,AEDA,ACAA,A9DAA,AuBFA,AwCEA,ACAA,ACAA,AEDA,A1DCA,A4DDA,ACCA,AtFAA,AuFCA,ACFA,ACAA,ACAA,ACGA,ACHA,ACDA,ACEA,ACDA,AhLEM,AQDN,ADAA,AJDA,ACEM,AUAN,ACFA,AlCAA,AcDA,ACCA,AVDA,AGCA,ANDA,AKAA,AIAA,ACAA,AKAA,ADCA,AxBDA,AiBCA,ACAA,AbUG,AOXH,AHcO,AVHJ,AsBVH,AnCaO,A8CbL,AzCAoG,AgEqB/F,AHEA,AIJA,AtDCA,AuDDA,A3EFA,AiEjBP,AoBAQ,AmBMN,AvGAE,AkDCF,ApDGE,AuFVqC,A5ECxC,AoCFyH,AUEpH,AoBOL,A9EHA,AwDJD,ACDA,AcCA,AtBIM,AiBHA,AgBFN,A4BAsC,AvGAtC,AoDUC,AhCXD,AHAA,AVKA,AYLA,AQwBA,AXvBA,AbDA,ALUE,AqERF,ADoDM,AyJjDNiD,CvNJ0B,AqCDnB,C3CUL,CoBJ0D,ANAc,ARLnE,CwHIM,A2BAA,AcAA,A/ISA,AvBAA,AqEQA,AHEA,AIJA,AtDCA,AuDDA,A3EFA,AqFjByC,AlCOpD,ApDGE,AiCaJ,EkBvBM,C8KIC,C/NEG,A+NFFC,C7IqIQ,ACjBA,AoD3GA,ArCoEA,AQLA,AhBlBA,A+CDA,AYmBA,ASnBA,AfrBA,AkCyCA,AtDjEA,AwEqBA,AtH6BA,AjC5DA,AIAA,AuDIP,ArDCP,ApDGO,AyDTO,ATIA,AiBHA,A7DOP,AoE4CO,CxE3CN,C6JNU,AcAA,ArFJyC,ACAlB,AsBAL,AzGS3B,A6NLX,C7H6EM,AhD1EJ,AyDPqC,CTiFb,AiGhDpB,AlJjCO,AsDMA,AvGAE,AkDCb,AnBgBF,C2EqDM,AsBxEiB,ASqDjB,AkBrDiB,AcAA,A1BgCjB,AkCyCA,AkB5CkB,A9HVD,AevB2C,AmBMpD,AzGIV,C4GkEkB,A+BnBG,AMrBA,AjJ1BV,CEJG,A2GNyB,A5EuB3C,CiGnB0B,A8BqDpB,AmBoBe,A5GtDqB,AIJhB,ACAA,AWnBuB,AsBAL,CD4EtC,AhBlBA,AoEDsB,AzEzDsB,AvCK5C,CqJ4BA,AhMpBsB,A8CbtB,AjDMe,A8CDK,C4DuEM,AqCxC1B,AlE0BA,AnDjDuB,A+CMmB,ACAA,AUnBwB,AmBM/D,AvGAa,A+DJhB,A7DI8B,CgFmI9B,AQ/EmB,AyGzBY,AtH6BN,AO9DyC,ACAvB,AtBErB,A4CFW,CzB0IrC,AgBzDI,A6C7C2B,ApBxB3B,A/EVA,AzCW0C,AkFbL,AsBAM,ArCqD3C,CqDxCJ,A/EX+B,AlBWiB,A3BIlB,ADP5B,AwE2CgC,C4B4BgB,AuCxB9C,AzFvDA,ACFkB,AMClB,ATIA,CqCmHA,AoD3GA,AvFX6B,AoCF3B,AmBMiB,AlBNgC,A9BCtB,C4BwHjC,AoD5GkC,AE4CqC,AqBAnE,A/JxCsD,AwGXnD,AzDD2B,AiBH9B,CSmB8B,ArDDA,AnBdlB,C8JmD8B,AlHvD1C,A5CIwB,AuDLxB,AQCgC,AhCqBtC,AgMnB4B,CrHwEtB,AC5EiC,ArCqDjC,COSA,AjC5DgD,AIAhD,AwBmB8D,ArDDA,AoFdtC,AhDLa,CmD2Ec,ArB5EM,AsBAL,ArCqDC,C+EuBrD,AoBxEC,A5F0DkD,A7B5DC,AhDIxC,AqFN8C,CgE4EF,ArJtE1D,AqFN2D,CHyIzD,AgBxDA,AyBrEA,A1EZA,AoCAoC,EH2IxC,AgB1DkF,AmDL9E,AMxEC,AhCUL,AtCdmE,AsBA9B,C9B8DjC,A0BxD+B,AjC+C/B,CamEA,AoD3GA,Ac+DgE,ApG5EhC,AsDMA,AIN2B,C9B8DS,AjC5DpE,AKFiC,AqBqDmD,CaqExF,AoD7G+D,AZD3D,C/EVwE,AIAxE,C2EaJ,ApBTwC,AlBND,CrCEyC,AuDIvC,AINJ,CJMG,AINJ,C0C4EhC,ApG5EuC,AsDMR,CtDNS,AsDMrC,CL2EH,AmDLuG,EnDKM,AyBrE7G,ApBN2C,CrBmI3C,C8CrIC,ALYL,CzC4HA,CqBtImD,CpBkH/C,AlCxHJ,AsDMoD,CAAD,CpBqHnD,AlC3HsD,AsDM/C,ClCiBkD,A0JnB3D,ExHE4D,C9Bc1D,ACAA,AqJfF,C7IoIM,AyC7HA,EzCgIqB,AyC3HzB,ApBXA,EpBkHI,CpFtGJ,CoFyGyB,AdpGiC,GGD1D,ACFC,AtDCD,AuDDC,GLGwD,EAAO,CIHhE,ACAA,A3EFC,E0EEM,ACAA,EFEN,ArDDA,CwGTG,C5HMJ,C4HDqC,C5HC9B,EyEIP,ArDDA,EqDCO,ArDDA;A+DyHP,ACjBA,AG5HF,A3CyBO,A4FZL,ArCoEA,AIlFF,AI6EE,AI7EF,ApB2DE,A+CDA,AYmBA,ASnBA,ACvDF,AhBkCE,AkCwC0B,AtD1D1B,AwEeA,AtH4BuD,AkI3DzD,AEDA,ArIDA,AhCEE,AIAA,A1BQA,AIKA,AVLA,AbKA,A8CfE,AuBsBA,AHAmE,AzCdvE,A6CYI,AtDCA,AuDDA,A3EFA,AwGZH,AvGAG,AkDAO,ApDIP,AuFXwE,A9BE1E,ATIA,AWNF,AMGE,AnDII,A+FPiE,AjGsEjE,AyDpEN,A7DIO,AyBoBL,A9B3BF,ACWE,AoE4CA,AV5CF,EtCCE,AIKA,AVLA,AbKA,ADNA,CmFVO,AsBAP,ChE0BW,A7CfT,AQLS,C+ENiE,C4F6ElD,ApGf6B,APRjD,CetDC,CAAP,CH8IO,ACjBA,AxCnGS,A4FZT,ArCoEA,AQLA,AhBlBA,A+CDA,AYmBA,ASnBA,AfrBA,ApBlBA,AwEeA,AvJ/BA,AIAA,AwBoBL,AHAmE,AzCd9D,A6CYL,AtDCA,AuDDA,A3EFA,ACZK,AuDLA,ATIA,AiBHA,AnDIO,AF+DA,AkD5DPjD,CtCCC,ANAA,C6DmD+C,A5B7D9C,AlByBT,CYAmB,ArBfT,ANAA,AbKA,ALLA,CyIGC,A3FXA,AIAA,AtBaA,A5BLA,AY2DP,CPtDM,AHTR,A+DJU,CrCaD,A6BdE,AeoDE,C3B5BQ,AsImDG,ApGf6B,AtB5DzC,A3CKV,AF+Dc,CE/DI,C4DgBX,AHAmE,AIFnE,AtDCA,AuDDA,A3EFA,ACZK,AFId,AiERc,AOmDE,C2GuBQ,AtD1DlB,C5FOR,CkJmD0B,ApGf6B,A7EvDpC,AFIA,AiCeC,C8CoCmC,A7EvDnC,C+I8BT,A9FpCT,ArCME,CiEuDmD,C6Be3C,AiB1DL,A7HRgB,AcJU,ANDD,AgEgDP,AV5C3B,CzDMY,C+FkEG,AyB/DkB,AjGHpB,AEPb,CkIiDiB,AlIjDW,A5BFV,AMDoB,AsDIV,C6EgDZ,A0DxBA,AnM3Ba,AuDLpB,CzDSY,C4GkED,ApCvBA,CoCuBC,ArCtDkD,CqBoCrD,A5FhDe,AyDTA,CmCyDxB,A9DlDT,A5BFkB,CuIOT,A7C6CP,AqDtBW,AnGlCJ,AIAA,AqBoBqF,AIF1F,ACAA,C6DPoB,A3FXG,AIAA,ApBMe,A6CYA,ACAA,A1EdN,AsE+CE,CqDnC7B,A3HZS,A8CDE,CHoBC,AmHgCH,A9JnDd,AFIA,C6CeuC,AuDwD5B,AQLD,A+BnBG,AdvC2C,AwEe3C,AjMxBsB,CwGmEV,AyF3Cb,A7L5BsB,AyBoBpC,ChCPE,AGTqC,CiMwBrB,ApMf4B,A+CbvB,AfoBiC,C2EmD5C,AjCxDV,ACAA,CgCwDK,A+BnBO,AqBAC,AxFJf,CE/BE,ACFqD,AtDCrD,AuDDqD,A3CKvD,CwGZuB,A7B+DU,A+BnBX,AqBAE,AlHvDE,AIAA,AeAC,A7DGO,CiM4BpB,ArJ5BS,AfoBkE,CyCHnD,ArDDA,ApBHpC,C4COwC,AwJQnB,CpMfiD,C0IuC1D,A3FpDI,AiBHc,CAAC,C0EuDJ,CAAf,C/BmBP,A5DvEW,CyFQI,A7B+DtB,A+BnB8B,AqBAf,AlHvDU,AIAA,CqG0EG,Cd/DoB,AuB4Cd,AlHvDE,AIAA,CkC2IP,ACjBA,AxCnGY,CGpBlB,AiBHP,CpBuBoC,AYxBV,AQC1C,EoB0HO,CDiBA,A3B5IsC,C4B2HV,ArCvHZ,CoCwIa,CmEjEP,CAAD,C9F3EiB,C8F2EV,AvGvEZ,CuGuEK,AvGvEV,EuGuEqB,A9F3EG,CTInB,GqCuHhB,A5B3HmC,C2B4InC,CCjB0C,ArCvH1B,CoCwI2B,A3B5IL,ATI3B,GAAA,ESJ2B,GTItB,CAAE,CSJoB,CAAH,E4B2HnC,ArCvHA,CoCwIA,A3B5IsC,ATI7C,CqCuHiE,CDiBC,G3B5IrB,CAAH,GAAA,C4B2HnC,CDiBA,ACjBP,CDiBA,A3B5I6C,CAAG,MAAM,CAAC,aAAV,CAAd,CAA/B;ArCAF,AHAA,AmE6IC,AD9ID,AE6HC,AQ3HD,AEAA,AD8CM,AjDvBqD,AmDxB3D,AhCCM,AiCHN,ACEA,AuCYuD,AtCZvD,ACgFqB,AEjCf,AC9CN,ApCAA,AwCAA,AC2EC,AG3ED,AEmDM,A7CmEA,AiCvHN,AaAA,ACDA,ApGIA,AsGDA,ACHA,ACEA,ACFA,ACAA,ACAA,ACEA,ACEA,AOJA,AFsDM,AGfA,ACvCN,AzC2DC,A0CiBK,ACNA,AC5BA,AExCN,ACuDqC,ACvDrC,ACAA,ACkCM,AKnCN,ADCA,AEDA,ACCA,ACDA,AC2E8C,AE1E9C,ACDA,ACwCM,ACvCN,AECA,ACmEM,AjDjBA,AkDOF,AETE,ACjDN,ACHA,ApBEA,AqBgEM,ArC/DN,AuCAA,AvFyCM,AiEPa,AuBnCnB,AC6CM,AC9CN,A/E0DM,AFzCA,AChBN,AkFoDM,ACaA,ACxBA,ACGA,AC1CN,A9FmDM,AwBrDN,AuE0CM,ACMA,AE9CN,ACcM,ACiDA,AChEN,AEFA,ADAA,A1DuDM,A9GQA,A0K7DN,ACEA,ACFA,ACEA,ACFA,ACDA,ACyFM,AnEpEF,AoEsCE,AC5DN,ACuHM,ACpHN,AC8B8B,AChC9B,ACCA,AC6CM,AC9CN,A1H4DyD,A4HAnD,AD3DN,AEqDM,AClCA,A9DpBN,AuBDA,AwCCA,ACqDM,ACrDN,AEAA,A1DAA,A4DAA,ACkCM,AtFjCN,AuFAA,ACDA,ACAA,ACDA,ACGA,ACHA,ACAA,ACeM,ACSA,AhLpBF,AQFE,ADDN,AJDA,ACGI,AUAE,ACHN,AlCgBA,AcfA,ACAA,AVAA,AGAA,ANCA,AKAA,AICA,ACHA,AKDA,ADkCO,AxBrBA,AiBwBA,ACYA,Ab5CqD,AOLpD,AHgBM,AVX4D,AsB4DnE,AnCjDM,A8CdV,AuBsBG,AHAJ,AzCdA,A6CYI,AtDCA,AuDDA,A3EFA,AiEnBN,AoBOM,ApFAH,AFIA,AuFXF,A9BEA,AFCK,ACDA,AcIA,AtBAL,AiBHA,AnDIC,AmENM,A4BDP,AjGqEoB,AN3Df,AoBHN,AHCA,AfH4C,AKA5C,AYHA,AQuB0D,AXxB1D,AbDA,ALUE,AqE2CI,ADCJ,AV5CE,AmKJJgD,CzMFO,ANAA,CdML,CJFA,CeJF,AgEyDyD,AgD3DnD,ApGcN,AefA,APAA,ADCA,AICA,ACHA,AIiCa,AxBrBA,AiBwBA,ACYA,ANjDL,ASiEK,AkCzCP,AHAJ,AIFI,AtDCA,AuDDA,A3EFA,AgFlBE,AvDMR,AHCA,EOCM,AlB4De,CqN/Dd,CjEsDC,AnCtCA,A/ElBA,AlBWM,AvBAD,A4BU6C,A6BfhD,AmKJFC,CnI0CQ,AjDvB2C,AmBvB3C,AsC8CA,AWKA,A7CmEA,A6DlEA,AGfA,AEqCA,ACNA,AC5BA,AMNA,AaKA,AI6BA,AjDjBA,AoDFA,AGcA,ArFtBA,AyFGA,A9EYA,AFzCA,AmFoCA,ACaA,ACxBA,ACGA,A7FSA,A+FXA,ACMA,AGhCA,ACiDA,AxDXA,A9GQA,AgL2BA,AC9BA,AE2DA,AKxEA,AzHcyC,A4HAzC,ACNA,AClCA,AEiCA,AMnBA,AQpBA,ACSA,AhLpBP,AQFO,AMCA,A0BIA,A/BJA,ACDA,AcIA,AxDCP,AF8DY,AN3DL,AEL4B,AiEgD5B,ADCP,C7CtCT,A+COY,AHAJ,AIFI,AtDCA,AuDDA,A3EFA,CwIN2C,ArCoEjC,AuCxBgB,AYmBQ,ANxC3B,AoDHW,AnJ9BnB,AwBoBE,AHAJ,AIFI,AtDCA,AuDDA,A3EFA,AgFlBE,AhDwB2C,AgMnB1D,CtFmDuC,A3DdjC,AyFGA,AMDA,AhGgBmD,AjCzD7C,AlBWE,AvBAD,AyBND,AlB4DS,AkD3DPhD,CkBiCY,AyFGH,AMDA,AiB6CjB,AjH7BmD,AjCzDrD,AnBYJ,A6CsCa,CsBNP,AmBKA,A0CZA,AqCiDwB,AjExFd,A9CDI,ArEoEC,CkFrBiC,AmBKhC,A0CXpB,AI4BI,AjDjBA,AgBEA,A+FxCA,AvLZN,AVYc,AvBAD,AqEQD,AHAJ,AIFI,AtDCA,AuDDA,A3EFA,C8JoDV,AjDlBwB,AuDYpB,ApB7Ba,AnBmBU,ADjCb,AwEWmB,AwBlBN,ACSvB,A/LzBc,A2CwBd,AHAJ,AzCdc,A6CYV,AtDCA,AuDDA,A3EFA,AyBZN,AOkB0D,CqEuBpD,AXUA,AsFfA,AjKoBA,A+G7Da,A5FDnB,ACmC0B,ARrBZ,AvBAD,AyDLH,CwCsCe,AgC4BnB,AiBA+C,AWzB/C,AvEOmD,AkFQnD,ACxBA,A5FYA,AgGLA,AsBFA,AGcA,AIPA,AMnBA,AnLjCN,AICA,ACHA,AFgD2B,AGgBA,AsBtDP,CjBeiD,AuB+F/D,AkE3CJ,AEnCI,A0BUJ,AGaqB,AOZjB,ACcJ,A3Fb2B,AgGJ3B,ArD5BiB,A2EyBU,AK1BvB,AEiCuB,AMnBA,ASXN,A/LzBkB,AyBGnC,AyBDmB,AvDMzB,AHCA,CsBiBsE,AuDwDvC,Aa5BzB,A7CmEqB,AmElDrB,AvD3BA,A4FWJ,AKXsB,AKuBlB,AtKHkB,AmLwDlB,AEtFiC,AOsBjC,ACjCJ,A3JnBkB,AfFpB,ACmC6B,AoBlCF,AyBDF,ATqDhB,C+DiBP,AIdoC,AYmBkB,AkB9BlD,AKJmB,ACGnB,AoB2EJ,AQ3DuB,ACLvB,A1JrDmB,AhBDrB,AKFA,AFgD8B,AGgBA,A8B1DxB,ArCmBoD,AuC6B9B,CyCDS,AlGjDrC,AyHsC0B,AxDCyC,AiHiB7D,A3HtDuB,A/CE7B,AUiB0D,CwGZS,AKuB7D,AiBkCA,AUxBkD,AhF7BlD,AsF4BkD,AOqB7B,AWLzB,A4B9CI,AlMCN,A8CqCM,CgExC8D,AnCmC9D,AwCZ+B,AaK/B,AlEvBJ,A4FDI,AjJmB2B,AHXyB,AwC4BrB,C2B4BD,ArF7EpC,AkHkDM,AUG8C,AoBelD,AjDnBI,AuEpC6B,AWyE7B,AKzDwB,AwBlB8B,AxLiC1B,AGgBA,AgB9D5B,AcIA,CNJA,AsC8C+B,A2BMD,AGf9B,AEqCA,AqBjCJ,A9BrBE,A1GV+B,AfFT,C4DRW,AiDmD/B,AHAqE,AgBErE,AkEmCqF,AjExFvE,ArFDpB,ACgCoC,Aa/BC,AcIA,AWL7B,AzEIsD,CqCoBH,AyFqDzD,AiBF6D,AWzBzD,AvEOA,ATJA,AgGLA,AsBFA,AOOA,AzKnDN,AiBAM,A/CEyD,AJKnC,A6NJA,ChH+CyB,AmBdpB,AmBqC+B,AvEjC1D,A8CYgF,A5EpD3E,AvBaX,ARJ8D,AWH5D,AwDFI,A/BJ8B,AjDO9B,AoBHN,CmBkB2D,A0GmDM,AWvB/D,AvEKoF,AFzChF,AoFiDA,A3FZiD,AgGHrD,AsBJ0E,AOOE,AhFpD3D,AzEAb,AJCwB,ARF9B,APAA,AQgCuC,A2C1B8B,AhFGhC,AmE2C/B,C8EuB4D,AvEjCc,AgH+C1E,AarEA,AvJnBmC,A3BczC,AOdA,AKFA,ATS+B,AtBJ+B,AgEiDjC,CsBNvB,A9B9CA,AyBiBJ,AoFiDA,AoBRI,AlE1D0B,AxGMhC,AkD6C4D,CgExCL,ARyCjD,A0BbA,A7BcA,AkEmC6F,AanEjG,AvMbI,AEL8D,CsF2CY,A9B9CtB,AyEWoB,AE4CjB,AYmBI,AzCvB3D,AmFSJ,A3J3DF,AK8B2C,A2C1BrC,A/BJA,C6C8EyB,AEjCzB,AvF5CN,AkHkD0E,AUGZ,AYmBC,AIjChD,AI2BT,AajBA,A1FCA,A4CC0F,AlEpD1F,AtDOuC,AoBH7C,C6G+DM,AOlCA,AhCiBkF,A+DalF,A+BXA,ASpBA,A/JjCA,AMCwC,AzBF9C,AGEA,AgDI4F,A/BJ9C,C+C6CgC,AiD4BN,AQHtE,AGtBI,AUIJ,A1FDsE,AgGLlE,AGhCA,AwBIA,A9EnBa,A7FAnB,AKFA,AzBOoB,AYApB,C0E0EiD,Aa5B3C,AsBmBJ,AOpCkD,ASwCqB,AsBPvE,A+BZA,AStBuF,A/JjCvB,AnBDlE,AZOA,AkD6CM,ADCsB,CJkEtB,AmF5CoE,AWvB3D,AgBFA,AGlCmC,AcsG5C,AUhGG,AE+BH,AhFpDoC,A7FA1C,AKFA,C0EqD8E,A0BIjB,AjGxD7D,AXFkD,ARSlD,AkD6C4F,ADCtD,CJkEe,ArDpHrD,AoLqHE,AYnE6F,AnJnDzF,C0EyEA,AKnB+D,AYmBI,A9D3DnE,AvCdwB,A1CEgC,CwDHxD,AjDEN,A4HqD6D,AYmBE,A3FzEa,A9CIlD,C2HM6B,AHiEwD,AKrBzE,AYmBe,A9DxDnD,AwGwCI,AzLvDyE,CwDHI,AyEW5B,CsByDjD,AkCRmD,AvJ7DzD,A8BqD4B,CmEG8C,AYmBQ,AjG1E5E,CiG0E6E,AQHxD,AcPrB,AnIjEN,A5BM0B,A0D+CkB,C4B2BvB,AmDL+D,AjG1EM,CcsHpF,AyGnDiB,CpFpDjB,AmFoCA,AuBkEA,ArI7GI,CM8GoE,AmElDxE,AIbyE,AYmBI,AqDrB7E,AhJpDA,AxBiCuB,ALrCrB,AjBQY,AgDGhB,CyFkE8E,A9DvDhF,AmFmCA,AuBkEA,A/JtF6C,A5B/Be,C+HmEiD,AqEfA,AhJtDX,ApDExD,CmIoDsC,AtGTpD,AGgBA,CmGPQ,AtGTW,AGgBA,A1BzD7B,AmNDpB,E1EsE6F,CZnBP,AYmBQ,CAAC,E4C2CzF,ArLhHoB,CyIqEoE,A9D3DxF,AmFoCA,CjCI+B,AYmBS,A4C8CnB,C1GpGzB,AmFkC6B,E9JjDL,KAAA,CAAN,EsB6BS,CAAtB,AtB7BmB,C2EUpB,EAMJ,CpDyB4B,AGgBA,CHhBvB,AGgBA,A1BzDmB,C6B0Ba,A7B1BnB,C6B0B+C,E8ChB7D,A3EVc,E2EiBlB,I3EjBwB,CAAE,IAAnB,CAAP,O2EUI,EAQJ,kBARI,C9CgBiC,C8CRN,A9CQ1B;A6C/BP,AM+CE,AjDxB8E,AkB3BhF,ACKE,AyEUuF,ArCoE5B,AEjCpC,AEjBlB,AQ7BP,ACoDE,A7CmEA,ArDrHyC,AkHmDzC,AGfA,AEwCA,ACNA,AC/BA,AGc0F,AGpB1F,ASuCiG,AI/BjG,AI2BA,AjDlBA,AkDOI,ACLA,ACDJ,AGWA,ArFtBA,AiERsB,AwBWtB,A9EWuD,AF9BvD,AmF4BA,ACaA,AC1BA,ACGA,A7FQqD,A+FVrD,ACSA,AGlCA,ACiDA,AxDZA,A9GQA,AgLgCA,AnEtEE,AoEoCF,AI7B0C,AGe1C,AzHawE,A4HCxE,ACHA,AClCA,AE6B4E,AEnD9E,AEDA,ArIAA,AuIiC6B,AtFjCkB,A8Fc7C,ACQuD,AhLlBrD,AQHF,AJCI,AUAJ,AjCY6B,Aefc,APAV,ADCC,AICA,ACHA,ApBelC,AYhBM,ADWJ,AwDFF,ApFAD,AkDAC,AGJA,ACDA,AcMA,AXRI,A7COL,ARGC,AoBJmC,AHCG,A8CNxC,A7DGiH,AyBoBvD,A9B1B1D,ACMoC,AqEiDlC,ADCE,AV5CH,AmKHD,CpLiBqB,ArCpBgB,AJA9B,CyCoBA,A1BVL,CsHFO,ArCoEA,AuCxBA,AYmBA,ANxCA,AoDHA,A7L5BF,CiIQL,ArCoEA,AIlDW,A+C6CX,ANxCA,AoDHA,AtKlCoB,AkMShB4C,CtFiDwF,CrCTrE,AWMnB,A7CmEE,AgEjFN,AIGA,AGcO,AoBeP,ACXI,ArEHmD,AF9BjD,AmF4BN,ACaA,AC1BA,A5FWqD,A+GQrD,AcR4E,AMnBjD,ASX4B,AxKrBnD,AgCKA,AlCAE,AnBiBkD,AwC6BlD,CkEGN,AwCmB0B,A7HzErB,CuEuBC,ArD6BA,CsBNC,A9B9CA,AwC4BS,AyBwBT,AKyBA,ACNA,AOrCA,AaQA,A7CSA,AmDEO,ACDP,AGWA,ArFtBA,AyFGA,AMDA,AEFA,ACSA,AGlCA,ACiDA,AxDZA,A9GQA,AgLgCA,AQhDA,AGcA,ACHA,AClCA,A9EvBuC,A8FcvC,AjKZA,ALAA,ACDA,AcMA,AXRc,A1BwBmC,CdVhD,AmEPA,AhBCA,A2JDE,ChH8CD,A/BA4C,AiGsB3B,ArItEjB,AhBIA,AwDFA,AhBCA,CgCuCc,AEjBJ,AwD8BT,AvEjCE,AsC1BqC,AzECjD,AnCYA,AcU4E,C6DwBjE,AkEYA,ACLP,AkBoBsB,AtDlDf,AExBuC,A7EE9C,A+KISuB,ChEiDb,A3GtDY,AgBML,C2C6CM,AxB1BO,AsH0BwD,AtIA7D,C+BvBQ,AuDyCvB,ApEduD,AiFFvD,ACaA,A3FfqD,AiGsB3B,AtDlDP,AoEoCnB,C3FduB,AbpBvB,AsC1B8C,A+FsBS,AxIhBnD,Ad+CW,CRpDC,AIsHE,AgEjFlB,AIGA,AsCAA,A/CzCuD,A7EE9C,AnBLyB,AqBShB,AqB8CA,CwCAlB,AiEDQ,ACuBkB,AEzDlB,ACiDA,ApIhEE,AoBKO,CuDiBf,AkF4B0E,Ae9BrB,AhLlBrC,A0BiDA,CRpDC,AiDmDA,A7CmEE,AgEjFrB,AIGA,AuB6BA,ApEduD,AiFFvD,ACaA,AC1BA,A5FWqD,AiGsB3B,Acd1B,AnJxDmB,AfPoB,AqBSlB,AnBiBgE,AgMjBhE,C3HwCE,A0DanB,A9EPiD,A4I9BE,A3MT9C,AmEPW,AhBCA,ArCgBkE,AgMjBhEC,C3HwCC,A8BRvB,AIGA,AwBkBqB,ACLjB,AabJ,AuCR2B,AtFjCmB,A7EE1C,AoCIJ,CvEJyC,AmEkDY,AiGsB3B,AjIvEpB,AvBWuB,Aefc,APAV,ADCC,AICA,ACHA,ATUZ,AJHa,AHCG,C+EwCf,A2DUvB,AiBLO,AGlCA,ACiDA,AyBdqE,AjL5CrD,AwDFA,ArDiBiC,AwC6B/B,ADCvB,CuFiBF,ApEduD,AiFFvD,ACaA,AoBPA,AcR4E,AhFpDb,CgCsE/D,ApEduD,AiFFvD,ACaA,AKhB6B,AGlCf,ACiDA,AWNd,CnDzBe,AaQA,A7CSA,AoDCA,AGWA,ArFtBA,AiGAA,AnDYA,A9GQA,AgLgCA,AQhDA,AKvBA,AE6B6D,AMnBjD,CtDqC3B,AUzBc,A9EWyC,AiFFvD,ACaA,AEvBc,AkBgBd,AlE5D6C,AjFIpC,CAAmB,AnBUC,ARD7B,AiCP8B,CtBER,AsBFS,AqB8Cb,CwFEd,AtIxCyB,ARDZ,AWLf,CkImDE,AmBesB,AkCzCC,CpDuBd,AkBkBa,AkCzCC,AnK9BpB,AoBIyB,CwBwCzB,A6GaU,ArK3DiB,AhCQlB,CwFsC0B,AuHdf,A3L5BQ,A+C+CC,AwJ9CvB,C3FwEK,ACNA,AqEfA,AzK1De,AGEC,AiBChB,ACDA,AyKKmB,CzHuBlB,AsCMH,AaQA,A7CSA,AuDYA,ArFtBA,AiGAA,AjKoBA,AwLhBA,AKvBA,AlLTa,AOdK,AKFA,AbOC,C8EwBM,AtD1BnC,AfJ2B,AiBOZ,A7BAiB,CWNJ,AKFA,AaQM,CFH5B,A3BG0B,CRJG,AoKwEf,ArItEE,AfPoB,AwBKzB,ACDA,ClBAW,AiBCV,AIHpB,C5CGqC,A+HiC1B,AaQA,A7CSA,AuDYA,ArFtBA,AiGAA,AEgCW,AnKZX,AwLhBA,AKvBA,AlJxB4C,AjCMxB,A+C+CnC,CtCrDiC,A7BUjC,A2NHa,CnIyC8B,AgDZnB,AaQA,A7CSA,AuDYA,ArFtBA,AiGAA,AjKoBA,AwLhBA,AKvBA,A3KvBU,AKFA,AjCWP,A2NH7B,CvLP6C,AcEpB,AjCKe,C4JoEkC,C3E7CrD,ApC0Fa,A6DlER,A4FvCA,AnLfmB,C8D8BtC,AzF3BoC,AmJmDf,C5ByBnB,ACNA,AqEfA,ApJxDW,CJKsB,CuJsDjC,CAAP,C3I3DiC,AsE6EG,ACNA,AqEfA,AlK1DO,AcEzB,CsC8CwB,AgDZ3B,AaQA,A7CSA,AuDYA,ArFtBA,AiGAA,AjKoBA,AwLhBA,AKvBA,A9K1BT,AuCUW,CmGsCQ,AMDA,A8C9BlB,C/HiC8C,AgDZnB,AaQA,A7CSA,AuDYA,ArFtBA,AiGAA,AjKoBA,AwLhBA,AKvBA,AlJxB9B,ArDUuB,C4J4CZ,A2DvCc,AjKZA,CIDV,ARAI,AcMwB,AXRiD,CuGsD3D,ClGpDG,A8DqDX,AkEwCA,GvBjDf,AMDA,AxH1CS,ACDA,CqKahB,AtKZA,CsKYP,AtKZA,CaqHqB,A8FlEN,CORsB,AMDA,CbSS,A1GpDvB,CQAJ,ARAD,CQAF,AIsHuC,C0DjExC,AkEwCA,CxI7FQ,CQA8B,A8DqDX,AkEwCA,E/DzCnC,AiCAQ,CAAR,CjCAgC,AKyBM,A4BzB7C,AORsC,AMDA,AjDUvB,AkEwCA,AxI7FQ,CiH4Cc,AMDA,AvH3CnB,C+EuE4B,ATlBE,AkEwCK,AYrCP,CnCZL,AMDA,CNCJ,AMDA,AvH3CnB,EiH4CwB,AMDA,C9CSnC,AKyB6B,CLzBpC,CKyBsD,A9E7E/B,AcMmC,CdNhC,CsEqD+B,AkEwCK,C5HyBzC,A0DjEqC,AkEwCK,A1HvFF,CAAC,CiEiEhB,AqEfA,CxI8D+B,EEhH9B,CwD+CC,AkEwCK,GhI7Fc,C8DqDC,AkEwCK,A1HvFF,CgEuEnC,ARxBrB,AkEwCA,E1DhBuD,ARxBC,AkEwCK,ChI7FvB,AsE6EjB,CtE7EpC,AIsH6E,AkEzCtE,C9E7EgB,CwI6FR,AxI7FR,C8E6EoE,ARxB5D,AkEwCR,AxI7FP,CwI6FA,ClExC8E,IAA/D,CAAR,CAAP,IlEpDgE,KAAnC,CAAtB,EAAiE,AUKU,GAAG,CgEuED,AhEvEE,KVL/E,CAAP,C0E4E2E,EAAkB,AhEvEtB,CgEuEI,AhEvEpE,CgEuEP,AhEvEA;AlDPF,AHAA,AkEDA,AU+GM,AE1EN,ADYI,AEhDJ,AhCEC,AiCJD,AC2IM,AuC7HL,AtCZD,ACgFC,AElCwB,AC7CzB,ApC2EM,AwCTA,AIKA,AElBF,A7CiEiF,AiCvHrF,Aa6BM,AC9BN,AEgDM,ACCA,ACRA,ACzCN,ACAA,ACAA,ACEA,ACoGM,AOtGN,AFuDC,AIvDD,ACgFC,ACPqD,AGvEtD,ACuDC,ACvDD,AC0DM,ACvBF,AKoBE,ADvDN,AEgDM,ACoBA,ACyEA,ACnEL,AE1ED,AC+DM,ACpBF,ACCE,AE3CN,ACoEE,AjDhBE,AkDMC,ACFH,ACJD,ACrDD,ACHA,ApBmCM,AqBgCF,ArChEJ,AuCAA,AvF2CI,AiETH,AuBgBK,ACN2C,AC9CjD,A/EyDyD,AF5BvD,AC5BF,AkFsDE,ACaA,AEvB+C,ACiC3C,A9FzBiD,AwBpDvD,AuE2CI,ACSA,ACsBwB,ACQtB,AChEF,ACiDA,ACWE,AEjEA,ADdN,A1DwDC,A9GQG,A0KPE,ACvBA,ACsBA,ACCA,AChBA,ACEA,ACqDL,AnErEG,AoEkCF,AC7DF,AEGA,AC8BC,ACYK,AC3CN,AC8CI,ACQE,AEML,ADiBK,AErBgD,AC/BlD,A9DgBE,AuB3CN,AwCCA,ACoD8E,ACpD9E,AE8EM,A1D7CA,A4DgDA,AChDuB,AtFjCwC,AuFCrE,ACDA,ACCA,ACDA,ACEA,ACHA,ACkBM,ACFL,A/KVK,AQHF,ADFJ,AJCM,ACGI,AUDT,ACJD,ApBEA,ATAA,AHAA,AeHA,ADsCO,AxBtBH,AiByBG,ACYA,ANtCA,ASsDA,AWlEL,AuBqBI,AHAJ,AzCbE,A6CWE,AtDCA,AuDDA,A3EFA,AiElBN,AoBOI,AlCAA,ApDIF,AuDRD,ACDA,AcMA,AWPD,A3ESY,AONZ,AY4BA,AQT2F,AXtB3F,AbFA,AgEsDE,AwJ9CF,ClGPA,GhCoCM,AOUmB,AWQrB,A8CgBF,AMLE,A1ETqD,AiFFvD,ACaA,A3FfqD,AiGsB3B,Acd1B,AcR4E,AMnBjD,A5KhC7B,ATAA,AWmCa,APGA,ACYA,ANtCA,ASsDA,AfnCb,AwMzBMU,CjEmDF,CvE9BE,AzFjBE,CYwDa,CkI/Bb,AaQA,A7CUA,A9BVA,AiGDA,AIzBE,ACiDA,AtKJF,A6GrCA,A2EqBA,AKrBA,A3JtBE,A/BUF,AiByBS,AkDhCP,AlCAF,A9CGI,CuFoGI,AK2BA,A/B7DA,AwCTA,AIKA,AElBP,ACzBO,AGkBA,ACCA,ACRA,AK6DA,AiB1CA,AMHA,ACPA,ACoBA,ACyEA,AI9EA,AEnBA,AKaP,AjBzBO,AwBkBA,AQ0BA,A9FzBuC,AkG8BvC,AGJA,AEjEA,AC2CA,ACvBA,ACsBA,ACCA,AChBA,ACEA,AOEA,AGWA,ACuBA,A3DpCA,AmEoCA,A1D7CA,A4DgDA,AQhEA,A3KhBA,AZkDE,ATtCJ,AYsDI,AnCtDL,A8CZJ,AuBqBE,AHAJ,AIFI,AtDCA,AuDDA,A3EFA,AiElBF,AeCA,ARoDA,C6BPgB,A+DmBf,AvH5DA,AQHA,A2KKE,C9JqEN,AC2C+E,AmE/C/B,A8BP3C,AIpBuC,AMDA,AGQ9C,A0BKkD,A9JpD3C,AVkCS,AN9BT,AlB0DU,CqGbT,AxB1BA,APwB2C,A+FTnD,ACSC,A0CnCC,AvLkCe,AGgBA,C8DrBI,AqDFZ,A7CUA,A9BVA,AEQ0C,AuGvCjD,A5DaO,AgFAA,A9DgBP,AgEUwE,AnLvChE,AvBAD,AqESP,AHAJ,AIFI,AtDCA,AuDDA,AVpBN,AtDmEqB,A6DdR,AwJ9CEX,C3HuCU,AnC8BP,A+C/CZ,AGkBA,A8BSA,AYcJ,ACVY,ArEJ2C,AiFFvD,ACaA,AMO0B,ASnBtB,AKKJ,AObY,AzDLU,AzFxCV,AtBDd,AkCDiB,AlEWD,C6FmGV,AqBhFJ,AGiBuB,AEPnB,A4BgBmB,A1D5BV,A0F8Ca,AExDX,ACiDA,AIXX,AEDmB,AEfnB,A8BvBa,AzMHJ,ASDD,AvBAD,A8CZE,ArBQX,AwDFW,CiCiCW,AuBJV,AY4BV,ACpBU,A7CUA,A9BVA,AShBd,A2FsDI,AKrEc,AC2CM,AIhBA,AjEdV,AgFAA,AE0B8D,AjK/C9D,AKJA,AuBqBE,AHAJ,AIFI,AtDCA,AuDDA,A3EFZ,AWiDe,CqGbjB,AoCeE,AMzBF,AI0BF,AjDhBE,A9BVA,AWYqD,AiFFvD,ACaA,AMO0B,ACQE,AvDxD1B,AoEkCF,AKhBI,AEGW,AxK9CjB,AkCDA,AlEWmB,AyBqBnB,CoE8EsB,AE1EF,AgBoCd,AOxBA,A6BQA,AEayB,A2BQzB,AGHsB,AExDR,ACiDA,AtKJF,A6KPZ,ASZsB,AGWtB,ACuBA,AxJ1Ec,APgCO,AxBtBT,ASDJ,AvBAD,AiFNK,CyBkEhB,AOzB2B,AMqDvB,AkBjEa,AY4BI,AEnBjB,AaAoD,AMDA,ACkCxD,AW7CI,AEuBuB,AEdvB,AWqCJ,A3DrCI,AzFxCI,AJEW,AjDcA,AiElBI,AtDmEJ,CgHmCnB,AuB9C2C,AkBSzC,AGdE,ACNqD,AMDA,AYX7B,AISA,AchB1B,AOuDE,A9J/Ec,A2BDpB,AxD+BA,AgDqBS,CsBjB0C,A8CuB7C,AwBOA,AIrBoD,AMDA,AI8B9B,AnKXc,A0KPpC,AeDmB,A1DbY,AgEUyC,AG0BxE,A1D7CA,A4DiDJ,ACjD2B,AvK5BR,AH+BS,AZvBA,AHAhB,AvBAD,A4EZc,ArEkEN,A6DdO,AwJ9CL,CpFoDS,AOV1B,AQJoB,AyB3BF,ACiDA,ACWlB,AiB/BF,AUgCF,A1D9C8B,A1G5BV,AIDZ,AoCGY,A2IAEC,CjF0BlB,AwBkBqB,ACNmC,AMDA,AQmC5D,AGvBwC,AxInD9B,AtBQE,AvBAD,AiFNU,ALNvB,C6DmCI,A2BSsD,AMDA,AeJpD,AsByCA,AChDuB,A5KhC7B,ALsCO,AL1B6C,AoBZlD,AmCMoB,A1E4DD,ANzDO,CwFsCd,AIyFR,AajEA,AqCvBuB,AWqB3B,AMJQ,AIrBwC,A9EWO,AiFFvD,ACaA,AEvBgD,AKsC5C,ApKnBF,Af7CuB,AqFXvB,ALNoD,CiByItD,ASvEI,A4BKgD,ASvCxB,A8COqB,ACE7C,AWoCA,AErBgD,AQ0BpD,A/KhCK,ATtCO,AYsDP,AnCtDM,C0G6DX,AO1BI,A8DkCyD,AS1BzD,AIImC,AKhBnC,ArJ3CA,ARAN,ATAA,AhCU6B,AMDI,CsH2F3B,AqC3CW,AQbkD,AMDA,AYX7D,ACsBA,AGbwC,AEkB5C,ASoBA,A5J3EI,AGJgC,AsBqBpC,AtEHW,ADRiB,C2GwDG,AWnBc,AuBWzC,AMHA,AEaA,ACyEA,AmBjG4C,AMDA,AcYiC,ASZtC,ArH3C7C,CbsHqF,A8C1F/E,AUyE4C,A0ByChD,A6BrE0B,AQzCgE,ACsBrB,AKK3B,AiBkBtC,ApKzEwB,ArB2B9B,C4FeM,AEPA,AsBmB2C,AMHqC,AEaxB,A8BKlC,Acd1B,AtHxCI,ACAA,AKnB6D,ARoDtC,CyCtB3B,AuDcqE,AMDA,AGQ3D,AgC4BV,AhK3EmB,CmE0CwD,AEPnB,AkDKR,AMDA,AI8BtB,AIItB,AUlBuC,AhJ3DvC,ACIgB,AlBJtB,ApBkEqB,CuKOO,A3BzCtB,AvJda,ADRU,AYwDR,C2KanB,AtI/EiE,AjBAnE,AJYc,AvBAD,AJMO,ADRlB,CkG8HI,AajEA,A0D3BqE,AMDA,AvBXE,A5HpB/D,AvBAD,AoBmBb,AwMzBe,CxDsCkC,AMDA,AgBF3C,AtJzCN,AwLMuC,C/HoIrC,AahEA,AO3BI,A+BqBA,AYXqB,AxI1B3B,AgDqB4B,CwFKA,A8BhB2D,A5K5BnF,CmGkC2E,AuBWzE,AQUiF,ACyEjF,A8D7DA,A3I5BgC,CyGDjC,AgC0BC,AhKzEM,AwBiBN,ArDDA,ApBFO,C6F6BkB,A+CW2D,ASqFxF,A0BnEI,A0BCA,AUMJ,AlK/E6B,AtC8DV,ANzDkB,C4K0ChB,AgC6BrB,AzKhFF,CqD+CI,AkF+BF,A0BC6G,AzJ/EzG,ANmCC,AfvBO,AvBAD,AJMa,AWgDL,CmGKf,AwEMA,AjI5EI,AbDV,AwLMe,CnIyCoB,AxC9C/B,ALDuF,ArBY7E,AvBAD,AoEwCe,AwJ9C5B,ClHoEe,AwEMb,CtBvByB,AqBSP,A1KAuC,A6Ddf,CyCxBtC,AgGiDA,CjDpBiC,AiBNlC,AIeD,A1JtDiB,AvBAD,C6F4Hd,AgB1G4D,AgGkDlC,AEA1B,CpCJA,AEzB0B,ChFwF9B,AoDEI,A8D1DqB,CpCL0B,AK7DjC,AnIbW,C4C2C3B,AwDgGwD,A+B9HjB,CvF8BE,CmEUlB,CiBNtB,A5K1CO,C2JgDoC,AiBN5C,EAAqC,EbcnC,CACE,EvEnBJ,AmEUuB,AsBoBrB,CrF2DA,A+D/EG,AoBxCW,CpBwClB,AoBxCE,AEgEF,A8BjD2B,CnH2GW,KmE1ElC,EAEE,KahBwC,IK0B1C,EAIiC,AtL/D1B,CoKiDL,EpKhDN,KiLgCkD,CjLhC5C,CAAC,GAAP,CAAW,GiLgCmC,EAAe,KjLhCjD,EiLgCkC,CAAP,AjLhC5B,EiLgC4D,AjLhCtD,CAAN,EAAO,GiLgCqB,CAArC,CAAA;A1FnDJ,AK6GuB,AEzErB,ADYC,A/BpDH,AmCiJE,AIhGiC,AnC8Bb,AwCRpB,AISA,AC5EF,ACsDI,A7CgEoG,A8CtFtG,AnGlBA,AsGiCA,ACA6C,ACP7C,AK+DA,AWhCmE,AMbpB,ACtB7C,AKmByC,ACN3C,ACoBA,AC0EA,AIhFyB,ACnBvB,ACCF,AGwBqB,AjDZnB,AkDGE,ACFL,AjBzBC,AqBmCQ,ArFtBN,AwFKF,ACP2E,A9EWS,AF1BpF,AmFwB6B,ACaR,AEvBsD,ACqC3E,A9F7BsE,A+FRpE,ACQ+G,AE+BjH,AChEE,ACiDA,ACgBF,AEvEsB,AzKoDnB,A0KTqB,ACtBxB,ACqBuB,ACEvB,AChBA,ACC4C,AlEb1C,AoE+B8C,AE8DhD,AG7EA,AEGE,ACO4B,A1HK9B,A2HsBA,AEzBmE,AC1BjE,A9DYF,AgES6F,AE5CxF,ACwEL,A1D/C8B,A2DhChC,ArICA,AsIoFE,ACrDuF,AOhB/D,A9KTlB,AQLL,ALDD,ACIY,AvBSZ,Acd2C,ACF7C,AVEmC,AGFnC,ADmBE,AIfA,ACLF,ApBiBI,AYCF,AHHY,AvBAD,A8CXZ,AuBqBK,AHAJ,AzCbC,A6CWG,AtDCA,AuDDA,A3EDmB,AiEnBvB,AdOI,ApDIJ,AcAI,AmEVF,ArEiEiB,Ac9DrB,AHEE,A8CNF,A5C+BsC,AtBjCtC,AsEuDI,ADAA,AV5CJ,AmKFA,ElI6BE,AhErBA,A/BJA,C8FmCO,A1BwEP,AmE/CoC,AkC3BtB,AMDA,AGOd,A0BMoC,C9GVpC,AmBQE,A6BlBA,AaQA,A7CaA,A9BXA,AhEkBC,A6GpCD,AoFrBS,ArM2DQ,AqN3DfW,C1FgEiE,AqEfA,C/GqDhD,AKgCjB,A/BlEgB,AwCRpB,AWpB6C,AuBWE,AMHJ,AGwF3C,AIhFyB,AMHrB,AKQI,AIxBsE,AhFf1E,AsFc0E,ACqCxE,AOGF,AEvEkB,AC2CE,AEDD,AGbqB,AIgFxC,AMnE0B,ASyB9B,A1D/C8B,A4DqD1B,AQrEoB,AhMJZ,AvBAD,A+CLP,CgF8BJ,AIGA,AsCAA,AgDnBuD,AlN6CpC,CqKvBb,AuBIA,A1JxCA,A3BOA,APoDa,A6DbX,ADAF,CuCuBC,AEtBA,ACtBA,AGeA,AEPA,AK+DA,AwBtDA,ACoBA,AOxBA,AZZA,AwBkBA,AY+BA,AOjDA,AEuBA,AChBA,AQIA,AvHeA,A2HsBA,A3DvCA,A9FzCA,AyBqBE,AHAJ,AIFI,AtDCA,AuDDA,AVpBF,ApDWO,AmEVL,AnBQF9E,AmKFE,CpIsGY,A1BlCD,A4CCZ,A+BxCA,AaQA,A7CaA,A9BXA,AyGlCc,AzKoDL,A6GpCT,A3EvBI,AtBOA,AvBAD,ALDH,AYuDW,CmF9BV,AhFtBT,AqHuBA,AIGA,AMJS,AaQA,A7CaA,A9BXA,ASjBA,AqFWT,AOtBS,ACiDA,AtKHS,A0KTM,A7D3Bf,AuFyDT,AUhEuD,AnMPvD,AehBF,APAA,ADmBE,AIfA,ACLF,AXec,AvBAD,ALDF,AYuDU,Ac9DrB,AHEE,C0FgDU,AyCSe,A+CTK,AvItDpB,A+JOEkE,CpIsGS,AEzEV,A5BuCS,AwCRpB,AMbE,ACtBS,AkBKX,AIGA,AsCAA,AW5BsB,AQ+C0B,AOZrC,AoB/Ba,AEK+B,A7KpB5C,ArBWC,AvBAD,AJOe,AiEnBf,AdOA,CqCsBC,AwG8BqC,AlDjBrC,A5H5BA,AYCA,AHHA,AvBAD,AJOgB,AmDZf,AxC2DO,A4DbjB,CqBwDmB,A1BlCD,AmD5ByB,AuBWE,AMHJ,AOQlB,AjElCzB,AwFca,AIzBA,ACiDA,AGvDS,AM6BsB,AUad,ASyB9B,CvGZA,AyB9BA,AIGA,AwBoBc,AKQI,AIxB6D,AKJ/E,ACG+E,AWYvD,ASkExB,AK1Ec,AoB/BU,AEK+B,A/LN3C,A2COR,AHAJ,AIFI,AtDCA,AuDDA,AVpBU,ApDWV,AmEVY,CqE8IhB,AIhFyB,AMHV,AKQI,AIxB2D,AMDA,AKuC/D,AoBnCb,ACO4B,A9KxC9B,ARAwD,ASF5C,AvBAD,AJOmB,AiEnBf,ApDYf,AmEXiB,C0BkEjB,AsExBgB,AqBCA,AvDFA,ASVc,AoEhBN,A9KTR,AnBOJ,A1BKc,AmDZtB,AqB8Cc,C2DhBlB,AGkCoC,AC/BpC,AiCIkF,AKJlF,ACGkF,AaW3D,AKK+B,AWHlB,A7Dd7B,A+ErBgD,AhLdtC,A4BeE,AHAJ,AIFI,AtDCA,AuDDA,AxBbF,C8CsIjB,AoB9F6C,AiBwBtC,AMbwC,ACtB7C,AKmByC,AQXzC,A7CaA,AkDGE,AhFdF,AyFF4E,AMDA,ACqC1D,AIEF,ApKlBf,A+KvByC,AlEb1C,AoE+B8C,AWHzC,AMuBP,AhK1EsB,AlDMtB,AiOJoB,C7F8BpB,AIGA,AMHI,AaQA,A7CgBA,AkDDe,AKQX,ArFrBJ,A8FPJ,AYewB,A7D1BpB,AiGRmD,A5KhBhC,AjDcQ,AaR3B,AmEVY,ARoDK,AwJ9CAC,C/HsID,AoDEpB,Ae3EwB,AIxB2D,AMDA,AWY3D,AYXJ,AvDAhB,AzG1CJ,A2CDS,CsDsE8E,AyCShE,ACrCrB,AqBCK,AMYgF,ApDxBzD,AlH9BR,A4BFX,AdOP,ApDIiB,AcCgE,AFsDlE,Ac9DrB,C0GiCE,AIGA,AsCAA,AYewB,AEDD,AkCjCgC,ArLrBZ,ATAV,AGFnC,AvBoEqB,AanCiB,CsEKzB,AuBWkC,AuBWE,ACrBvC,AKkBmC,AQVnC,A7CgBA,A9BdA,AuGoCe,AQ1CqB,AlEZpC,AoFtBwB,ACwEhC,AhK1EY,AhBYZ,AKpBF,AtCsB4B,AgFlBD,ARoDA,C6CNoB,AuBWE,AMHJ,A4CdC,AOKxC,AYiCJ,AhK1E4B,AhBYhB,ANLA,AvBAD,AsEQP,ACAA,AVpBoB,AtDkEL,Ac9DrB,AHEE,C+HyIA,Ae3EQ,AvH7DF,AnBON,AQhBF,APcc,AvBAD,A6DZD,AeCiB,ArEiER,AW5DC,C8FyCL,ACA8B,ACP9B,AK+DA,AiB7CgC,AMHJ,ACN5B,ACoBA,AC0Ef,AMlGe,AZZA,AwBkBA,AmBlBA,AEuBA,AChBA,ACC6B,AhHkB7B,A2HsBA,AO1EoC,ACwEnD,A1D/C8B,AjHnChC,ARkBc,A9BIwB,AiEnBpC,AeC2B,AnBQ7B,C/CKE,AiJ8CI,AuBuBuB,AK7BJ,ApCtBO,A7HlBI,ACFtB,AvBAD,ALDgB,C+GiEZ,AhG7Db,AuIgIF,A8B7DmB,AGCS,AK7BL,AiBrBnB,AjLrBQ,AvBAD,ALDiB,CwJqBE,AtG3BlB,AjDc2B,A6DVT,C8H6CP,AtJpDvB,ArCiBwC,CmIkBxC,AIGA,AsCAA,AgDnBuD,AnMPvD,AsDbyB,A1DKzB,C6G+BA,AIGA,AsCAA,A/BII,A+EvBmD,ApLvBzD,AVEmC,AMGX,A2CFK,CiC+BpB,AjE/BA,AtBa8E,AJRxD,A0MCjB,C/GyB8B,AkEkDxB,AnIjFO,AjBDQ,AhCWZ,AiOJe,CvLTtC,AvBgBI,AnBHiC,AyBoBC,C4FgBpB,AEPA,AK+DA,AwBtDA,ACoBA,AOxBA,AZZA,AwBkBA,AY+BS,AOjDT,AEuBA,AChBA,A/GmBA,A2HsBA,ApK/EhB,CyE0EQ,A9B3EmB,AxD8BS,CoLE/B,AvK9BoE,AjBkBrE,ApBFgC,AgFlBX,C8B2EC,AhG9D1B,AmBGA,CkGoBA,AIGA,AsCAA,AgDnBuD,A9LrBtB,A0CsB7B,AzEHmB,ADRiB,AiFVb,ClEezB,AmBC0C,AlCNH,AiOJ7B,C5GwCG,AEPA,AK+DA,AQlEf,AIGA,AYSe,ACoBA,AOxBA,AZZA,AwBkBA,AMXf,AaPe,AEuBA,AChBA,AQIR,AvHeQ,A2HsBA,AoB5DwC,ArLrBZ,A8BsB3C,A0JfF,CpB0BM,ApLFgC,CyFCO,AGenB,AEPA,AK+DA,AwBtDA,ACoBA,AOxBA,AZZA,AwBkBA,AmBlBA,AEuBA,AChBA,A/GmBA,A2HsBA,AzJhFC,ARDkB,APiB3C,CoK8BI,AOdW,C9F2CP,AqBvCqC,AIGA,AsCAA,AgDnBsD,A5LJtB,CnBH7E,AwHyDiG,AqEfA,C7FoB9D,ChG3DjC,AiK+DgC,AvG3Bb,CoIpBjB,ApKjCuC,AzCWtB,AyE0CsB,CzE1C3C,C6MsBoB,E3FDsB,AGe3B,AEPA,AK+DA,AwBtDA,ACoBA,AOxBA,AZZA,AwBkBA,AmBlBA,AEuBA,AChBA,A/GmBA,A2HsBA,AzJhFU,EiE+B4B,AGenB,AEPA,AK+DA,AwBtDA,ACoBA,AOxBA,AZZA,AwBkBA,AegCK,AIlDL,AEuBA,AChBA,A/GmBA,A2HsBA,AzJhFC,CoIiB1B,ACiDA,CDjD0B,ACiDA,CvKrDnC,AwHyDiG,AqEfA,E7LtC/F,A+HmBE,AaQA,A7CgBA,A9BdA,A6ClBA,CiBSE,AaQA,A7CeqB,A9BdA,A6CjBrB,EwDZG,ACiDA,AgBpBG,EjB7B+B,ACiDA,ArGlEhB,ElEa3B,AkEb2B,C8B2EkB,ChGzDnC,AkElBiB,E6DoCvB,AaQA,A7CgBA,A9BdA,AgGiCmB,AnDnDnB,EiBUE,AaQA,A7CciC,A9BdA,A6ChBjC,AyEgBO,CvF6BsB,AwEOP,CxEPpB,AiEIqD,AOG7D,CxEPO,CsE1DoC,ACiDA,ACgBkB,CxEPN,ChG9DvD,AuLiCY,EvL5BqB,AuL4BZ,ExDRd,AaQA,A7CciC,A9BdA,A6ChBjC,KiBQD,AaQA,A7CciC,A9BdA,A6ChBjC,A5C9ByB,E6DsCnB,AaQA,A7CciC,A9BdG,A6ChBpC,CyEgBA,CrH9Ce,CqH8CI,ArH9CJ,CAAF,CAAhB,G8B2EqD,AiEIvC,A/F/EgB,EAAE,C+F+E8C,A/F/E7C,IAAD,CAAvC,M8B2EgE,CiEIqB,QjEJzB,EAAe,OAAf,CAAP,EAAgC,qBAAU,MAAV,CAAhC,CAAhD,CAAP;A3FHI,AHzEN,AkEDA,AYqCmB,ADalB,AjDgCK,AmDjFN,ACFA,ACgJI,AC9IJ,AICA,ACgCM,AO+CL,AEzBE,AZ2EG,AajGF,AClCJ,ApGeE,AsGkCE,ACD2C,ACL3C,ACWE,ACtDN,ACAA,AC2CM,AC8DF,AOzGJ,ACsCE,ACtCF,AEwEyG,AC/BvG,AE3BF,AE8CM,ACD2C,AClBvC,AKemC,ADtD7C,AEiDI,ACoBA,ACyEF,AG9IF,AE+CU,ACFN,AEgBE,AhDD8C,AkDA/C,AG5DL,ACFA,ApBmCI,AqBmCM,ArCpEV,AuCAA,AvFiDQ,AwFEJ,ACRsF,AC7C1F,AjFgCE,AC/BF,AoFwCE,ACGwF,ACqCK,AtEhF/F,AuE4CI,ACQH,AE8B+B,AChEmB,ACiDA,ACiB/C,ACtDE,AxKoCF,A0KXsB,ACrBtB,ACoBqB,ACGrB,AChBA,ACA0C,AlERpC,AoE0B+C,AC5DzD,AC2HE,ACxHF,AEiDQ,ACXF,ACQF,AzHYA,A2HsBA,AE1BqG,ACvB9E,A9DWf,AuBJN,AwCDA,AE+DA,AC9FJ,ACuEA,A1D/C8B,A4DsD9B,ArFvDI,AuFYA,ACmBA,AC7DN,ACDA,AC8CM,AC/CN,AGsByD,AhLblD,AOFD,AJJF,ACIU,AWPd,AhCGA,AKe8C,AIf5C,AMFF,AzBeY,AYAG,A2CQV,AHAJ,AIFI,AtDCA,AuDDA,A3EFiD,AiElBrD,AoBMG,AlCCC,ApDIH,AcEA,AmEZD,A3EQG,AoBNJ,AHEE,AVFF,AoBkBsB,AXrBtB,AbFA,AgEuDM,AX5CF,AmKFJ,ADbO,EfaL,AjNIA,C0EOE,AHAmE,AIFnE,AtDCA,AuDDA,C0C8B2C,AcV7C,AIGA,AE3BI,AG6C2C,AMHJ,ACLzC,AE6FF,AN7GE,AwBkBA,AMZF,AGIE,AMwCA,AG7BsB,AEDD,AGbqB,ASO1C,AzHYA,AmImBF,A1D/C8B,AsEXyB,AjMnBzD,AeFA,AqLQMY,ChCmDJ,AhMxCA,AmDbE,C0FkCM,AuB6BA,ArFnBF,ASnBF,A0G2FA,AiBpCA,AhK9EA,AqB8CA,C3BlDA,A7CekD,CiHc9C,AnGnBR,AsGkCM,AENA,AK8DA,AyBlCE,AOxBF,A5IoBE,A2KhCF,AEuBA,AChBA,AQUI,AI+BJ,AzJhFE,AfeoC,AIf5C,AnBaU,AYAG,AuDRP,AhFGA,AoBNR,AHEE,AuCIQ,C1C+DM,AyBQA,A2DhDA,AHiGA,AmB7EA,AGXA,AiBiBA,AkBGA,A0BhCA,AEyBU,AafV,AjCAA,AwCDA,AE+DA,AC9FP,AlFuBO,AuFYA,ACmBA,AGhBA,ArKxCA,AvCQP,AmBQa,A+L3BNrC,C5EuDN,AOFI,AXdJ,AwBkBA,ASRA,ApDXM,A2EeN,AYsCR,AlKhFY,AlDMJ,AyE0CA,CsBlBS,AG0GR,AqCvE8F,AarB9F,AOFI,AXdJ,AwBkBA,ACRgF,AMDA,ACqCI,ACpCpF,AGsCqB,AvDjDf,A2EeN,AIQ8F,A7DZ7F,AkEpCD,AhKNE,AtBaT,AOE0C,AjCE5C,ADPS,CyKgCiF,AMDA,AWYlE,AYJV,AUmDV,AjLvFS,A9BI8C,AwEmCjD,AX5CE3C,AmKFA,ClNMZ,AuGiC6C,AuBWE,AMHJ,ArCMO,AuE3CD,ACiDA,AS1BL,AcRnB,AGsEzB,AExBA,ApKvEW,ARNX,AcMW,A1BJb,AHEE,CsB2EI,A2DhDA,AHiGA,AyC1FY,AjBPE,AsEyFN,ApH9DA,A9B1DE,C8CkCO,AlD6CD,AwDkDpB,AiDYA,AmBnG6F,AMDA,AuBQvE,AvHST,AkIrDsC,AKoC/C,AQtBmD,AjMnBzD,AEae,AuDRA,A2ICEmE,C/GyBC,AnGAd,AsGeY,ACD+B,AMyD/B,AQnEd,AIGA,AKkB+C,AMHJ,AkBczB,ArFnBF,AyFNyE,AhFb3E,AqFSd,ACGyF,AYTvF,AEuBA,AChBY,ACA8B,AmBsC5C,A1D/C8B,AzBD1B,AuFYoB,AQtB+B,A5LJX,AIb1C,AnBWgB,AmERJ,AlCCV,A1BJN,AHGI,AyMZG,CxHsCc,A4BInB,AIGA,AImBI,AEnBe,AuB6BA,ArFnBF,A8FVjB,AUVI,AIwBmB,AOoER,A7BlFX,A3IzBF,AIAW,A+BLL,C4EGU,AE8CQ,AUoFK,AMjGf,A5IoBE,AuL1Bd,AxHoBF,AuFpBwB,AwCDtB,AgBlBmD,A7KnBrC,AtBahB,AEbJ,A5BiBE,AmDXgB,AUEE,CoDuBC,AGeF,AMNb,AC8DkC,AQnEtC,AIGA,AsBsBI,AWlB6F,AhFbhF,AqFSjB,ACGiG,AeFhF,AjERM,AyEkBG,ACXC,AxHoBV,A+HrBU,AtDPG,AzBDT,A2FejB,AIzBmD,A3MNhC,AlBEE,AaHjB,AkNnBgB,CxG0DpB,AGXwB,ASL5B,AIGA,AYUE,ACoBkB,AMtBE,AGetB,Ad7BE,AwBkBA,ACRuF,AKJzF,ACGyF,AECvF,AI1B+C,ACiDA,AErC3B,AEyBE,AEDD,AYNrB,AecE,AGhBwB,AxKxCN,AlDMtB,CuH8BmB,ACWU,AkBxCgB,AI2BrC,AMUW,AOFI,ACFJ,AZZA,AhEgBb,AwFGF,ASRA,AMuCe,AvKlBE,A6GjCb,A2EgBJ,AeayB,ArKxDN,AhBWqB,AlCLzB,CqGsHf,AtFjGF,A+F4ByD,A9BXrC,AmHwEtB,A2BrGuD,AnMNrD,AOE0C,AIb1C,ArCgBM,AyBhBV,AHGI,AkD+CS,C1DrBT,A6GuEA,AQnEF,AIGA,Aa8BuB,AvCTqC,A2DjByC,AKJrG,ACGqG,A2BuChF,A3DtCX,AuBJN,A3IzBF,AWXA,AgDGW,A/DAX,A0MCqB,C7MiEnB,AyBQA,AwDmDJ,AgBpFE,AENyB,AkDE6D,AhFbxF,AsFYwF,AQyClE,AO3CpB,AQUoB,AOlBc,A3J3BxB,AhBWgC,AUjB9C,A3CiBM,AqFVF,AhFGA,A2NFsBC,C7MiEM,AgIvBP,AOFV,AXdU,AqBmCf,AGhBA,ASRA,AjKqBiB,AsLfO,AEFxB,AKhB6B,AvCOE,AjHlCnC,AHAuB,ApCQpB,C+BmEsC,A0EvC3C,AgB6BqG,AoBvB3E,ACF1B,A8CoC6D,AE1BwC,AvJlDrE,AiCCZ,AhFGE,C4FoIC,AnF7GvB,AsIqCyB,ASRvB,AhDD8C,AyFrB9C,AODA,AE+DA,ArLvFF,AWXA,AMJJ,A9Bc+B,AYV/B,AHGI,AkD+CQ,CyBwFmB,AnF7G3B,AuGc2C,ARcoB,A8EP1C,A7GMG,AlD1D5B,ASEI,AfGA,AUekB,C6H0CpB,A9Ed6B,AuHVuB,AxHoBzB,A+HrB8B,AEiEzD,AvIlDgB,C4EgBO,ArEpBO,A0HgC5B,AGjDkC,C9GGnB,AyBiBb,A+FSA,AOzCmD,AzKfnD,A3BFN,AOkBsB,ClBWlB,AqHIF,AIGA,Aa8BE,AyB9BF,A+BP4C,ASUxC,AQtBmD,AnMN9C,AWXP,AtCQF,AuBLE,CwE6Be,AyBiBgC,AYhBjD,AIGA,AmBQa,AmBRb,AM0CsC,AmCpBW,AlKxDK,C6D2BpB,AnGA1B,A6H0BJ,A5DTkB,AgG8BuE,AsB7BvE,AUmDlB,AM3DqD,AQtBF,A5KfnB,ArBJtC,ASEU,CqFsCJ,ASLJ,AIGA,AmBQqC,A7Caa,A9BXf,A8FVnC,AwBWM,AoBLF,AIzBmD,A5KflB,AlDMJ,A0BRnC,CwF6BI,AkBIF,AIGA,AImB8E,AUoF9E,AwBvGA,AkCiEA,AnLvGF,C8FwCyE,AkBgBxB,AMHJ,ArCM+B,AiFpB9B,AhHmB3B,A8H3BmB,AK8CpC,AQjCuE,A9K9CzE,ArBOW,C2EuIgB,AnBlFW,AyE5BN,AyExBf,CpByBoC,AoBzBZ,C/HsIE,AyD9F5B,CyBkCiB,AjKnEe,AOX/C,AHEE,CHmEI,AuIzBwC,A7CaM,A9BX5B,A3B5ClB,AlCSyC,AOX/C,C2E8HM,AyDpEA,AsBoB4C,AGE9C,ArI9EyB,AZFzB,AMJJ,A5CYE,CoB6DmE,A0FZc,A9BXrC,A6HjBR,AGqEhC,A3JhG0E,AJJhE,ACIgC,CmD+H9C,AtFpGE,A+I+B2G,A+C/BpF,AvK7BN,AMJrB,CoKyGgC,A/JvG5B,C0G8C+C,AjI5CnD,CAAA,C8FiDM,AmCLS,A7CayE,A9BXhE,AoGgCQ,AmCpB1B,AjL1DF,A2LIa,ClNyBK,AqKiDU,ArGtBM,A5D7C1B,AcOU,AgMdtB,CzG6CyF,AmCLlC,A7CaH,A9BXC,AuIY0B,C7L1D/E,CwE0I2B,ApCpIjB,CoCoIC,AGZL,AtFpHJ,AuBVwB,AZA1B,AoCMI,CoCoIsD,CGTf,ASxEoD,A9BXrC,A9B5CV,CyG0CjC,CAAL,A3EEc,A1ChDtB,C4D4IS,AlB5FH,CkB4FuD,AyD9FC,GPE3C,AJhBA,AwBmBf,ASRA,AjKqBiB,AwLjBjB,A9K7CN,C0H8C4C,AJhBA,AwBoBpC,ASTqB,AjKqBiB,AwLjBjB,A9K7C7B,EoFyDyG,CAAC,CpFzD1G,GoFyD+F,CAAgB,ApFzD/G,E0H8CqB,AJhBA,AwBmBf,ASRA,AjKqBiB,AwLjBjB,EpDCkD,AJhBA,AwBqBhD,ASViC,AjKqBiB,AwLjBjB,C1FYsD,CAA3C,O9FK7B,CoIhBkC,AJhBpC,AwBqBZ,ASViC,AuBIA,CxDftC,AhIgCiE,IwJX7D,ASViC,AuBIA,EhCM3B,ASViC,AuBIA,GxLiBxB,EoIhBiC,ApIgBwB,EkF4EA,AkD5FX,OpIgB9C,EAAoE,KkF4E5B,CAApD,CAAP,KlF5EuF;AIQzF,AoExEF,AOkCyC,AlD8CvC,AkBrFF,AmCkJG,AIlGkC,AEXnC,AQaI,A5CwEJ,AiCYA,AajGE,AGeA,ACF2E,ACF3E,ACQ+C,AGVjD,AC8DE,AWlCoH,AGzDtH,AE8CA,ACFwF,ACjBhF,AKc4E,ACLZ,ACqBtE,ACwEwD,AK9FhD,ACFR,AEmBF,ACMA,AjDXmH,AkDClH,ACFG,AjBzBH,AqBmCM,ArFnBF,AwFKG,ACZ+F,A9EYvG,AiFDA,ACaA,AEzBuG,ACqCa,A9F5BpH,A+FNM,AE4BN,ACQuD,AChEC,ACiDA,ACkBvD,ACtDD,AxKoCI,A0KZoC,ACpBtC,ACmBmE,ACInE,AChBA,ACDmF,AlEN7E,AoEwB+C,AKLjD,ACbN,ACQkD,AzHWR,A2HuBxC,AE3BoH,ACvB7D,A9DW1C,AuBHf,AwCDA,ACYA,AC0DA,ACrGA,ACsEyC,A1D/CkC,A2DevE,ArI7CN,AuI+BE,AtFEA,AuFSA,ACkBiD,AGfjD,A5KpCM,AQRN,ADIA,AJJE,ACGkD,AvBUnD,AcfD,ACuBD,AVvBC,AGuBD,ANtBmC,AKeU,AKnB7C,AKEyC,AOGnC,AuBoBF,AHAJ,AzCbC,A6CWG,AtDCA,AuDDA,A3EAC,AqFbA,AlCCA,ApDIJ,AcEE,ARHE,A+DLN,A7DEM,AiBgCJ,AQlBE,A9BXJ,AsE2CQ,ADDJ,AV3CH,AmKFD,ADbGxB,CtJqBiE,AHE1B,AIJM,AtDCoB,AuDDpB,C8DD9C,AqB0DA,AkD/DA,AvIQK,AHEA,AIJA,AtDCA,AuDDA,AoJnBJA,CjIuCgD,AwCoCsC,AyBjBhF,AhBrBA,AyBWA,AMDA,ACqCP,AIEe,AwB1BwE,A7DdhF,CxBGL,AgB0BF,AcAE,AWjBF,AhBrBA,AyBWA,AMDA,A6BaA,A3JrDE,AEAS,AkBID,AlEKZ,AqE0CI,AyJ7CEqC,CnHoDA,AuDIA,ArFlBA,AqG7BK,ACiDA,AuBrCP,CvGeiC,AlC0E7B,AiCYN,AmB9EiD,AsBZzC,AgByBJ,AhDTF,A9BXA,AwFUM,AIDJ,AOmBE,ACQoD,AChExD,ACiDA,AEpCF,A3DIQ,AkBUJ,AiEiEE,AOhD2C,ArL7CL,AkBRxC,A9CGA,CuFiGiB,A1BlCD,AwCRpB,A+CJyB,AWQnB,AoB3DgB,AgB0CQ,AIlB1B,AepBoB,A3KbnB,CiE+BG,AGeF,AOwDA,A+BxDI,ACFJ,A+BZA,AEuBA,AChBA,AQYI,AI6BJ,A5JxEA,AGRA,AnCYA,A2DwCA,AuJ3DC,C5M8EA,AyBQA,A2DhDA,AQaO,AWJP,AiBiBA,AqBAO,AtEJP,AkFYA,A3FhBA,AqHXA,AjCAA,AwCDA,ACYA,AILO,AEdP,AtFEA,AuFSA,AIGA,ApK5CA,ADIA,AnBUqC,AJPrC,A7BWE,ADRF,AQJO,AyBcP,A+L3BCpC,C5J2HE,AmD1EF,A8B0BA,A4BzBI,AjKqBJ,AiM1DA,AzI6CA,CqBuDa,A1BlCD,AwCRpB,AYtBS,AmB/BA,AWyDA,AKRgB,AuBjBZ,AQlCS,AzKuDb,A6GhCI,A4EmBiB,AmBtCN,A3KbtB,ARFF,ATAA,APwCA,A+CaS,CuFkBC,AoBEE,AmBpBE,AW7CJ,AhKNA,AfcsD,AiBd7C,AlBoBjB,C4DsFmB,A1BlCD,AwCRpB,AKpBI,A5CwES,AiCYb,AqCrHW,AUoC6D,AMa/C,A+BnDH,AeqC4B,ACKpB,A1HMY,A2HuB/B,AkBnEa,AtKbb,ADIA,ApDcP,AqFbO,CkB0BX,AUAc,A+DYE,ApDXA,A2EcmC,AlCRvC,AxI/BZ,AkMdC,C1HiDkC,AyD2BtB,AoBEE,AmBpBE,AnJnDK,ArCYT,AmBQA,AwCgCA,AuJ3DCC,CnIiHO,A1BlCD,AwCRpB,AKpBkB,A8BNA,AYsBO,AEhBX,AGyBA,AShBI,AY0ByC,AKtErC,Aa0ChB,AGAwB,AC6BhB,AkBnEU,A3NKR,AmDZF,AtCMA,AXHhB,AsE2CgB,CyCrBG,AGeF,AOwDA,AkBhEI,A0BeA,AxJWX,A2KhCO,AEuBA,AChBA,AYyCb,AG/CG,AG0EY,A5JrGF,ApDIf,C6CqEgB,AwDiDhB,AsDlFoB,AsBHd,AOfN,AqBKI,AvCKY,AxH9BA,AbYd,C4DsFmB,A1BlCD,AwCRpB,A+CJyB,ACdJ,ACFiB,AKalC,AIWE,AoB3DgB,AgB0CQ,A1HMkB,AuFnBzC,AsDzBiB,A9KLP,AILmC,A/CMtD,A8NHqB,C3HoCgB,AeIP,AEJ1B,AK4DgB,AyBlChB,ASLF,AGLA,A0B1BkB,AEuBA,AChBU,AUO6B,AzHWR,A8HxBzC,AG2EN,A3IxGJ,AG+CI,CqBuDmB,AhD3BF,AsBPC,AwCRpB,AYrBI,AuBLI,AO+BJ,AKTqB,AcPjB,AiB5Cc,ADmBtB,AxKoCoB,AyLbU,AUP1B,AS/BoB,A3KbL,AjBFnB,AyCsDa,ADDM,CgDD8B,AsBZzB,AgByBJ,AUVI,AY0BkC,AvD/ClC,AyCOpB,A6CK0B,AIemB,AtK3D7B,AjBFE,AoBQlB,AtCMS,ARHO,AmE2Cd,AwJ9CgBqB,ADbrB,C5J2Ha,AiCYd,AsDlFU,ACFR,A4BhBF,A6BEW,AvKtBL,AMFe,AtCMnB,ARHmB,CuFiGA,A1BlCD,AwCRpB,ANgEA,AgBlFE,AqCcuB,ACdC,AyBiCuC,AKtE3C,AK8BpB,AWY4B,AmBtCN,A9KLF,AjBTY,AeFM,AnByCxC,C6EImC,AiBC3B,AK2DN,Ac3FS,AW0DH,A8BEiB,AQvCvB,AEuBA,AhErBU,A2EYkD,AzDJlD,AjI9BW,AW2Bb,AuM9Cc,C5M8EA,AkF7BW,ADsFnC,A0D3DwB,AoBEE,A/HjEtB,A9CGgB,AEHhB,CgH4C6C,AsBZzC,A9H0B0B,AuMLe,AjNlD7C,AEH4B,C8FoCG,AqBFpB,AiBiBA,AiCQA,A3FhBA,AlEeoB,AuL1BpB,AODA,ACYA,AhFjBA,AuFSA,AIGA,CtM2BY,AuIzBjB,AMWN,AlFAsC,AjCjDf,AILmC,C6GkElC,AhFZ+B,A8HxBvD,A/JzBwB,AGRlB,ACGqD,A+KGjC,ClE+DjB,AEVb,AuCboE,AWFhE,ArKpCyB,AGRA,ARF7B,ATAA,A7BWF,A8NHiCC,CzG4CkB,A2DqBjD,A0BtCkB,AU0B+B,A9K7D3B,AUEiB,A3CMnC,CqFoGiB,A1BlCD,AwCRpB,AvCoDa,AoDlEoC,AkCUxB,A/DPT,A8F5CM,AgB0CQ,AUPgC,AEdlD,AE6BqC,AK9CzB,A9KLG,AdV+B,AEgBgB,A8LrBzE,CnIiHoB,A1BlCD,AwCRpB,AOjCkC,AwC6BT,AkBRV,Aa3CO,AeqCiD,ACKzC,AnCZ1B,AsD1BoB,A9KLlB,AKRD,A3CMqC,CqCyET,AuBqCU,A8CrFR,AMmBc,AuCmBhB,AyCvBuC,AzDJ3D,AwEiBoC,AjK3D1C,ADIA,AxBL2B,CgBgFA,AkHVrB,AlCnCU,AvElCE,ADIA,AnBUmB,ATwB5C,CT0BoB,A6G9BI,A7FpCxB,AHCkC,A5BmB9B,C0HsBY,AiBiBA,AqBAZ,AYQY,A3FhBA,AqHXA,AODA,ACYA,AMnBL,AtFEK,AuFSA,AIGA,AxKzCoC,AzBqC1C,CsI6B2B,A/HvEwE,CiI8D7G,AlFH0C,AsI3BtB,AnK3BgC,ClC6DJ,A+DPN,AgEf9B,AtG5CZ,CoD4GqB,A1BlCD,AwCRpB,A+CJyB,A+BnDH,AzKuDd,A6G9Be,A4EiBO,AmBtCN,C1GkBU,A6BWb,A9F1CQ,ARFuC,AZClC,CgE2Gb,A1BlCD,AwCRpB,AOjCE,ASSa,AiBiBA,AcGU,AOHrB,AYQW,A3FhBA,AuGxCO,A5DyBS,A0EIhB,ACQkE,ACKnD,AKdf,ACYA,AhFjBA,AuFSA,AIGA,AE/BS,AhLhBgB,CCkFP,A2JjCiD,AyBxC5D,CpLyEN,A8EvCQ,AiBiBA,AqBGD,AYKC,A3FhBA,AlEe6B,AuL1B7B,AODA,ACYA,AhFjBA,AuFSA,AIGA,ApK5CC,ADIC,ATPc,AqLSM,ClE+DjC,AtHvEb,CoD4GmC,A1BlCkB,AwCRoB,A+CJb,AkBRxD,Aa3CgC,AgB0CQ,AOyD/B,AY/FmF,C/KkEjD,A2H1BV,AIDrC,A/ClBuB,ApFpCgG,AhBwCvH,CsI+BgD,A/ILS,AwLlBwB,CpLyBhC,AuElB1C,AiFDyB,A/ClBM,ApGO5B,CL8BwC,AgIxB0C,ApIiBhC,A6G9BrC,A2EYkE,A5JjDjD,C+CwDd,AkCrBF,AkBUZ,ClGqCZ,CkGrC+B,CpBFhB,AiBiBA,AiCQA,A3FhBA,AqHXA,AODA,ACYA,AhFjBA,AuFSA,AIGA,ApK5CU,ADIA,CwEkCX,A2EQgF,C7EN5D,AiBiBA,AiCQA,A3FhBA,AlEewC,AuL1BxC,AODA,ACYA,AhFjBA,AuFSA,AIGA,ApK5CC,ADIC,CmHiDZ,AxJWmD,AwLlBM,CzCuBjF,AShBgD,AgCPS,CAAP,CQ8DhD,CzFjEE,A8B0BA,A1DhBG,C4BTD,A6BGkE,ACsB7C,A1DhB3B,AsI/CsB,CzD+CE,A3CfF,AoGhCxB,C7EyC4G,AoBMlG,AgCP+F,CQ8DvE,ChM5C5B,A6G1BqB,CzGiCwB,AKjCjD,CLiCwB,AJP8D,CSvBf,CoGH1D,AmFsEX,C5LrCqE,CmG5BnE,A8B0BA,AxB/B4B,ENO1B,A6BEkE,ACsBjC,AmDvB0E,AQ8DxE,C5D7D+B,AoDD0C,E3Ed1F,CAAhB,C2Ec+F,CAAgB,EQ8DrH,EzF/DK,A8BwBiC,CmDvB+D,AQ8DnD,CR9DF,GjFD5C,A8BwBiC,E9BxB3B,A8BwBiC,IjIE7C;AACD,AH1ED,AkEDA,AU6GuB,AExErB,AlD8CD,AmDlFD,ACFA,AEyUM,AG3R+B,ACoC/B,AC9CL,ArCwCqB,AwCRpB,AKpBsB,ACUtB,A7C8DgD,AiCYhD,AahGE,ACnCJ,ApGmBY,AsG+BR,AEFe,ACKgC,ACrDnD,ACAA,AC6CI,AC6DA,AO1GJ,AEWM,AE6DL,AG1DkB,AE+Cf,AEnBK,AI0BH,AElBiH,ACuB/G,AIvBF,ACaqB,ACbf,ACFR,AEoBA,ACKF,AjDVC,AkDAF,ACEC,AE/DF,ACFA,ApBoCC,AqBoCS,ArC3DJ,AuCXN,AvFmDG,AwFIM,ACZR,AC7CD,A/EyDC,AFrBC,ACuCI,AkFnBF,ACcA,AE1BH,A7FSG,AwBpDJ,AuE8CQ,AGmCgE,AC/DrE,ACiDA,AGxDqB,AzKwDhB,A2KhCJ,AEuBA,AChBA,AjECM,AqE1CV,ACyHE,ACpCI,AEhCE,ACbJ,ACO2H,ACK/F,A1HMwC,A2HyBpE,AE5BH,ACrBwB,A9DUjB,AuBJI,AwCDR,ACYA,AC0DoD,ACxGH,AEwCrB,ACwC9B,ACtDyB,AtFGvB,AuFSA,ACiB+C,AC5DnD,ACDA,AC+CI,AChDJ,ACgB0B,AtKZtB,ADIA,AJJE,ACEqE,AWN3E,ApBCE,ATAA,AEgB6E,AIfvD,AnBcpB,ASHQ,AvBAA,AyBFX,A7BWK,AiEnBA,AoBKS,AlCEV,ApDIJ,AcEK,AmERA,ArE2DJ,ANtDG,AoBRK,AHCY,AfIpB,AKLF,AYqCY,AQlBT,AXdH,AbVA,ANqCE,AsEmBM,ADDF,AyJ7CN,ADbGrB,CfUI,ClH8BL,AiIxCCA,ClHsDM,A9BVA,AqGzBP,ACiDA,CzF4CqB,AShEc,AnC8Bf,AwCRpB,ANgEA,AtFhHU,AyGkCuC,AkCUxB,AEfvB,A9CGF,A9BVA,AEYE,AuGzCoB,AK+BpB,AQYI,AGDwB,AOyDwB,AOjDL,AK9CzB,AtLdF,AZGd,AHCY,ADItB,A2MAMmC,CnF2BA,AMae,AoBGf,AgCJA,AzHWa,AzElDf,C0GqCoB,ACUlB,AmCPF,AaeI,AIOE,A5EpCF,AwFWA,ApDHE,AsE+EJ,AK3EF,AWD4B,ACwC1B,A5IhCA,CsEZE,A0BeA,AzFEkE,CciDnD,A1BlCD,A+CxCZ,AGeF,AMLA,AC6DA,AgB7CA,AeXI,AkBoBJ,AY1DgB,AzKwDhB,A2KhCA,AEuBA,AUjBA,AG2CA,A3DvCI,AgEOJ,AC0DoD,AMlEpD,AIGA,ApK5CE,ADIF,AZPN,ATAA,AbeM,ASHI,AvBAA,AiFLG,A7DkCH,AgDcJ,CoBqDe,AM2NP,AIvPA,ApCNM,ApDxDV,AsHRI,AayDA,AOlBA,AMuBP,A/B5DO,AtC8DA,A+F/DQ,AW2ER,A9JrFQ,APaT,A9BOJ,AiEnBK,AeKA,ArE2DP,Ac9DC,AHCY,AfIb,AwNbC,CjNsBE,AsIsDE,AKVa,AEfjB,A1EKA,A+FNE,AaJF,AQYI,AGDkB,AOyD8B,A/J3GlD,AXFY,AZGd,AHCY,AiDiDZ,AwJ1DClC,CnIgHY,A1BlCD,AwCRpB,AMVS,A7C8DuC,AiCYhD,AqCrHiB,AgBiDQ,AEfhB,AEoBA,AcZA,A1FHA,AkG6B6D,AKtEhD,AK+Bb,AQYI,AGDiB,AnCZpB,A8C6CV,ACtD0B,AOjBF,AtKZb,AJEgB,A5COlB,AgBHX,AnB2BE,C0FwEqB,A1BlCD,AwCRpB,A8EvDsB,A1GgDL,AgEdH,A6E9BU,A1KVZ,AoCEK,Ad+CP,C8BVyB,AUEb,AOCL,A8ByBF,AKVU,AmBOd,AIvBE,AwBOiB,A1HM5B,A8HxBuB,AEiBd,AtKpDX,ATAA,ADca,AjBCF,AkNnBV,CzHoFG,AIdJ,ANgEA,AahGc,ASUF,A+BkBa,A6CrBb,AEYkB,AiBN5B,AEhCsB,AtKZV,AgCIK,AhEErB,A0Mbe,CnIgHQ,A1BlCD,AwCRpB,AMVa,AZ0Eb,AgCxHI,AKGiB,AuBmDN,AwBrDO,AI+CpB,AO4BE,ArDzCa,AoECa,AS/BN,A7LDX,A9BOT,CqGuB+B,AUEb,ACUtB,A2BIc,ASYI,AgBDA,AQFJ,AhD1BI,AuE2CM,ArDzClB,AgEOQ,A1J7CZ,AZNA,ATAA,AbcA,ASHgB,AvBAA,AqBRV,AHCY,C4EkUhB,AIvPe,AW9CF,ASUU,A+BkBF,AWSN,A3EGf,A6GjCW,AEYe,AMD5B,C5GoRF,AQtQA,AKpBsB,ACUN,AoB9CI,AayDhB,AOlBA,AEAgB,AMeF,AvEWlB,AuF7BM,AjKqBU,A0LiBA,AGjDc,AepBN,AtKZN,AnCYF,AYDH,A9BOK,AwEkCF,CsBnBC,A6CwBA,AElBX,AI0BN,AOnBkC,AEAb,AaQf,A/EtBa,AnDlCG,AVWC,AvBAA,ASGN,AYXU,AHCP,AEoCV,AgDcO,C1DrCP,AyGkCuC,AoCL/C,AiBsBA,A3FjBA,AyGjBA,AGOA,AjECoB,AyEWhB,AaRwB,AIemB,AtK1D7B,AnCYF,CiFqBC,A3BkFuC,AuD1ExD,AC6DA,AgCzDE,AEmBM,AOIF,AnFlBJ,AlEce,A8KxBf,AQYI,AI6BW,AGjDc,ASSd,AvL9BN,AuDPF,ClB+GgD,A6FtDrC,AIOE,A5EpCF,A8GMpB,A9JxCA,ATAA,AMAoB,A1BiEF,A4DZT,AyJ7CW,C/GyBC,AnGhBb,AyGkCuC,A8CXvC,AiDoBuC,AtK1DR,ARFvC,ATAA,ADaW,AnBoDQ,Ac9Db,AvBgCR,C0FwEqB,A1BlCD,AyEdlB,AaXE,AgCtCkB,AU+GA,AaZ8B,AjF3E3C,AuFSyB,ACiBe,AtNxC7C,AaNO,AW0BD,AHhCZ,AnB2BsB,C0FwEC,A1BlCD,AyF1BZ,A5BpCJ,AtC8DA,ARrBI,AuG1Cc,AzKwDhB,A8KxBE,AM2CJ,AE/BQ,AQfA,AKMkB,ArM/BP,AmERnB,A1DFgB,A0MIKmB,C/GyBC,AGeF,AEFM,AkCEmB,ACaxB,AWSjB,ArC3D6B,AyEyCP,AC+B5B,AStC4B,ApLhCjB,AmCZT,AeKiC,ArE2DjB,CiF0CC,A1BlCD,AwCRpB,AvCoDgD,AmDvEjB,ACKkB,A6BoBpB,AKVJ,ACbf,AGkBD,AGHkB,AvEY3B,A+FjEsB,AW2EyE,AKjCjE,AmBtCN,AnLdtB,ATAA,AkCC8B,AtDgEhC,AJzDyB,AgE6Cf,CqBsDW,A1BlCD,AwCRpB,AvCoDiE,A2F9ClD,A0B7DO,AU+GI,AgB5EI,AGFQ,AM7Bd,A3KZ8B,ARFpD,ATAA,AiDME,AzEEsB,C6GwCyB,AqCa1B,AIKM,A2CdD,AxJlDyB,AxBsC7C,A+CaM,CmCYhB,A0CMgC,AKVP,A7BnBO,A4EUF,AmBtCN,A3IRwC,AxDkCtD,AHhCZ,AmD8CQ,CkCWN,AYnBiB,AmBlCA,Ab8BgB,AgFRT,AepBA,AtLdF,A4BClB,A1DOqB,C+GsCW,ASnChC,AvFXF,ATAA,APwCQ,AHhCZ,CPSY,AsG+BR,AqBpCe,AmEsB6B,ACK5C,A5ItCyC,A1DOZ,AyNAE,ADbhC,C/DoED,AjCpD+F,AvCuBzE,AsCApB,AtFlCM,ATAA,A3BW8B,A4NHJC,CrD8ChB,A/CZI,AsE+EW,AWlFX,A/K1BT,AHF0B,AvBAD,ASGgB,C+G4BhB,AERjB,AhGrBR,AHF0B,C0EgCJ,AiBGlB,A6DkC+D,C7DlC/D,AkCEb,AMuBY,AhCrCd,C5BoSE,AhGnSJ,CiEkF6E,A8EnDzE,AOlB6D,A1BdjC,C5BsShC,AkDjQ2C,ArB5DvC,AtC8DA,A0FOgF,AvDtC9D,A1HP0B,CiEkFA,A8EjDhD,AGG4C,AxB7BpC,ArHlCiB,C4D6GuB,A4D1G8E,AtCiE9H,AmH1CuB,ApKlCrB,ATAA,A3BWQ,C0J4DK,A+ChCb,AQIgC,AhKzCpB,AvBWD,AHFH,ApBHgC,CsM+BV,ArKvCb,ATAA,C+HuEK,AhCrCtB,AuFSA,AhKzCA,AvBWW,CmFoBuB,AmCsCO,AuBjBzB,A9JxCK,CuIyDM,AtBrCW,AkG1Bf,CnB+BW,ArKvClC,ATAA,AlBc+E,ANNxD,AyNAwB,C9H8T7C,ApEzTgB,AvBLpB,C6I+DqD,ApGrEC,CkDuUtD,AlDvUyC,CiE+Bf,AxBwCtB,AyGgDsB,CjFxFH,AjE/BnB,ARFoB,ATAA,C0D4EK,C2DLvB,AUAS,C7CtC+B,AkE+CkC,ArD9C9E,CgCqCgC,AoCkDsB,ApEvFN,AtFnClD,ATAA,CmEuUI,A+CpQA,AkCckE,EjF0PtE,A+CtQmC,AkCY+D,ExBjC9F,A1EKA,A4GVA,AQYI,C1CNF,A1EKA,A4GXqB,AQYI,EHmE/B,CfzCsE,CAAA,AeyCJ,ApEvFhE,CbDA,C+GzBuB,CAA3B,GrEuCM,A1EKA,A4GVA,AQYI,E1CLF,A1EKA,A4GZiC,AQYI,UnGgRvC,AyDrRG,A1EKA,A4GZiC,AQYI,CQfZ,C3GoShC,A2GpSuD,GlDUjD,A1EKA,A4GZiC,AQYI,E1CL/B,A1EKA,A4GZiC,AQYI,InGgR7C,C2G/R4B,C3GoSP,C2GpS0C,YAAA;AtHtCrE,AOgCmD,AhCnCnD,AmCiJE,AIpG4E,ACoCxD,AUtBlB,A7C4D8E,AiCYtD,Aa/FxB,AnGFA,AsGiBA,ACHF,ACA0C,ACK6C,AGJrF,AC2DA,AQrEF,AC5B2B,AG+B3B,AE5BuC,AEgDrC,ACHF,ACfQ,AKYR,ADgBA,AErBC,AEiGD,AGjGA,AEAS,ACCD,AEiBJ,ACKF,AjDVH,AmDEC,AIOQ,ArC3DR,AhDwCD,AwFKS,A/EnBN,ACsCF,AkFtBwB,ACgBtB,AC9BF,AEwCA,A9F1BiB,A+FRX,AE2BN,ACOyG,AC9D1G,ACiDA,ACiBC,AvKjBM,A0KbN,ACnBE,ACkBF,AEVM,ACHN,AlEGO,AoEgBP,AE+DE,ACpCF,AE3BU,ACjBR,ACOD,AzHUA,A8HzBwD,A9DWnD,AuBLS,AwCD0D,ACavE,ACyDgG,AE/BlG,A1D/CA,A2Dc8B,ArI5ChC,AuI8B8B,AtFI3B,AuFUC,ACe2E,AGb3E,AI3BF,AhLPM,AQVJ,ADQA,AHNS,AvBoBJ,Ae5BA,APAA,ANUP,ASNsB,ACLxB,AK2BE,AzBRI,AYFS,AHDX,AvBAA,AJSC,AiEnBH,AoBI0B,AlCGzB,AtCMK,AmERJ,ArE2DH,ANrDK,AoBTI,AlBKT,AiB+BW,AHhCoB,AnB2BV,AsEoBf,ADDC,AV5CP,AmKAD,ADdC,CjIqCD,CuDiHE,A3HzHO,Ae5BA,APAA,CiCwHP,AgFtEO,AgCiCP,AoBrCO,AzHcA,AuFlBA,AvCNA,A9HpBL,AmDVmB,C8D+BnB,AnGFA,A6G0EA,AwB3DF,A+C2EE,AK/EF,AzHcA,AgEZM,AgEOJ,ACyDgG,AGhEpE,ApFZ9B,AuFYE,AhK1CA,ADQA,AfVoB,AZGd,AuMMJe,C1GkCA,AMjBA,AgFCF,AzJnBC,CmDsEiB,A8BtEO,Ac6CrB,ADgBF,AOrBA,AYsBI,AGdA,A9EmBR,AsFII,AClCE,AE2BF,AIWE,AK/BF,AEVE,AxBFF,A4CqCJ,AG/C4B,AlMhBxB,AYFS,AN2BH,C8FOJ,AiElBN,A3DiBM,AgFXF,AvJhCC,AmBgDsC,C4CFrC,AMFA,AiBaA,AnDtBA,AkGHA,AYOE,AmBKF,ApK5CA,A3BsBC,A2DnBmB,AdgDpB,C0ByFC,AnF/GD,AuGcC,AcTA,AIGA,AKiBA,AoBOA,AjCpDA,A8C4BA,AYcA,AKdA,AEmBA,AG2BA,AYuBgG,AxD9EhG,AsEXA,A5KlBG,AvBuBH,AWxBe,ACLxB,A2BMS,AeKE,AvDHD,AvB+BY,CoG4CA,AW7CZ,AnGFD,AsHvBoB,ASiCf,AcQA,A0CSI,AvDdJ,AgEOJ,A7JnDA,AZAc,APYT,AqBVQ,A1BCb,AuMME,ChH+CD,ACvBA,A4BQI,AWOJ,AGCI,AGsBX,AcFO,AWzCT,AzCgBa,AgEOJ,ACyD8F,AK9EtE,A/J5B/B,AzBIF,AegBA,AbVa,AHDJ,AvBAA,A+CTT,CwEuGU,A0BwCA,A6BzEA,ASpBV,AsByBA,ApKjEU,AQTN,A1BQM,AvBAA,AiFNoB,AxESpB,ARFA,C4FkIC,AKhES,A8BtEO,AyB0DvB,AcboB,A1FAP,A+FRJ,AOjBb,AqBDE,ACWuE,AKM3C,AEdG,AvKlBtB,A3BEA,AYFE,AHDH,AvBAA,AyDFC,AmKAE,C9E4CC,AMLF,A8BmCE,AG9BF,AIXE,AK+EF,AmB7EA,AjKlCA,AfVU,APYT,AuDPmB,AdgDpB,C+ByBQ,AxF/ClB,A6G0EW,ASjGc,AiById,AGjGb,AoDdY,ASUC,AjKlCA,AlBdN,A7BgBH,C+J0Dc,AGdA,A9EmBlB,A8F/CA,AwBgFoD,AGhEtB,AhLhDvB,AhBkBO,CyH6CC,AONE,AMLF,AYsBI,AGdA,ASXF,AE2BF,AIWE,AOzCA,AK+EF,Ae5Cf,A5K7EsB,APYT,AN2BH,A+CcK,CzDtBA,AsGiBC,A5BXA,A0FmChB,AOnBgB,ASoED,AkB3FW,ASXhB,AzKTR,A1BcK,C4FsBD,AuBLE,AcQA,AEiBE,AGHF,AuBnCR,AEyBO,A4BTL,AjKjCE,A1BaG,ADrBC,CwF8BN,A0B0B0B,AkBOjB,AqBMO,AgBiDH,AG/DW,AvDdpB,AgEOJ,AOPgB,A7LLR,CyFNS,AGeA,AOyDA,AkBhEI,AcQA,AYOf,A9EmBR,A8F/CA,AMcM,A/CGE,AgEOJ,AzJjDS,AhBHS,AVWJ,AvBAA,CuH8FE,A4CjDI,A/EnBJ,AqFER,AYeR,AabkB,AWoCtB,A5J1Ec,AzBGd,AHHoB,A8CkDd,CyCGJ,AiCaF,AzDhCqB,APgBM,AiHoEZ,AG/Dc,AQpBsD,AIuCnF,AY1DO,AhLPc,AjBNC,AUXxB,A0CWe,ClEyBQ,AyHQR,AIoBX,AkBOE,A5EbwB,AsGzB5B,AqBDE,ACWkF,AgBnB1E,AhLPY,A3BEA,AGPQ,AnB2BV,CwHYG,AuBuBA,AI4EA,AQ/EP,AGHT,AIOC,ArCxDN,AH+BsB,A0EJC,AMPH,A9DWV,AuBLA,AyCYJ,AGyBR,AQ/BE,AhLlDK,APAA,AhBkBgB,CkGkCrB,A3B2BF,AiGzCwB,AjJtCjB,APAA,AJgBM,AHDK,AvBAA,CUqBZ,AuGaO,A2CkBkB,AvEY/B,AoFpCO,A5FcU,A+FRU,AqBaM,A3KlC1B,AIZM,ALTL,AvB+BY,CwHY4B,AkBUjC,A+BHS,AEdZ,A5FcoB,A+FRJ,AgBab,AG2BA,A5CvDA,A2Dce,A9JjCjB,A5B4BH,C+GAH,A/CFoB,ACsC3B,AiGzC2B,AIKb,AlEOL,AyEYC,ACjBmB,AuBtBnB,AzKRI,AtBCD,CyG2BA,Ac0GU,A7D5GK,AqIlBrB,AhLPD,AQTF,A3BqBJ,AIZa,AHDH,AvBAA,C6GsBR,AUwEW,AtEtGU,AnBPhB,AS0BP,AtBf8B,CqGuC5B,AC4DE,AqD7Da,A6BPwD,AgBnB/D,AhLPoB,AjBN9B,AegBY,CkIiBA,AGMqB,AOjBjC,A8BgB+B,ArItClB,A3DCiB,CgI0IjB,AwB1GN,AEwCQ,AClCmB,AOjBlC,AE0BI,ACpBF,AmBIuE,AQMzC,AnLhDhC,ANU2D,ADKjD,AvBAA,A4NFaJ,C/HqIhB,AsCvGM,AWcU,AWaG,AmBrBO,A4BlB/B,AvCaW,A5H5CN,CwDkJwB,A0BpCvB,AYnED,AsB2BoB,ArE7BrB,AqFEM,ApI3CL,C3BoCsC,AkJ+BtC,A/EVkC,A+FRJ,A5HlCjC,AaVc,AeKL,CmD8BO,AIGP,AKiBG,AMHC,AG4FJ,ApE5F6B,A+GK1B,AG2BA,A5CvDA,AnGnBO,AxBLvB,CyFuCa,A2CkB6C,AhFzDzC,A3DCa,A2MEjB,C9E4Ce,A1DhBU,A9DbtB,AElB8F,C4D+BvE,AoCS9B,AsE2EwB,A7BjFrB,A5H5CL,AwBKe,A+JQQ,ClNuBxB,AiK+CF,AClC6B,AOjBjC,AW6FkC,AvK9GhB,AvBAA,A6DVK,A/DiCH,CiIEb,A4C2CP,AClCiB,AXLI,AhHrCE,CvC6B8B,AqHIjC,ASoBL,AoCXT,AOjBN,AS8Be,AG2BA,A5CvDA,A9GlCf,APAa,C6ImFa,AOIE,A5J3D5B,CuEsHgC,A2CtFR,AiBUI,A5EbI,A+GKR,AG2BA,A5CvDA,A8DcN,AnM9Bd,A+CbkB,C4FiEK,ACOvB,AtEpCF,AoFiCE,A3FjB+C,AvD7BxB,ACbT,AvBAA,A6DVX,CoFgJgB,AtBtIhB,AwDiBsC,A8BgB3C,AWnCW,C7F2BO,AeiBH,AWac,AUVM,A/EnBU,C2CDxC,AeiBP,AWa2B,A9BlDzB,A3ELqB,AlBfvB,A8LauCK,CrLavC,AsBrBgC,CkEmCZ,A0B8BY,AqCuDjB,AxKjGf,AQ5BsC,APepB,AvBAA,CiJsIK,AS1ErB,AcFO,AkB9Bc,AzBCX,A1HlBuE,AhBXzE,AvBAA,CsBakC,Ae5B/B,AuLaA,ClEiET,AcHA,AP/B2B,ApGvCK,A+JSrC,C/HoIgC,A2CtFhB,AoDEA,AG2BA,A5CvDA,A5HnBG,AvBAA,A6DVmB,EgC6IK,A2CtFR,ASyFX,A2CvFW,AE+DU,ACpCV,A5CvDA,AsEXxB,CxE8HG,ApE5FsC,A6GdrC,A7HtCkB,C4JkBtB,ApLvBV,CqJ2C+B,AnK5Bb,AvBAA,A6DVX,CoFgJM,AwB1GD,AqBkFG,A2BtGL,ApLvB4B,AE0BtC,AhBXU,AvBAA,CmK6Cc,AzBXhB,AgEOJ,CvEbS,AsCAD,AS4CK,AxCtCc,AgEOJ,AnK9BoF,AsBrBlE,C6FsE3C,ASfM,AKaC,AjJ1DC,AvBAA,CmI4BG,AsCAD,AqBkFgC,CpC9CxC,AcHA,A0B/BqB,C/DFZ,A+C4CsC,AYsCP,AI/ExC,ERHU,CAAP,CzC0GM,AyC1Gb,CIkF4C,AvK9G1B,AvBAA,A6DVlB,C0DyGI,AmCnCF,A/BvDS,Ae6BH,AgEOJ,AnLzCgB,AvBAA,CuH+FO,A0BuCA,CSrEvB,AhB/BuC,AgEOJ,ClCoBlC,CzCpCe,A+DqFwB,AIhFnB,CJgFV,C/DrFK,AmEOhB,CuBxBU,C1FiBM,AyCoChB,AsBiDwC,EnEzGhC,A6CwDA,AsBiDG,A9L9GL,A4NDE,CrGgGR,AkDnEY,AlJ5BN,CmI4DR,AhB1B0C,AgEOJ,CnFsDD,AYnEtB,A+C4CA,AYsC+B,CpC1C5C,AkErEL,C3EuIC,AuBzEI,AxK7D8B,A4NFrB,C1C0E4D,A3JxEtC,CoGKxB,A6CwDM,A9B3B0B,AgEOJ,AkBzCxC,C1BgCK,AuBxBM,C9FHS,Ae6B8B,AgEOJ,AejCnC,CAAH,C3BsGL,A2BtGF,ClGuFI,CmCnCF,AehCU,ClDmEsC,AkDnEtC,CtCAC,AuB2CT,Ae3CG,AS4CP,AlLxES,CmI4BI,AsCAb,C1CHwB,AIGjB,A5G5BE,AvBAoC,CmI4B7C,CuBgCE,AnI5D6C,EmIwE3C,C1JxEK,CuH+FL,AvH/FyC,CuBApC,CgG+FoD,AhG/Fd,GvBAF,C+HyBzB,A/HzBX,C+HyBW,A2BmClB,AnI5D6C,CwGyBxC,A2BmCL,AnI5DO,AvBAoC,C+HyB7C,CxGzB+C,EgG+Fe,GAAD,EAAI,iBvH/FpB,EuBAE,AvBAF,EuBAE,AvBAF,EuBAE,iBvBAE,EuBAE,EvBAN,CAAA,CuBAE,AvBAtC,CuBAsC,AvBA7C,CuBAO,CAAP;ARmEJ,AHvEA,AkETA,AtCoFA,AmDnFA,ACFA,ACkJI,AetFD,ACvBC,ACpCJ,ApGmCU,AuGYW,ACEX,AEjDV,ACAA,AE6GQ,AO7GR,ACuCC,AIGA,AE9B8C,AEmD3C,ACJA,ACfQ,AKYV,ADiBE,AEtBH,ACsBO,AC4EN,AGlGE,AEAK,ACCG,AEgB2B,ACkBlC,AEpBD,AEGE,AC0EA,ACtEG,ArCvDiB,AuC+CpB,ACNI,AE3CJ,AjFwBA,ACqCJ,AkFtBuC,ACmBjB,AChCvB,AE2CG,A9F9BuD,AwBqBrD,AuE5BE,AE2BJ,ACOH,AGMC,AC1DA,AxKuCK,A0KbK,ACnBR,AEuBA,ACfI,ACHP,AlEOW,AoEaR,ACmEE,ACLF,ACpCA,AG1CI,ACKP,AzHUA,A2H2BG,AGlDA,A9DaQ,AuBJJ,AwCPwF,ACexF,ACuDmG,AE/BzG,A1D9CE,A2Da4D,ACyC9D,ACvDmC,AtFKpC,AyFnCD,ACDA,AEDA,AGsBC,AhLPS,AQTF,ADSA,AJXF,ACIG,AWRT,AlC0B6B,Ac1BL,ACDpB,AVCoB,AGDpB,ANSF,AKQA,AKpBF,AK4Bc,AzBPR,ASHH,AvBAA,AyBCI,A7BOF,AiElBJ,AoBGY,AlCIX,AObM,A7CmBE,AmETa,A3EOlB,AoBTK,AHCP,A8CDH,AxDMA,AY6BkC,AQWzB,AxBpDT,ANsBS,AsEmCH,ADDE,AV5CJ,AmKEH,CvFFD,AnGhBA,AtCgB4D,AoEN5D,C+IiFE,A7K3FkC,AtCgB7B,AmDDL,AnByCO,C8HoBA,AnIhEyC,AvBAF,CYChD,A8I+DE,ArEKA,A8F/CA,AW8FE,AaduG,AE/BzG,AzK/EsB,ATAA,AFeX,AJTH,AbMV,C8IgCM,AUoBA,AOTK,AkCfuB,CvFSxB,AK4DF,AyC9CJ,AGJM,A/EnBJ,AwFQE,AaHA,AjEII,A0EHJ,Acd6B,AhKjB7B,AJXF,A9BaA,AsDwCA,AX7CE,CkDkCgB,A2CMhB,AiBGmC,AkCfuD,A5JxC5F,AoCOA,CY0II,A0ClFF,ACJA,ACfI,AcQA,AKcJ,A0B7BA,AEuBE,AIEA,AG0BF,AMAE,ApCzCE,AddJ,A7HPqB,AElB3B,AKQA,AUQY,A4BgCN,CpDwBC,AyBIA,AsG5BA,AG6FA,AahFO,AC0EA,AG9EA,AGjDA,AhE4DA,A6EYP,AWyCO,AjJ7HP,ACKD,ATTgB,ACDf,AVCe,AGDf,ATOC,AvBgBD,CYaK,AsIsCF,AItBF,A0BwBA,ApCxBM,AgEIF,AGwBZ,A5JzEY,ALFJ,ARJc,ATAA,A2BFhB,AjCQE,CsFwCc,AEVb,AIWU,A4B0BV,AGAE,ArBvDa,AgDmEf,AU7BC,AmBlBD,AOiDA,AnI/EY,AZFX,ApC8CH,AwCKE,CsENO,AiE2DiG,A7L7FvG,AiCNA,AnByCH,C+ENe,AiDoBX,AMDP,AMSkB,AI1BT,AiC+Bb,AjK3EI,AtBsBuB,AElB3B,AKQA,AJDoB,AsBJT,AqB8CA,CgFNC,AUkBR,AIHJ,AGlDI,AhF6DJ,AyFFY,AtD1BM,AoEaJ,ACmEV,ACLQ,A7B7EI,A0C+DiG,AIvBrG,A/JxEE,AJXF,ApCQd,CqFqIiB,A4D7EsB,AKErC,AjFfyD,A4GV1C,AIoFQ,AmBjGqB,AvKjB/B,A3BEA,AhBKN,C6GwBe,AOGJ,AqCGA,AKcJ,AG6EV,AIpFc,A/EnBJ,AwFQE,AOlBhB,AY0Dc,ArDrCA,AgEII,AvDtBJ,A9GlCZ,APAA,ANUA,AKQA,AJFqB,AsBJvB,AObY,C4DmDO,A0CiBjB,AG8EF,ApC9H8B,AwCyCX,AE3CA,AjFwBJ,ACqCf,A8F/CA,ASgCiB,AE8DF,A7B7ES,AwCPQ,AORc,AhKjB5B,ADJH,AtCMA,ADLjB,A2D4CiB,C0ByFG,A2CtFF,ACfI,Ad1BW,A8D2Bb,AjEII,AsE2EP,AWpFb,AxJlCkB,A3BoBO,AxBJX,C6GwBM,AY+DH,AkBjEE,AaQf,ACAe,AuBuBb,AIaA,AC1DR,AY0DiB,A9BzCX,AyCQe,AvDtBJ,AtGxBV,ATTe,ACDL,AVCK,AGDL,AwBDF,AcsD4B,CwGJrC,AE2BY,AK7ClB,AW8Fe,AI9EK,AxDKI,AvEKN,CwCVI,AOGd,AsBUgC,AKc9B,A0BlBD,A8BiCY,ApJlFE,AxCWJ,AYXX,AO8CD,CsFHiB,AK4DF,A+DxEF,AO4FhB,A7IlH2B,AHNzB,ATTgB,ATAA,AHSpB,AKQA,ApBAkB,AmETY,AhD4CzB,CYgCT,AqEhDW,A4BQC,AO6Ba,AkBRnB,AKVqD,AYzBzD,AE0BU,AIXJ,AK+ES,AUtFN,AOiDY,AtKxEb,AOAwB,A1BWL,Ae3BzB,APAA,ANUA,AKQA,AfAmB,A8DTY,A9Ec1B,A8NRD,CpLsEgB,AmEtCA,A8BFI,AO6BF,AcJpB,AUK6B,AqBuDkB,AEzCjD,AMAsB,AlDvDtB,AvG7BoB,ACKZ,AvBiBiB,ARTL,AOXA,A8CkDhB,CvD/CR,A4HkDI,AbzC4B,AuCiD9B,ACRQ,A/EnBJ,ACqCJ,AmFHkC,A3FnBiC,AqGiC5D,AInDgB,AYSH,AxDKV,A9F/Ca,AgCIS,C2DuDR,AuBQxB,AnCrDwB,A9CqC4C,AwBqBhE,ApDtEwB,A3BoBD,CuH+ClB,AGAE,AkCekB,AxCrCE,AzF7CF,AzBG3B,AKQA,AUOU,AqChByB,AZFvC,CpDGA,AoIgE8B,AC4Eb,AcNX,AvC9F4B,AoEaJ,AcPE,AKgCT,AvL9EnB,AKQA,CoF8BuB,AsBgB0B,AMUpB,AxCGA,AmFhBF,AhEXI,A0EH3B,AQSyB,A3J5C/B,A1BLQ,A2CAkB,AxDM5B,CqFqIoB,AkEAlB,ASvEiC,A3FnBwB,AyGlBvD,AMyBA,AhKVK,Cb4BT,AiIPa,AnElB8D,AzCvDnD,ATAA,AiDQU,C7DwEF,AiIPxB,AwBCmC,AW5CzC,AK8BgC,AuB2BpB,AvL9EV,AKQA,AKrBJ,AK4Bc,AqChBS,AgJMNC,CpLsEjB,AmEtCwB,A4BiBpB,AgCRO,AI8BQ,AQvDjB,A3DmBsB,A0EHhB,AjJxC6B,AfVrC,AoBE+B,A1BsD7B,C+ENsB,AqC2BY,AuBlBhC,A/CNoC,AkFMR,AMvBiC,A/J1B3B,ALFxB,ApBKJ,AKQA,AyBnBsB,A7CmBX,C+BmE2B,A0EnCtC,A4BOS,AqC1BjB,A6BEgE,ApK5B/B,C6FwCvB,AgBwBqC,A5EbU,AsGzBzD,AkB0DwB,AKjCc,AKgC1B,AtMtEsB,CwG8Bf,AiDkBf,AMS6B,A3FnBwB,AtC/B7C,AqLVN,ChNLR,AqI4IkB,AahFZ,AkDrC0C,AzKRlC,AqLVSnC,C3GiCc,AiDoBnB,AMOgC,AhDzB1B,AoGnChB,CrEsCyB,AOmBf,AtCtBN,AjFzBE,A9BPO,CkKoEV,AmBuCwB,AYrEU,A1JxCZ,AvCEvB,AmNHgB,CjHgCF,AmF8EY,A9I7GhB,CuE8Fc,AkCzCsB,AkBiB3B,A+B9BG,AlL9C5B,A8BXa,A1BsDI,ChB3CrB,A+FqCwB,AsCuGP,AQjFwC,AeMtB,AgBdD,AkBL1B,AGwBN,A7JhEM,AlCEF,CyImCiB,AEgBiC,AeMhC,AuCaD,AvL9EF,A8BXb,C1CWR,AqI4I0B,AcNpB,CjBvFa,ASJqB,AEgBoB,AyCtBtC,AjJxCQ,ArB8C5B,C+EN+E,AMC5D,AwCqBmC,AM8EtD,A9G5IuB,ClC0EzB,AkGjCqB,AwCqBkB,AjI3DnC,AKQA,ADmCsE,CmLmCnD,A9JjFf,ClC0E6D,AwG6B3B,AkCzCsB,A5HnDrC,C0F4FgB,AuEe1B,AI9EK,E1KrCI,AKQtB,ADmCF,C2FyDwC,AkCzCH,AsDmBhB,C9D8DN,AMjGM,AEgB8C,AM2E/D,AgDxDQ,AnLnC+E,C2FyD7C,AgCxDlC,AuBsBJ,AoB7BY,CjDuGc,AcFlC,AexEE,AgBiD0C,AI9EtC,A1KtCN,CuL+EY,AlLtEiB,E0HoCb,A2CPI,AtKMpB,CwHDQ,A0CyEO,CjK5Gf,ADoCoG,CwHDlG,E0CyE0C,AI9ExB,C3E+DoC,AwCkCpD,AmCjGE,C3E+DmD,AuEeb,AiBrChC,ChD4DsB,CN/EqC,AyCtBjE,CayCmB,EjBqCmB,GvEfY,CAAV,CAAqB,AuEevB,CAA7B,CrCxDyD,CAAD,CqCwD3B,CrCxDoC,AsDmBhF,CxFsB8C,AuEe/B,AI9EK,C3E+DoB,AkCzC+B,AyCtBjD,C3E+DA,CAAhB,AkCzCiF,AqCwDvC,QAA9C,CI9EI,EAAA,C3COM,CAAuB,UAAvB,EAAmC,SAAnC,EAA8C,YAAA;AxI4BlD,AHxEoC,AuEN9C,AK0GE,AE9DI,AlDsCJ,AkBpFF,AmCgJqB,AC6LnB,AGjSA,AnC8BA,AwCPA,AKtBsB,A5CyEtB,AiCaA,Aa7FI,AnGHM,AsGgBR,ACL2C,ACGrC,ACKR,AGDE,AkBMA,ACfO,AKWc,ADkBnB,AGAI,AC8EN,AGpGD,ACWD,ACVQ,ACCM,AEc8E,ACoB7F,AErBG,AEMF,AC4EA,ACzEC,ArC1DsC,AuCmDvC,ACTO,AE5CgB,AjFyBpB,ACoC0B,AkFrB5B,ACkBqD,AGYlD,A9F/B2E,AwBsB/E,AuE5BK,AE2BJ,AIYiC,AE5ElC,AC4Ce,AEDf,ACMI,ACfC,AjEIK,AoEcR,ACiEqB,ACJrB,ACpCA,AE5BQ,ACdJ,AEON,ACkC8B,AGhD1B,A9DYQ,AuBJN,AwCPJ,ACeI,ACsD8C,ACvDhD,ACwB0B,A1D7C5B,A1E/BJ,AuI6B4B,ACgBxB,ACcF,AGRE,AEtCF,A9KAO,AQTD,ADWA,AJbA,ACKE,AvBgBmB,Ac1ByC,ACAlE,AVAwD,AGAxD,AGID,AMoBW,AzBNT,ASHH,AvBAA,AyBCA,AwDRG,AlCIH,AtCMO,AmEVmC,ArE8DtC,ANtDH,A+DTD,A7DUI,AKaJ,AoBsBwE,AXtBxE,AnBNQ,AsEkCJ,ADDC,AV5CC,AmKEN,ADjBK,ExGyDL,A5FxCA,AvBAA,AyBCA,AuCTA,CiDwCO,A+CeA,ArC5CL,A0DqCK,AsBuDL,A/HtGO,A3EDT,C0GuCsB,AMCtB,A2CoBE,AILF,ArCjDO,AmEgHL,A7B7EI,AddJ,A/GlCkE,ATAV,AiDQxD,CuF4CE,AKmBK,AI3BL,AaDA,AgBFD,AOTsB,CjMiDjB,A+E6PJ,AGjSA,AnC8BE,AkCyDN,AkBlFQ,AoCGA,AQoBF,AnCrDJ,AuCiDI,AGrDiB,AMsEnB,AtETJ,AuElCE,AScE,AEFA,ACMA,ACnBF,AjEQQ,AqE+Ea,AKlFjB,AEOA,AIdF,AGsEkH,AOhDhH,AjKvDA,A3BmBqB,AiBFf,A6BkCR,AwJ3CEK,C1HiEc,A8BtEO,AmCmDrB,AKcF,A3FpB4B,A6HCzB,AvIHY,CzDjBT,AsGgBF,AMEA,AkBMF,AQcE,AC8EF,A2CxFE,AGyBF,ArDrCM,AuEJJ,AIMA,AzKjDF,ACKE,AjB0CgE,A6BvC9D,C+BgGH,AE9DO,AlDsCP,A8DjBA,AvCmDA,AsFxDA,AUsFA,AlF9F0E,AuG3C1E,AwB2CO,AWvCP,AtKTE,AbP2D,ACA7D,AVAmD,AGAnD,AiBYA,AtCID,AFsDQ,AJrDA,ALON,A8NTC,ADjBKN,C9HmJK,AgB1GX,A0CeM,AKaN,ASnDe,A4B6CT,AhCbF,AddJ,AlG3BE,AbP0D,ATAV,AlBkBlD,CoF+HW,AKjEC,ASlCE,AqBpCK,Ac8CJ,AcWd,AsBqByB,AsBhDzB,AvCQI,AddJ,A7HRkB,AdI3B,ASAA,CgFeU,AUCY,AmF+EZ,AI9EE,AtJ1CF,AgLUEC,CpLsED,A0DLS,AnCuCT,AiE7GgB,AagEvB,AlBtDK,A0CJc,AhE6DvB,AwFoDuB,AQzCO,AKhCjB,AzJjDP,ArB6CkE,AgMrC3D,C7MkEG,A8EgEG,AcnGG,AjGVN,AmEmBgB,A2GMpB,AIGE,AYxBF,AvJjCE,ALFJ,AtBqBiB,Ac1ByC,ATAV,A3Be9C,AyBCA,A2C0CA,AwJ3CE1J,C3H8BD,AnC8BE,A6C7BO,AXsFtB,AtFhGiB,A2JpBM,AMsEV,A9F/BI,AiHsEJ,AI9EE,AEOA,AKbF,AnLfc,ACXd,AkCFI0G,CoCoIE,AIpGnB,ACmCoB,AgB9BF,AcxCS,AsB2CT,A3BjCN,A9CmCK,AwBsBjB,AmB3BoB,AsE2EN,AWpFA,ASqBE,AlN/CJ,AyBCZ,A2C0Cc,CrDuBO,AmG/BF,AsBUJ,AcPI,AGeyE,AUPrF,AKUE,AGeM,AazBA,AhEXM,AoEcJ,AE6DF,AYrEE,AEDb,AxKvDgE,ATAV,AJe7C,AdGE,AkNpBV,C1H+CW,AnC8BE,A6C7BI,AEPlB,AMgBY,AGDE,AiCAI,AlDuBtB,AwFoDuB,AO3EL,AIdd,A9DYkB,AkEItB,A/J9CkB,AmBHlB,ApC6CwE,AXtBxE,A0MhCuBgD,CzHkFH,Ac5BD,AgB1CQ,Ac8CJ,AGgGrB,AIzFM,AmBaJ,AerBa,AQkCf,AG1CI,AxDKiB,AwEUJ,AGRA,AxK5CA,ARVjB,APAA,AkCOF,AlEiBQ,A6N1BH,CjIiDD,AI+RJ,AE1MA,Aa7FkB,AnGHF,A8HwBY,AQcR,AYPlB,AONI,A8BAkB,AhCblB,A0C6DN,AxD3EE,A8DckB,AxM9BZ,AmNHI,ClIgCiB,AQiCT,AxF5CV,AyGmBS,AGDE,AU5CM,AgBgEN,AMrBb,ACCiB,AKcrB,AEKiB,AIJA,ADpBb,AddJ,A/GnCgE,ATAV,AoBY1D,AvCkBA,ASAA,A2MfqBpI,ADjBK,C3GsDJ,AsCCE,AaQd,AsCpBR,AYaoB,AxK5Cd,ARVY,APAA,ArBkBA,AFoDhB,ACxCQ,AVN+C,CyL+BtC,ACMA,AKoEE,AIpEI,AI2Ba,A3DpC5B,AuEJW,AhKzCA,AJGA,AtC4DW,AqBlBsC,ChB3C5B,AsFuExB,A8BtEO,AQkDzB,AQcM,AcDgB,AIJA,AsBRF,AKoEC,AnD7EK,AzF7CJ,ALFb,AhB+C6D,CoEgFxE,AkBlFQ,A8BwBiB,AKXlB,AETO,AKcN,AyBXI,A7DPF,AyCDE,AddJ,A5GXI,AyBjBZ,A7DUI,AsDJM,CuCuHV,AsD/EQ,AuC4Ee,AYxFC,ACelB,A1MzCO,AyBCA,AlBsDT,AyD/DJ,A7DUkC,AyBmCsC,A9B5BhE,A8NTR,ClIgCI,AiBDkB,A0CiBO,AgDyBe,A9KzE9B,CoF+BQ,AXsFtB,AgD1DQ,Ae2EO,AqBzIA,AQoDa,ASwBiB,AkBxE9B,AhLQuC,AdRtD,AlBsDiE,A6DZnD,CsBX2C,A8E6BpD,A9BxBO,A9F/CF,AoBEV,C2CuCsB,A4ESM,AKS1B,AnKhDyB,AgCHK,CkDiCV,A8CsBoF,AiDZ3E,A9JnDf,APLd,APAA,A3BiBE,AKaJ,CiJsC2G,AwCPjG,AQpBoB,AYaP,ApK/CT,AJGkB,A7CKpB,AgERZ,CkCyEoB,AoB1BC,AU5CM,AagEhB,AYN+F,AKKzE,AIJA,AkBzD1B,AIiDQ,AiBpBgB,AQOP,AhKzCS,AJGA,AtBKpB,ApBE6B,AKa+C,C0FkDrE,Ac5BE,AgB1CK,A8B+DO,AIJA,AMO9B,AYhEW,AIkDT,ASDgC,AWNlC,A5MxCe,C0FgCf,AlDsCG,AuBkCA,A0FnDuG,A4BXjG,ASoEoB,AoB/DE,AGRb,A9LvCF,CiBsES,AuBkCP,A0FnDoF,AeQhG,AsBiDwB,AcpElC,AKTuB,CzH6DJ,AE9DmF,AyBQnE,A+DiCS,AmClCb,C5DckF,AMiFjG,AyBvFN,AoBPN,AKP4B,ACcM,AK9CtB,C9DoD0F,A2BxD3F,A8BkDI,CpDWK,AIJA,AkBzDjB,AwB6CsD,AnJ5CvD,CgGuD8G,AyBoBpE,AG/BpC,AqBD6B,A7J9ClB,ANcX,C2DwDQ,ApCLW,AqDpBI,Aa7CR,AoDEZ,AgB0CgB,AKbP,ACekB,AQMA,AlK5CrB,AHRqB,AYGE,CgGuD8D,A4BXrF,AEFA,AciCS,AI/CW,CvGuCrB,A8BtEO,AyB0DiE,AKKhD,AC4E7B,AGhF6B,A4BwD1C,AyB7Ga,C3MP6B,AmD8Gb,A+F9C/B,AIJA,AjH9DiC,CT8EH,AsBVZ,AqDpBC,A4C8FK,A2C7FO,AaxCP,C3MPoB,AkDkE5C,AuIagE,AKhCjB,CxGwBmC,AnCuChD,AiE7GO,AuD6CK,AaD5B,CAAlB,CjFCmB,A0BmBS,CvCNC,AuCMA,C6DlBE,A1JtCzB,CpCTsC,AyKgDhC,AoBhBY,ACelB,CDfJ,AzJvB+B,AHRS,CgGgE/B,AwCjBoB,C7I4BF,AqGXK,AkB2EnB,ApCjIc,A4DmC7B,AgCvCe,ClBwE2D,C7JHlC,AuBkCL,AgG8BD,AwB9FsB,AciCmB,Aa1BxD,AK9Ce,GL8C2B,EtDMzD,AjChDQ,AsC6BJ,AddJ,AnGjBE,CjC+DqC,A6IZrC,AjCjDG,AsC8BC,AddJ,CnGlBsC,CmEqCT,AkFiC6B,C1EpEvB,C5DmGP,AqH3GnB,AiB4Ee,CnBAc,CnH+BC,AmH/BoB,AE5ElD,C5FiGsB,A2BtDF,A+FOnC,CnMmBQ,A8HP+B,AuC9DxB,CvC8DmB,CAAvB,AeNP,AKnBI,AddJ,C3D0Ee,C2BtDgB,A0BmBQ,AeJrC,A4BRA,AvBXI,AddJ,C3DwEqC,A2BtDxB,AqEOU,AxI5Ce,GmEqCzB,A+DiCyB,EAAiC,GvD3EtE,CiCyDA,AjCzDP,AsCsCW,AddJ,C7C+BqC,AkFNtC,EAAmC,E5BQnC,AwB1Da,AnBuCT,AddJ,C+BmDsC,CtBlBhC,AKnBI,AddJ,C7C+BiB,A4EoB4D,C5EpBlF,CabY,CbamC,CkFNhD,CrEPiC,CqEOa,ChG+CI,IAAb,CAAxB,CAAZ,CAAP,CczCO,AabP,AqEOM,ClFMN,C4EoB4C,AM1BmB,CN0B7B,CrCdvB,CAAP,AqCcyG,ErCd/C,K2CZE,C3CYI,AqCclC,CrCdmC,CqCcmD,AM1BzD,EAAI,C3CYL,AuC9D5B,CvC8DwC,EqCcxC,CAAA,AE5Ef,CAAJ,CAAA,CAAR,CAAP,EvC8DmF,CAAC,qBAAD,CAArB,CAA1D,CAAA;A9HQJ,A+DhFI,AU4GL,AE/D0D,AlDsCZ,AmDqDzC,ACxIN,AE6UE,AGhSE,ACiCkB,ApCJpB,AwCPD,AMPC,A7CyDkD,AiCalD,Aa5FM,ACIF,ApGPK,AsGgBL,ACLL,ACGQ,ACMP,ACeI,AC1BA,ACWA,ACqDE,AO1FF,AEVuB,AKgFvB,AEzBF,ACJA,AML6B,ADkB6E,AGCpG,AC+EN,AI3FgC,ACT1B,ACCM,AEayG,AGG/G,AEGR,AC4EE,ACzEH,ArCvDA,AuCgDC,ACRQ,A/EpBP,AoFmCK,AGQqB,A9F9B6D,A+FJvF,AMqC8H,AE3EhI,AzKmFK,A0KtCE,AChBJ,ACcA,ACOM,AhEZC,AqE8Ec,ACHrB,ACpCA,AEzBU,ACjBP,AEOL,ACiCqF,AG/ClF,AvCYS,AwCXX,ACeK,ACwDN,AxD3EQ,A2DSR,AC0CA,ACzDuE,ACiBnE,ACeJ,ACgCI,AC9FN,ACqDM,ACLA,ACjCF,A9KAG,AQV4B,ADanB,AJfM,ACK4B,AWTlD,AlCyB8C,AexBlC,APAA,ANMY,AKTf,AUyBmE,AbThE,AHCA,AvBAA,AyBCR,AoCXE,AdOL,AtCMS,AmEVT,ArE8DC,ANtDD,AoBiBA,AHzBC,A8CDA,A7DUA,AKaE,AYWQ,AQU8D,AXtBxE,Ab7BF,AN6BU,AsE6BF,ADDF,AV5CM+E,AmKEV,ADjBC,EzMUD,A8CDA,C8EgDO,A1DrBP,AwFKO,AMgDP,AuBjDO,AOPA,CpH9BH,AK6CF,ACiCkB,AFoDpB,AgC1H2B,Ac8C3B,A8BhBA,AWgBE,AMyEqB,ACHrB,AWvFF,AOPA,AxLxBsB,AKTf,CqF8CH,A2B4BF,A8BYO,A9FhCL,A2CzBA,A0EeqB,AG6CvB,AGlDA,C9GSuD,AIgSrD,AcjRE,AITF,AETF,AIaE,AgCHI,AaQA,AKeF,AGQJ,AnD1DA,AyC0BU,A2CIZ,AzDnBQ,A4DmDJ,AExCA,AIMA,A9MgBA,AqBnBoE,AuCMpE,AV5CMA,AkKfHsD,CjNoCC,AmEqBF,AqHPF,AQQG,CxGuBa,AWxCd,AnGHI,AsH3BiB,AOuDnB,ACJF,AQcE,AC+EF,AcJA,AsB5FI,AChBF,ASgDF,AEzBM,AWRZ,AvKvDU,APAA,AJaA,AHCA,AvBAA,AyBCF,APRR,AVsBM,AYWI,AHZV,CFoDO,A+DhFO,AawIA,AO1DM,ApCJb,A8CdE,AElBK,AKaP,ACeO,AC1BA,AS1BA,AEVa,AKgFb,AoBtBqD,AKM5D,AIJA,AkCfA,AO0DA,AGlEA,AIiBA,ACgCO,AG9CA,A9L1CQ,AKTf,AgCOO,AtDiEP,AW9DP,AfSO,ALYC,A8NdD,ADjBG,C1HgDF,AsB+DE,AgCvDI,AEauB,AGGvB,AjJyBJ,A4KxCF,A3InDY,ApBGE,AKTf,AtBwEC,CiCcqC,A0DLzB,AnCuC8B,AiE7GvB,AqBqDO,AIKG,AGGtB,AYMJ,AqBoDY,AexEvB,AhLLwE,AuCM/D,CuBXgD,AQiCrC,AUlBR,AElBR,AkBlCuB,AOuDf,AiDFA,ASEI,AhCZE,AoDEP,ApKhDsB,ADanB,AoBuCJ,AuJ5DG,C5MmFF,AkFnCA,ADqFX,AiDsBW,AoChGI,AEFJ,ACOE,AM+DF,AG7DM,AhCZE,AyCIb,AEAN,ASFY,AEtCD,A3KZY,A3ByBvB,AkD4BW,C8BXT,A2DwBgB,AYMJ,AqBoDS,A1C3FP,AnGlBF,AJfU,AnBYV,AGmC0D,CsE4BpD,AYpCH,ApGPA,AsH3BU,AOuDZ,AwBqFb,A1HpJe,APAA,ArBiBJ,AmBiC2D,CoEgFxE,Aa5Fc,AwBkDV,AG7BU,AS6FA,AKpGI,AaQA,AkBJA,AQuEK,ACHT,ApK/GI,AHCA,AvBAA,AOuDd,AUvCF,CyEeuD,AC2FrD,AiB5Ea,ACtBF,AwBmDf,AiBrCmB,AaQA,AkBJb,AUgCS,AG/CU,AjCUb,AyCIK,AvDnBE,AlG/Bc,ADaD,AJfZ,ACK4B,AhBXzC,AJkBU,AjBcf,CsFgTF,AhCnQgB,ApDvCN,A6GyEJ,AyBnCY,AkDhChB,AjCUsB,A2CIxB,ASFI,AEtCF,A3KZ0B,APHN,APAA,AkCMtB,CoDgEI,AoBX4B,AQcb,AYJI,AEGf,AIJA,AMOF,A3FrBA,AiITE,AGES,AE+Cb,AEzCc,AEtCP,A/LTW,AEOC,AHCA,AvBAA,AgERvB,AxDuBiB,AYWP,AtBZF,AqEuBW,C3BgCmC,AmDqDhC,AiB5EF,A7CyDuC,ArDlFrC,A0GmCM,AGsCR,A0B4ClB,AMnGsB,AiCQhB,AO2BU,AYuBA,AMhEA,AE+CU,AlKzFK,ApBRS,ApBoBlC,C+BkE+C,AsBTpC,AC2CyC,AsDzExD,AuCyBI,AOTA,AmBpBa,AnCJb,AtFhCJ,ApDae,AFoDA,A6DZb,CsBZmD,A2BAzD,AS3BI,AqC0CoB,AqBCF,A6BRlB,A7L/CkB,AKTf,AgCOoB,AtDiE3B,AUvCE,AnBF0D,A2DhBlC,CiCiC+B,A4BUpC,AkBInB,AQcM,AiDVQ,AhCZJ,A0C6DR,ACzDJ,AUPI,AjLhDsB,APAA,AZO1B,ADuBE,AmD2BmB,C8BqBD,Ac3BE,AgB3CK,AgBiEH,AOpBI,A+BbJ,AWuBZ,AWRZ,AWxCW,AtKVsB,AxCYzB,AFoDc,AW9DlB,AEiCM,CsEK+C,AQiCrC,AUlBpB,AkB1C2B,AEVA,AKgFvB,AiBpCI,AQoBD,AIJA,A6BoBL,Ae3CK,AGEH,AMhCF,AvKGsC,ASNXjD,C9CkFH,A4KxCxB,A0BPsB,AKCI,AtK9Ba,AadrC,AGEJ,AlEsBQ,C8F5BmB,AM8EP,A8BtEO,AKkF3B,AE3Be,AuBSc,AIJA,A+BLE,ASRJ,AEAa,AEVX,AS9BlB,A3KZ0B,ACKqB,ApBO/B,AuCT3B,A7DUyB,AccvB,CiFgDkB,AFoDpB,Aa5FM,AMiBS,AGAM,AU/CM,AoE6CZ,AMEa,AQOb,AtK3DuB,ACKqB,AgBJrB,A1DYZ,AccxB,CuBqD2C,AuBkCK,AiDlE5B,AgCsBd,ArIqBsB,AsM/C1B,AxLhCF,ALyBQ,C0DxCN,AtCmF4D,AoDnFlC,A7BqHuC,AsDzEjE,ArE1B4B,AXlBtB,APAA,AkCMV,A5CkCU,C0DvCV,AcD+B,AyD6DU,A0D0BzB,AvLjFM,ArBUG,CkH8BzB,ACSI,A2EQQ,AjJ7CE,A5BsBJ,AHVR,C+FqBE,AqBqCA,AxFhF4C,AmBFhD,A7DU+B,C4DqGmB,AqD/C9C,AmCjBkC,AuCuEN,AiBrC5B,AIOA,AtKtF6D,A7CM3B,A4NApBqD,C7MkEX,AsHUkC,AkBrCF,A5IyCK,AmL8BX,AiBrCjC,AxLzEuC,AvBAD,AyDF5B,C1CoEoD,AgDqCoB,AqD/ChC,AEf9C,A3GuCyC,A2KtDrB,AoBeP,ASuCiC,AvK3FtB,AlBUY,AHCD,CwCuGW,AiDlE9C,AqCU8B,A0D0BZ,AnKpFyB,ACKC,AnBKR,ATiB/B,A2MhBF,CzGyCS,AiFFA,AMEV,AQOU,ArKtDgC,A1CQvB,C4DqG4D,AsFxDpC,AnItD7C,A0MOmB0B,C1MPnB,AfSkC,CcYtC,C6D5BI,AtCmF4D,AmK6BpD,CpD3DgB,AvJvClB,C8EZV,AcF8B,AuBuDf,A2EqEb,AMvEa,AcSA,A3LhDL,CgIuCI,A7HxCJ,CXmEoD,A6EhFhB,AuBuDtB,AkCM2B,A+CR3B,AcSA,C7FlBpB,A1GkDA,CiMvCJ,C7I8DkD,AsDvEC,A8Ccd,AvHzDU,A1BI/C,AfSyB,C4DqGyB,A5DrGlD,CkJ6CiD,AuDNY,A1LhDzD,CmIsD+C,AsDmDtC,CrFzDQ,AiGxCV,CAAC,AKDL,C9J4D0B,AkDvBX,A4GrCtB,ADjBwD/B,C5MmFM,A+DhF1D,AqCuDW,AiFFA,AcSA,ASjE0C,CtEgEN,AsEhEO1J,C5MmFc,A+D7ExE,AqCoDkC,AGAb,A+BM4B,A+CRf,AO2DtB,AOlDsB,AhMvDlC,C4CmEmB,CkDvBG,AqCU6B,AcD3B,AwCoDH,AYjGV,ArMRF,C4CmEqC,AqGdG,AoD7CtC,C3HfmB,CAAhC,A0BuDuB,AiGxCH,AIlBsC,CrG0DpD,A6CKoB,AwD/DyCsB,C3GsD3C,AmDSd,CnDTJ,CMIiB,ENJC,A2GtDrB,C7J6EkB,A6IsCP,C7ItCI,CgB1EZ,AwCuDiB,AqFyDU,CrFzD3B,CxCnDJ,AhBsE2D,AkDvBrC,CAAlB,CMIA,ENJA,IuGpCmB,CzIfnB,EAIqB,CuEyD0B,EAAA,CkE9CjC,ClE8CiC,AkE9CxC,CAAT,EjGwCmB,AiGxCW,CjGwCT,ENJD,CAAE,KuGpCtB,CAAwC,EjGwCtC,EAAA,CxDmByE,AkDvBzE,CqCUmD,CrCVnD,ElDuBuD,CAA3D,AyJ3DE,ElE8CiD,CAAA,CAAF,CAAf,CAAA;AtIoBhC,AH1DF,AkEjBA,AKJF,AO2C2D,AlDsCa,AmDqD/C,AjCxIzB,AkCCA,AK6CG,AnC6BF,A8CbC,A7CuDgG,AiCavD,Aa3FpC,ACGa,ApGNR,AsGgBN,AEEF,ACEA,AERF,ACSI,ACoDI,AO3F0B,AOwElC,AEvBI,AEvBI,AKWT,ADkBE,AGCM,ACgFL,AGvGF,ACUgF,ACRzE,ACCM,AEY4G,AKOvH,AIJA,ACRM,A9EgBR,AkFtBA,ACqBK,AGUJ,A9FhCW,A+FJb,AEyBC,AIYD,ACzDC,AxKiEI,A0KtCE,ACjBwB,ACe7B,ACOS,AChBR,AjEMD,AoEaC,AC8DiD,ACFlD,ACpCC,AEzBS,ACdT,AEOA,AIjBD,A9DcW,AuBAA,AwCbb,ACeM,ACyDC,AElCN,A1D1CQ,A2DSN,ArIiCG,AsISH,ACzDH,ACiBK,ACeF,AGTE,ACN+B,AChClC,A9KAE,AOEW,AJfuC,ACKgB,ATRpE,ACCC,AVDD,AGCC,ANKyD,AKFpD,AIAA,AnBaL,AYHA,AHCA,AvBAA,AyBCA,AoCXF,AoBEE,AxEWK,AFoDL,AyD/DF,A7DUD,AKaK,AYUM,AQU+E,A9BhBrC,AsEwB5C,ADDJ,AV5CG,AmKEP,ADjBCiI,CCcF,C3LRQ,A+BGP,A4JEa,ADXZA,C5JuH8B,AsFxD/B,AkCRA,A/DzCA,AsE4GA,AUrGO,AeLA,AKLT,ClIoC2D,AE5CrD,AsBqDF,A+BoGA,AuDvIF,AG8FM,AlIlCK,AsIST,AQ1EF,A/LR2D,AKFpD,AJYL,C6H0BE,AkB2BK,A4BZN,AMLC,AjKpDK,AgBWH,CqBLF,AakImB,A5BnB4E,A+C3EjF,AEUd,AclC8B,AOwElC,AEvBI,AEvBI,AWOF,AEVJ,AaoBM,A9EgBJ,AkFtBA,ANDQ,AyCHV,AEIA,ACwBI,A1D1CE,A8DWJ,AIMA,ACN+B,A7KhDjC,ArBwCQ,A+CiBN,CsFSsB,AYpDH,AG+DnB,AnEFJ,A4FhBU,ClLsBF,AL7CE,AyGoBJ,AIqDE,AkC3CJ,A4BTM,AIXF,AGmBA,AGwBF,AmB1BA,A7K9DA,APAA,AhBgBE,AmEVF,C2BuDC,ASdA,AkCGK,AEeR,AqBSG,AK7CA,AIyBA,AOsEA,AiBrCA,AlKhFgB,ArBFoC,AKFpD,AgCCA,A3CEP,AyMTQ,CjI+CiD,AC2FlC,A5BnBhB,A+C3EW,AQeR,AQvCwB,AmBwI1B,AMxGa,A4BpBb,AxKiEE,A6KjCA,AmBmDE,A9JzGJ,ArBFmD,AKFpD,AuCsDC,AuJ5DCC,C/MyBT,AiFwHmB,A9B1BnB,AuD5DW,A2BiGF,AMxGC,AOuBR,AIJA,AGvDqB,AhE6DvB,A4DrBiB,A0C2DJ,AGnEX,ApLhCO,AHCA,AvBAA,AOuDA,ACxCA,AiDjBI,C4E6Eb,AmCrBS,AiBvBG,AGmBA,AlDXI,AqEkCN,AOxCyB,AtK9BnB,AtBJN,AHCA,AvBAA,C0F8B+C,AlDsCa,AmDqD/C,AiB1EZ,AEpBO,AgBxBgB,AuCJX,AEyCZ,A1FDC,AwBqBZ,AiFnC8B,ASiDnB,AEzBM,AWTR,AvKtDP,APAA,AGGK,APUG,AHCA,AvBAA,A2NjBT,CrG2Da,AkDqBV,A7JiBU,AyLtCF,AnCHQ,AzIhDuC,ASFpD,AnBaO,AmEVF,AdkDA,AwJ3DC,ChI0IU,AEOJ,AiBrGD,AKcL,AWtCqB,A2D4BnB,AGmBA,AiBcA,AESb,AGzBW,AIfsB,ArIzCtB,CsCsGG,AkBjEE,A0BiBA,AE/CK,AhE6DvB,AgFlBM,AUgCQ,AalCL,AzDlBS,A1E0CK,AwI/BT,AIMA,AlJGA,C0BsFK,A0BlCF,AcnBjB,AI9CmB,AqB6BX,AIJA,ACRW,AxJkCF,A6KjCA,AO2Bf,AKhCa,A1DHM,ASjBF,A8DWJ,AIMA,ACNoB,AtK9Bd,AxBZsC,AKFpD,AfaU,AWDF,ALwBL,AgDkBK,C+CFQ,A2CiBd,AIJA,A0CdA,ACwBS,AKhBF,AzL/CA,AuCThB,AImDgB,C1DtBK,AwGkBJ,AmDxCM,AhE6DvB,AuGpBS,AnIwBmC,AyIhB3B,AtK5DoC,AoBIrD,CjD0EoB,A+D3EpB,AeyImB,AnF3GG,AwGkBJ,ACEhB,AGCE,A2BiGF,AuC5FkB,AvBRM,A0C2DpB,A3J/Fe,AnBdK,AToChB,C6HmHN,AGxGiB,AiBrCE,AhE6DvB,AqCrByB,AuBAE,A0C4DnB,AxD7EA,A3H/BmD,AEQzC,AHCA,AvBAA,AkBRlB,AVuBI,CsExBgB,AcLE,AyCyFtB,AyBjBE,AIJA,AiBvCkB,AhCOI,A8DWpB,AIMA,ArKpCiB,AiCXT,ClE0EW,AyBEyD,AqD4D7D,AwCrDnB,AyBhBI,AIJA,AMDK,A3Ffa,AiGqBX,AK7CU,A8BkBA,ACeA,AGTA,ArKpCA,Afdd,AgDGL,CzC4E+E,AwE/B3D,AuBeA,AahBE,AiBrCD,AxFwCA,AwBqBvB,AmFbwB,AvJ1DjB,AnBaiB,AWDT,AjBcO,A4D4BC,AuJ5DtB,C/HGwB,AC8IN,AnF3GT,A2HsDV,AI9CQ,AQ+GA,AkB9FA,AKkBJ,AoBdY,AMfJ,AxDIA,AiE4DA,A9K9GL,AfakB,AWDvB,AwDTmB,AbmDG,CwBzDE,AlFmCE,AuMYxB,AIMA,A3LxCc,AHCA,AvBAA,A2NjBOG,C5MmFE,A2EpC8B,AsBOhC,AuDGrB,A1FDQ,AlEyCR,A2KvDwC,AGM7B,A/CQgB,AuBAnB,AdjBJ,CtD0GW,AwB/FJ,AE6DP,A1CvDmB,A7BpCb,AvBFY,ALwBhB,A+CiBI,CzDrBJ,AwGkBR,AqBaoB,A4CrCf,A2BgBC,AlK3CuD,ArCmE7D,AyD/DF,A2JTC,CzGyDG,AtEpD4D,AlBWtD,AHCA,AvBAA,AgERV,CgD6CI,AsEZ4C,ArBcX,CrJ/BrC,A4B4DsE,AsHTzD,AIJA,AKfiB,AYxB1B,ASkCW,A3J7DR,ARYL,CbOiB,A2H4Cf,AahB6B,AiBrCV,AhE6DvB,AyEAY,AoBzBV,AlI3CF,AxDuBI,CgCqDkE,A0E5B9D,AkCJ0B,AiBrCX,AhF+DR,AgBFf,AyEAW,AcVqB,AhJ9DqB,AlBW3C,AHCA,AvBAA,C4G+CH,AkDYS,AIJA,AgCpBM,AtJ/C+C,AXCrE,AnBa0B,C8F8CxB,AkEYW,A+BIW,A7IxExB,C6BwImB,A0C5Ef,AiCYA,A3FzBgC,AuHGd,AnCHqB,A7FI5B,CyBqFI,AwB/FH,AxCMqB,AoFAO,A7FIpC,CxDnCR,AsMwCiB,ArJ1DE,CuF8CK,AmBIxB,AiBOoB,A5I3DiC,ChCoBD,AkMuB5C,AIiBQ,AtK5DqC,CyHW9B,AEyCiB,AlEoBxC,AmFbU,A0BCR,AxLjDgB,AHCA,AvBAA,CoM0CH,AnCHsB,ApGjDd,C+BJE,AyB+CV,A+BG6B,AiBrCrB,AhE6DvB,A6FzBE,AW6BgB,A/L9DO,A+CZD,C+C0Db,AwCZX,A8CDgC,AEOF,AnCHlB,AhIlDI,C2DH8B,AC8I3B,AwB/FK,AxCMG,AgIyBO,A/L9DC,C+DqCW,AnDxC5B,AHCA,AvBAA,C6FgIC,Ae9Eb,AyDnDmC,AhF+DrC,AgBFqE,AxCtElD,CwBwEvB,AiGrC8B,AzHnCvB,CsHyBA,AlJ1BP,CoDyEgC,A+GpBjB,CvGsFa,A5D3ID,APUT,AHCA,AvBAA,CekEK,AoKjDnB,AiByBkC,A1K3C5B,AHCA,AvBAA,A6DVuB,CyHmCsC,CvKyCrE,AH1DF,A2H4CsB,AuBOC,AIJA,A2CSL,CxF/BH,AwF+Bf,AnLjEkB,AHCA,AvBAA,CYQkE,AqBnBpF,A4BCqC,C+C4D9B,ASjB2B,AxD3CI,CgBiDQ,AqHJ5C,AzH8BF,AxC5E4C,CsG+DtB,C7GrDJ,AHCA,AvBAA,A6DVe,CuIoDlB,A1K3CL,AHCA,AvBAA,CiJ4IN,AmDlGQ,AOyDJ,A9I7GD,CoFsJoB,AqCnHsD,AqB2EvE,CpEhDY,AuBOE,AIJA,AoB9B0D,A5J1BxE,AHCA,AvBAA,CuIoDN,AuBOmB,AIJA,AkCb4B,AvIpDL,C+BJrB,CAA3B,AgBgEQ,AkDSqB,AIJA,C3BHL,AuBOC,AIJA,AzFUtB,CmCfgB,CkDSW,AIJA,ChDfxB,AiEvBQ,CjEwBN,AoEhBiE,A5J1BrD,AHCA,AvBAA,CuIoDI,AUwFlB,A0DzCI,AjLpGY,AHCA,AvBAA,CuIoDhB,A9DaJ,AZ3EA,CoFsJuC,A0DvC7B,CrB5EoF,A7GwCvF,C8DbH,G+C3B0B,CHRjB,AGQiB,CpEe1B,EAEE,C+BkGkC,AmDlGkB,AO2D/C,AjLtGD,A1BCA,CuBAA,C4JiBE,EAAS,ClC2HkB,A0DvC7B,AjLtG0B,A1BCA,CoM0Ce,A7K1Cd,C0H4IQ,A0DvC7B,CP3DkD,E7DU5C,CrBVhB,AqBUkB,G4CnCZ,AiByBuC,CAAjD,CjBzB6B,CiByB4C,A1K3ClE,A1BCA,E0BDwC,AHCxC,AvBAyC,EuBAE,CgHoDhD,EAAA,A7GrDK,CAAwC,A1BCxC,CoM0CP,ApM1CA,CoM0CmF,A7K1C5E,CAAP,EGD+C,CAAxC,EAAwC,I0K2C/C,sB1K3C+C,EAAA,EAAA,mBAAI,IAAJ,CAAA,CAAxC,CAAP;AXuEA,AH9DF,AkEhBE,AYsCoG,AlDsCX,AoDjF7F,AC6IqB,ACkMnB,AapSA,ACqBQ,A7CoDT,A8C9EI,AnGHM,AwGsBD,ACFN,AERA,ACSE,ACoDI,AcpBR,AEtBI,ACPF,AChBK,AO8BF,ACkFC,AGzGN,ACUD,ACNE,ACAQ,AEUkH,AGInH,AEIyB,AC2E/B,AG/E+B,ACR1B,AEhDgB,AjF6BvB,ACoCE,AkFvBA,ACuBQ,A3FzB0C,AwBqBpD,AyECE,AK3CI,AxK+DF,A2KxD+F,ACgBjG,ACOQ,AChBN,AjEML,AoEaK,AE4DF,ACpCA,AEtBU,AChBV,AEMD,AC8BC,AG/CH,A9Dce,AuBAH,AyCGV,AGsBD,A1D1CO,A2DSH,ArIkCF,AsIQD,AExCE,ACeD,AEhBE,ACOD,AEtCJ,A9KAE,AQXO,ADYM,AJf6D,ACMpE,AWTT,AlCyBI,AevBA,APAA,ANEQ,AKQH,AIRoB,AMkBwD,AzBD/E,AYNH,AHCA,AvBAA,A6DVF,AoBEK,AxEWC,AFoDJ,AchES,AHCR,A8CAH,AxDuBI,AYS6B,AHhChC,AbGF,AgEgDS,ADDD,AV5CItD,AmKIZsF,ADnBG,C3JKH,C2CyCE,AtFtCU,CiIgCH,A8CcA,AMJA,AKsCP,AtK3FO,Afa2C,AHHF,AvBAF,AgEFpC,C4BFN,AyCwFJ,AiBnDA,AezBuB,AE0CrB,AlEmBF,AkFnBE,AOsEA,ACpCA,AGtCA,AECF,ACmCE,AKvCF,AjKrDA,AjBQU,AKQH,AZJP,AbGF,CoCwE+C,AqEjD3C,A4BAE,AOmCA,ASJF,AUfE,AmBVF,ArBOM,AddJ,A8DaF,AIMA,C7K+B2C,AsD8PzC,AwBvRA,AiBUA,AEnCF,AOmCA,AmBnBA,A/ENI,AzEqDF,AiL9BA,AgBXO,A9LlCP,A2CPMtF,AmKIN,C3DsCM,AdjBJ,AtGzCF,ApCeO,AmNKNyF,C7MmEG,AH9DR,AkEhBM,AewIa,Ae7EP,AOTN,AERE,AE6DA,AiBjDA,AuBwFF,AMvIiB,AS8DjB,AoCZA,AjK1DE,AJRJ,ARIE,APAA,AGEqB,AMkBwD,A9BT/E,CoFkIe,AclGZ,ACqBM,AwCdN,AWiGA,AMvIgB,AwCkEhB,ApICL,AsIQK,AKzCO,A5L5CJ,AKQH,AZJP,AmDiDM,AuJ1DEnC,C9HgJW,AqBpFL,AmB+Bd,AYmEY,AWvFA,A2BdJ,ACOE,AChBF,AM2CA,AGtCA,AGoCA,A3DjCM,AlHnDJ,AKQH,AoDJG,AhEAV,CiGmDe,AmD7CQ,AhFiEd,AgBJT,A0FeS,AGtCA,AGoCA,AzJrFmB,AtBsBnB,CuEsHU,AclGT,ACqBM,AURN,AkBGE,A6B/CW,AhE6DvB,A4FPkB,AjJlDK,AJfH,A9BkBV,AqDqCA,AwJ3DT,C/MwBD,AiFwHmB,AsBtFR,AkBiCX,AyBhBiC,AIJA,AMStB,AevBA,AuBTA,AC0CA,A1KvFA,APAA,AGEgB,AfIlB,CgGmDS,AqDHN,AlEmBZ,AyFmDY,AcvEO,AMSP,AjIxDE,A5DDJ,AjBIZ,C0FsUe,AuBhSE,ACSF,AkBGE,A6B/CQ,AjF6BR,APWqC,AwBqBpD,A/ElDE,ARJW,AOdH,A+CoDG,CrD0BG,AH7Dd,AiFuHiB,ACkML,AqBxRA,AIqDE,A5GdF,AiL9BA,A3I5DE,ADYW,AXhBb,APAA,AbMd,A2MUF,ChIhBmB,AgBgET,AOTN,AGCE,AiDFW,AqBUA,AE4DA,AG1DQ,AWbJ,AMSM,AjK1DR,AZJF,APAA,ANEL,AekByE,A0CdlE,A7EGnB,AwNQC,CvG8B0B,AjCNP,AoFoCF,AnEJhB,AmFZkB,AChBd,AhHkCO,ApC/ET,APAA,AGEyB,AfIb,CH6EK,AwGyBA,A6B1DX,AQkBa,AvESJ,AyFHA,AnKoBA,A6KjCE,AvBPT,A2CDS,AzDhBb,A2DQW,AIiBf,AlK9CyB,AgBdD,A/CIjB,C2ENW,AyB+ClB,A4B4GoB,AWvFA,AvESJ,AoGhCA,AM2ChB,AEtBwB,AChBxB,AGoCA,A3DjCsB,AkEAL,AERD,AC0CA,AvLrFW,AKQtB,C+DVc,A4E6EF,AoBbf,AGyBA,AGvCe,AGqCf,A3DlCqB,A0EPrB,AnK1CI,ADYmB,AmBwCrB,CvDlCJ,AkFyTE,AgEvQsC,AIJA,AYMjB,AcVL,AwBjBpB,ApK/B2B,ATIwD,AkBRzD,C7CUxB,A2GsFM,A0B+CiB,AanFkB,AIJA,AYMzC,AnKoBE,AoMPO,AlL7Ec,AIRE,AkCsDN,CoEUC,AqBEV,AEI8B,AIJA,AGxDnB,AcmBT,A2BcH,A7JzCa,AhBFG,AnBiBvB,AmEboB,A5DDd,AJCV,C2ENoB,AC6ID,AuD3FZ,AQkBoB,AG+ErB,AMvIiB,AGiEb,A3FzBoD,AkHqCtD,AGvCe,AGqCf,ASxCF,AtL7CI,AyDIe,A5DDf,AoCOmBpD,CoCiIV,AiErE2B,AIJA,ArFhBiB,A2GS7C,AxI7CJ,Afda,AfIlB,A0MWD3E,ChNKN,AgFtByB,AE+UF,AoBtRjB,AmB+BR,AEtByB,ACPV,AYTc,AUsBa,AIJA,AGxDnB,AhE6DvB,AmFZU,AjJzCyE,AnCXrF,CQaI,AiFuHiB,ACkMnB,AuEnUuB,AjF6BJ,AiBgCnB,AmFZ4B,AuB0BF,A9JnFlB,AVgB2E,ArBdjF,C2EuIiB,AiErE8B,AC2EtB,AG/EsB,A0BJ7C,AlDXU,AzFjDe,C6C2UD,ATlQT,AgBJnB,A4FPoC,AmBpBhC,A7K1B+E,AqLHpF,CrFiDK,AlDWc,AkFvBhB,AlEmBF,AuHxDa8H,ChNKX,AgFtBkB,AgEoER,AwDpBZ,AvLtCO,AoDJiB,A2IWzB,ChIjBD,ARyCoB,ACoCI,A4GXiB,AYYvB,A5HxEZ,A7EGN,C6IkJsC,AWvFA,AvESlB,ARzBkC,AJ2BlD,AmJ9Dc,C3E0IqB,AanFK,AIJA,A9E3Bf,A0GmFM,ArH7CM,ArEtEzC,CW0EsC,A+IXH,AC2EC,AG/ED,A7ESV,ARzB6B,AkImC7C,CnMjEE,A4KuCC,C1GxDQ,A0GyDN,AuByBwB,CnDnBxB,AnFWV,AxB3E2B,ClC+EW,AkIwEJ,A6C/BH,ClLvGjC,AqIsIM,AWvFqC,AkDrBhC,ArIgCgE,AhBnEjE,CmGwDE,A4BNI,ASIJ,ErCEkC,AkCwD/B,Ce9CC,A5J1Ea,EmK0CzB,AnK1C+B,C0DuCV,AmFiFV,AzKvHL,C+L2C6C,CxDoB3C,AuBrCE,CvBqCN,AuBrCuB,A2BgBnB,AzL1CZ,A2CHU,CcGJ,AiF8IqB,CjF9IzB,A8E+DqD,AkDrB5C,EhI1CwB,A6BsCzB,AmGIe,CnGJzB,CoDwGuD,AoBpHzC,CAAA,EAAuB,A2BgB1B,CzL1CuB,CyL0CJ,Cf0C1B,AGvCe,AGqCf,CNGE,AGxCoC,AGsCpC,EPoC2B,C/BuB/B,A/FjJwB,E+FiJyC,C/FjJzC,C8H0HO,AzKvHjC,C2CH0B,C3CGiC,A2CH7D,C+HuFM,AGvCe,AGqCf,EPqC6B,ACjC3B,AGzCgD,AGuChD,CPmCS,EX7F2B,CK+B9B,AM8DG,CN9DoB,KO6B5B,AGzCgD,AGuChD,KlB1D8B,AK+BzB,AO6BN,AGzCgD,AGuChD,ClB1DQ,CAAR,AK+ByC,AO6BnC,AGzCgD,AGuChD,ElB1D6C,GpKoDvD,A+KyCa,GAAsB,IX7F/B,AK+ByC,IM8D7C;A/KpCA,A+DlFE,AKoLA,A3CzGwF,AkBlF9F,AoCmVK,AGpSH,AC+BA,AShCA,ACoBQ,AZmER,Aa7FC,AnGHM,AsGeH,AEOI,ACDN,ACWkD,AClBlD,ACOE,ACoDI,AStGR,AKiFyC,AG5BrC,ACdH,AI2BD,AGGE,AIzBA,AEIH,ACAQ,AEUN,AGIS,AEG8C,AC4EpD,AGhFoD,ACLvD,A/EtB+B,ACoCJ,AkFtB3B,ACsBwB,AGSzB,A9FlCyE,AsGpBpE,AEwBC,AEDF,ACaU,ACtBR,AGmBF,AC6DI,ACDP,ACjCO,AEvBI,ACnBqD,AEOlE,ACkCS,A3DrCK,AgEGd,AGqBuB,A1DzCV,A1E0C2B,AsISrC,AGzBA,AC6BkD,AC1CpD,A3KlCD,AQXW,ALJsE,ACO3E,AvBgBJ,AcxBS,ACCR,AVDQ,AGCR,AGCyB,AMkBwD,AzBA/E,AYNJ,AHCA,AvBAA,AyBAE,AwDRE,AxEWD,AYZK,AHCP,AfgBG,AKOH,AoBmBC,AXzCF,AbCiC,AN+BjC,AsEkBQ,ADDA,AV5CD,AmKKPH,ADpBD,EvLEW,ATAA,ADcV,AHCA,AvBAA,AFyBA,A8NtBAA,CpL+DO,AqEtDA,A4BEA,A0BiBA,AgBhBH,A7JRG,CkB2DP,AsDiQG,AevTH,AM8BE,AsB5BF,AO+CE,AmB9BF,AgBlBA,A4B4DE,A1KvFA,APAA,AbOF,CPqBqB,A6IejB,AO4BY,AIJA,AMDP,A3HxEA,A3BUA,C4DCL,AgB4UD,AIrQG,AFuDF,AkB1EI,AEU4C,AEXhD,AUlDE,A8BiEO,AC4ET,AGhFS,AMDX,AeZE,AKUA,AC6DI,AElCA,AMDA,AcC4C,AtKjGlD,AZOyB,AMkBwD,AzBA/E,C6EkHmB,AmB9FL,AQiBb,AQzC6B,AyBwC5B,A1EJqB,AyINQ,CvM0C3B,ALnDF,A6GwEE,AqCxCE,AyBbE,AIVN,AIgFE,ApH/C+B,AsISjC,AGzBA,AzLhDA,AJTE,C8DoLM,AW8JR,AG1SC,AUDA,AkC4BA,AiBDqD,AIJA,ASkBrD,A9FlCoE,AuIFpE,AxKlD0B,AnBe1B,AtBQO,Acfd,A2MUO,C5GiCC,AGMA,AqBGA,AnG3DA,APAA,APcA,AvBAA,AqBTA,AJER,AmDkDQ,ADDA,AyJvCAC,CjIoHe,AiBrER,AEzBG,AKiBT,AGAA,AQzCyB,AkB4DzB,AIzBP,AhEV+B,AmGcxB,AMuE+G,AgBhDlG,AEUb,AO1C0B,ArL5CR,AL+ClB,CqKoBS,AatBJ,ArIgCyB,A9C/E7B,AJeA,AvBAA,CeyEG,A4E8CU,AmB9FL,AgBxBgB,AiCoIvB,A1EvEiB,AkGtBjB,AWLsD,A/CbpD,A+D0BF,AIjBwB,AjL7CxB,AVDD,AGCC,AmDMA,A5DDuD,AuMYlE,ClNmBM,AmEeqB,AkIoCzB,A9JnFY,AhBHa,AnBkBf,AhBoBZ,A8NtBY,C9IZC,AoBuEE,AxFxCT,A0G+B8C,AY7DrC,AnD6CH,AkHwCK,AoBAmC,AlL1FzB,AMkBwD,AzBAtE,Ac6BA,A9BTb,CiBgDgB,A4E8CO,AgBzFT,AGLI,AgBxBgB,AkB4DzB,AewEK,AlFhGF,A4GNE,AGmBA,AsBFA,AIjBqB,A5LhCrB,A0C4CA,CuCbC,AyCMP,AhEV+B,AwGwBxB,AnHcwB,AyIhBrC,AzLhDA,AJTM,A+CoDO,ADDA,CWnDC,AoBuEE,Ac1Bd,AIiBgD,AY7DlC,AoB4CT,AQkBW,AiCyD2G,AElC3G,AoBAgC,A5KxE+B,AbNrE,AyC2CE,CwB6EO,AmB9FL,AIkBG,AY1Ca,AyBwC5B,AKae,AeiBb,AalBM,ACtBG,AIgF8G,AK5ExD,AYHlD,AQDc,AjL7ClB,APAA,ALcA,ARPjB,C2FyDwB,AIdN,AGMhB,ACWkD,AoBRhD,AQgBF,A5DnCwC,A6G4BhB,AYSJ,AMc8B,AlKvFhC,ArB4CF,C+DqFK,AiBrEE,AEzBP,AKkBd,AGDe,ACoDE,AO7Fa,AuE2EX,AlDtDF,AmESc,ArKzCd,AmBqDF,CegIf,AatDgB,AkB1EI,AIDJ,ACoDE,AiBjDF,AYTlB,A2CyCM,Ae7Ca,ArIgCkB,ArC/E7B,ATAA,AVQiB,C0FqCpB,AyCOH,AQiBM,AqCAmB,ACnB8C,AzH6BpC,ArC/E7B,ACCW,AVDX,AGCW,CfuFG,A4E8CD,AmB9FL,ApGHZ,AwGqBE,AY1C0B,AkB4DhC,AYPwB,A6BvBpB,AtCTkB,A2DUH,AQDc,AxM1BvB,AGZZ,AbCiC,AN+BjC,AqEiBe,CpD+BU,AoEkGE,AatDJ,AtF/FX,AyGqBJ,AERI,AsDoCL,AiBrBH,AkBlBiB,ArIgCkB,AxB1E7B,AnCeN,AhBoBJ,AqEiBQ,C6B2EgB,AsB3Ef,A+DDqB,AgBmCP,A9JvE4D,C0D0BtE,ADsFb,AsB3EyB,AwCcvB,AIJA,A7EU8B,AsFSH,AalBP,ASCW,AhJhEN,A9CkBvB,CYiEY,A4F3CU,AWYjB,AuEqED,AIzD0B,AmBnBnB,A1LpCA,AvBSkB,CwGsB1B,ACoBQ,AURX,AwCgBA,AIJA,AmBb6B,CtKgC/B,A+E0PC,AcjR+B,AlGpChC,A0EY+B,AoG2BR,AauBjB,AhK1FoB,APAA,CyF4GpB,AyBjCC,A3G3EoB,APAA,CgDKzB,AgB6UA,AatS0B,AYgEE,AwCuC5B,A3HpJM,AjCuBN,CwF+GmB,AMxFhB,AaNW,AOUhB,ASlCgC,AeyDlB,AeJmB,AxE5BoB,A6G4BtB,ACnBoD,AoBJlD,AlL9CzB,CuDsIa,AmB9FL,AgBxBgB,AmEqDtB,ACnB0E,AGyC9E,AlDtD0B,AmESC,A5LhCrB,AvBS0C,ACdvB,AwNSjC,C3H4BqB,AoBIC,A8Bba,CHuC1B,AYP6B,AvHpEjB,APAA,AJaA,AtBLY,AN+BjC,A8NtBkCE,ChEmDC,AvEQF,A1D7EvB,AiMkBV,CvI2DgC,A6G3B2C,AkBA3D,A/KjDd,APAA,CoKiDyF,A/L3BvF,AyB0BK,A9BTT,C8J6B0C,AvEQD,A1D7EzC,ACiDyC,CqEHlC,A+C8BE,AqCpBwB,AlLjCmC,CwF+G7C,AOzDQ,AUZG,AEzBhB,ASqEV,AO7F0B,AETH,AgBqE7B,A3DC8B,AiI/BG,AlNrCF,C6FqCJ,A4C2BZ,AOrBN,AhEXsD,A+DJzC,A/EqBT,CuB4EQ,AG6MP,AgB3SE,AOUhB,ASlCgC,A1CyBgC,ACoCf,A6G3BwB,AkBA5D,AEJoB,A1LG1B,CyFEL,A2ByBK,AYPC,AEID,AoCvBwD,A/Cb5C,A/EqBP,C8BmBI,A8BtEA,A8BkEd,AsDvBoB,AjN3BpB,AyB0B2C,AwCSvC,C0ByRQ,AItQhB,A8BtEA,A8BgEE,A1HvEQ,CuDsI2B,AmB9FD,AgBxB2D,AeyD/E,AMpCgC,AmESG,AnNvB2B,C2F4T9D,AuBhSR,AyCuBJ,A1EjC6D,AiHkD1C,CvGwPP,A+C1QQ,AGGf,A5DnCwB,AhDzCjC,ATAyB,ACiDhB,CoH2BP,AwCR4C,A1L5B9C,CmGMO,ArEG8C,CqEHrD,AUDwC,AyCO5B,AciBC,A9E5B8D,AoG2BrD,CxCQpB,AIxBS,AciBP,AmCsBmB,CxDlBP,AqBNd,Cdfa,AoCgBqC,A4BlBrC,CvEuBc,AOrBlB,AckBP,CfjCsD,AiEaxB,ChEElB,AhEXiE,AiHkD1D,AlDtDoC,AxHrC3D,CgF6C+C,AvBJmC,AiHkD1E,AjK3FiB,ARiDhB,C+EJuC,AqC+BvC,ArH5E0C,ACiDW,CkEiS3D,AarS4C,AqC+BpC,CrC/BmB,AQa1B,AkFiCmB,A1K3FvB,CmEoVI,AavSG,AQcD,A2Cea,A1EjCwD,A+DJ3B,C/DIuC,AoG2B1B,ArC/BI,AxHrCJ,CCiDpD,C+EJmE,AmD6BtD,C0BN0C,AauBzC,AzK1C8C,CyK0C7D,AjK3FR,CgDyC2E,AzDzC3E,CgF6CgF,AqC+B9E,A5DnC8B,AhDzC6B,C4G4ExC,AkBNF,AsBFL,AauBN,A1K3FsE,CmEoVjE,A1DpVb,ARiDS,CuFSL,AvFTF,CsIqBoB,A9HtEiD,C0DoV1D,AqBxRP,A6BgBmB,CGvCoD,CrD+ShE,CAAA,AqD/SmC,CAApC,A/GrCZ,EAAwF,I+E4DjF,CETH,AgFwCmB,CvGuPpB,AuB9RG,AgFuCmB,EvG0PrB,CqBzRE,ERfsE,AQehE,CRfkF,GbwSnF,CuBlSP,CgFwCI,CvG0PG,AuBhSL,CgFsCE,CvG0PG,AaxS2F,CbwS3F,AaxS4F,AmD6BlE,OhEwQlC,AarSmG,AUQ/F,CVRqE,AuDyBvC,CpEgRjC,AazSJ,EbySI,AkD1QiB,CAAuB,AcFtB,CAAH,ChE4Qf,EAAA,AuBjSE,AyCqBgD,ChE4QlD,CuBjSY,E6CiBM,CAAH,ClBME,EAAmC,AkBNF,OpE4QnD,EAIC,GkD1QoD,WlD0QtC,CgE5QiD,EhE4QjD,EAAA,IoEhRiD,CpEgRjD,GgE5QiD,EhE4QjD,CAAA,GAAG,EoEhR8C,gBpEgRjD,GAA+B,EAJ9C,EAKC,SAAS,GAAA,EAAA,CAAA,SALX;AlF7TiB,AkEdhB,AKmL4D,AO7I/D,AlDqCD,AmDoDwB,ACqFnB,AE8HH,AG1SF,AC+BC,AShCD,ACoBW,AC1BX,ACAmB,ApGFhB,AsGcI,AEOE,AGLA,ACMJ,ACkDG,AO9F2B,AERlC,AO2DI,ACLE,ACfP,AI0BmC,AGG4B,ACoFxD,AG5Ge,AGKb,AKaE,AEI+D,AC2EtE,AG/EsE,ACN1E,A/EvB+F,ACoCtC,AmFEvD,AGOiC,A9FlCgD,AiGuBhF,AK1CH,AxK+DK,A0KvCI,ACdN,ACWS,ACc0D,ACrB/D,AGmBH,AC4DK,AIxDI,ACpBqF,AG0CzF,A3DrCG,AiE4DC,AC5DZ,ACuB+B,A1DzCkD,A2DU9C,ArIgCI,AsIUtC,AEvCC,ACgBA,AEfA,ACUA,ACfiC,ArKxCvB,ADWJ,AJfF,ACQL,AWTH,ApBDyE,ACErE,AVF2D,AGE3D,ANID,AKQA,AIZ2C,AMkBmE,AzBC5G,AYNO,AHXsC,AvBAF,AyBY1C,AoCVA,AoBEE,A1E+DN,AcjEQ,A2CkBV,A7DAE,AiBeU,AQWT,AXxCD,AmDiDO,ADDA,AV5CJ,AmKKH,CrMfK,AvBAA,A4NYP,E9H+TE,AVtSA,AoFsBO,AqCeA,AhKpFA,AjBsDA,A6BxCL,AmKYH,ChNCoB,A+EiHI,AmB9FL,ApGFhB,AoHtBgC,A0C+ClC,AyCbE,ACgBA,AIpBiC,AzKpDnC,AmB8BF,A/CdE,AwCII,CqBTF,AiF8IA,AlFlGE,A0GKF,AKSA,AMbiB,AW4Bc,A1D/C7B,ArIhBoB,CqE2KuC,AO7I3D,AQiCE,AgBnBE,AqCFA,AsCqEA,AK5EN,A/CpBA,A1EiDqC,A3DhErC,AWCE,AlBuDA,CgHmCE,A1CrDA,A8H8DM,ChHmBW,AmB9FL,AEYZ,AcpC4B,AU8C5B,AoBQI,A0B3BF,AW2BI,AmBnBJ,ACUA,AzK3DF,ARFiE,ACE/D,AVFqD,AGErD,AJaE,AuDPJ,A5DFI,ADiCA,CRlBS,A+EiHI,ACqFT,AE8HP,AgBjTW,ApGFZ,AoHtB4B,AER3B,A8CmEA,A6BwCK,AC5DL,A/IjDO,AtDiEP,AJ/CA,AcdP,AkD8CM,CvDnCa,AuEqK4C,AyBxHjD,AlG5BP,A2GgBO,AkBaN,AU6FE,AtIhEF,A0KvCI,AgBmCA,A5Hb2B,AwI7B/B,AKJ2B,A/MyB3B,AU7DR,C6DHS,Aa+Hc,AiBpER,AE1BG,AgBxBgB,AeyDA,AkB4EzB,AY/DyB,AaxBtB,AqBgBL,AI5BE,AKJ0B,A7JhCxBhK,CkCwHY,AmB9FL,AgBxBgB,A0D6CxB,ACdE,AQuBI,AU6CJ,AErCZ,A5JxEY,ADWA,AiCTF,AxBMN,AmKMIoE,CzIsKuD,AoC5ElD,AyBlCiD,AIxBzC,AUsBoD,AIJA,AYK9D,AmBLM,AxHSsB,A6IjCJ,A1K5CxB,ARF4D,ACE1D,AVFgD,AGEhD,C8EgEK,AwCdI,A0BuBV,AoCTA,AIpBuB,A7L9BvB,AwDRA,AxBME,C0B4KiD,AQpDxC,AmB9FL,AgBxBgB,AmBgJnB,A5DnFyC,AsFSlB,AkBwCrB,AiB/EmB,AImBvB,AEfE,AxKjDJ,AuBwDE,CvDrCM,A8EwBL,AQiCE,AxFxCd,AsGcY,AEOI,AGLE,AkCGF,AvGxCV,AXfQ,APAA,AJaE,AnBwDd,AcjEc,A2CkBpB,C4C0CY,AMPS,A4Ce0D,AIJA,ArFjBtE,AiGsBQ,AW5BE,AhHgCsB,A6IjCJ,A7L9BpB,AmMIhB,ChIuMK,A2CxJA,ACLY,AoBQI,AkBKlB,AemDe,AIxDD,AmBnBgB,ACUd,ArK5CA,AZjBqD,ATAV,AkCMzD,AoBEY,A2IYFiI,ChNCK,A8EwBmB,AE+KtC,AM9ImB,AUZI,AlG5BP,AsGcC,AKEW,AmBQX,ASkGE,AG5GQ,AGKN,AKaA,AyBbA,AYaT,AiBJV,AxLnDqB,AmCTC,AoBEP,A5DFC,A2CkBpB,A/CdE,AkDgDiB,CoESC,AU6FE,ApE3Gd,AiGsBY,AW5BE,AI+EH,AQlCK,AY1CpB,ACgBgB,AEfhB,ClGQM,AGLA,AyDqBW,AmCxBf,AIUiB,A9MUF,AcjED,AHDT,A0MeV,C1GuCyB,ArCNd,AwGIc,AYaE,AhJhEJ,AgCEV,A1E+DZ,AcjEkB,AJIN,CyEmCZ,AwBcQ,AqCFA,A8CmCiB,AMuBF,A1J7GA,AbNgD,ACEhD,AVFsC,AGEtC,A+BInB,AoBEiB,A2IYF,CjIkHI,AmB9FL,AEYZ,AcpC4B,AsBoCb,A0BuBC,AuBiBd,AMuBgB,AvKnH+C,ACE/C,AVFqC,AGErC,ALcF,AlBuDA,CKlDH,A+EiHI,ACqFnB,AkBnLc,AgBxBgB,AkB4DwC,A6CkDzD,AoB3ET,ArKjDI,AnBcW,AoCVc,CnDgCd,AsIsCoD,ArIoBnD,A2MlDW,AlL9CoC,ATAV,APuCnD,CuE+Fa,ACuFvB,AkBrLkB,AQoBJ,AQ5CoB,A8BsDxB,AyBbF,AYaI,AiBJa,AIpBU,ArMpCnC,C0E4HuB,AmB9FL,AgBxBgB,AERnB,AsDmCa,AqBwEhB,AC5DG,AMWW,AtKhEf,AuBwDE,CzDnBP,A2EsCgE,AoG9BhE,AyBmBmB,AIpBU,C9EgB7B,ASkGyB,A5DnFwC,AyFFrE,AemDe,AqB5DC,AIpBiB,A1K5CpB,APAb,APAA,ATIM,A8CoDoB,C6EkBkC,ACoF9B,A5DnFsC,A1EmBzC,A2KrDE,AOmFd,AqB5DY,AjK5DjB,AekBd,A5CeY,CyHkC6C,AiCEzB,AnKqBA,AchFf,CoHyDyC,AGGM,A3DCY,AyFF3C,AuCdV,ApIrDC,CIqEgD,AwGiDlD,AcXQ,AlLnGxB,CqJ2DF,ClFgJE,AP9IyE,A1EmBhD,AejFW,AuDPnB,A7D+BX,CiEsC4D,AyFFnC,ApJ5DK,AmCTpC,AzCiCM,CwEuLV,AoCtNgB,AaiEuC,A8D0C3C,AC5DI,A3H/CS,CvE+BoB,AoJmC4B,AIJA,A7EOO,AxBvEvB,AzCiC/C,C8EuCmB,A2CLkC,AlIuBzB,CmJtBmC,AIJA,A7EOH,C3EtChE,A4GqBuB,A2BoGE,A5DnFyB,AsHsC5B,CrBxEG,A4BuBb,ChHYC,AxFvCkC,A4GqBjD,AUpDW,AiBwJ8B,A0D7CjB,AC5Db,ChHoKX,AiDlJmD,AqEPrD,AxLnDQ,CwE+DyB,AoBlBF,AUpDT,AaiEU,AgDqDd,AevEI,ChHwKxB,AiDtJsE,E8D0C1C,E9D1CM,CAAyC,E3CKxD,A+CkFY,A0D7CH,CzGrC5B,AoBlBI,A2BoGE,A0D7CM,CrFvDgC,AUpD7B,ArHwFuC,AiMzCvC,C3DyG2C,CjBxJxB,A2E2GN,AC5DM,CjC+BA,CAA+B,C/EqI7D,AjF3HuD,EiF+HrB,A+G5GV,AMhExB,CNgEQ,AM/DN,CtM4CkB,CgKVU,AhKU9B,CgMmBwB,C9D1CoD,A8BaP,AhKUP,CkIvBS,A8D0C/C,C9D1CM,A8D0CN,E9D1CwD,CvBbvB,CqFuDjC,AMhExB,CNgEQ,CrFvDoD,A2FP1D,I3FO8D,EqD0BlC,CAAA,GgC6BN,AM9DrB,EN8DwB,E9D1C2D,CoEpBpF,EN8DsB,AM9DhB,CN8DA,C9D1CwE,CAAlD,CAAA,qBvBb8B,CAAuB,UAAvB,EAAmC,UAAnC,EAA+C,UAA/C,CAA5D;AvG6BF,AHpEkD,AkEZhD,AYqCI,AhC9CV,AkCiOE,ACpFiC,AC+M/B,AI7QF,AUZY,AZmEZ,AtF9FQ,AsGaF,AEOC,AGLC,ACML,ACoDK,ASxGN,AKiFM,AErBF,ACNA,AKU2F,AGGf,AC0F1E,AGlHwB,AGMxB,AEQR,AGKS,AEGgF,AC4ElF,AGhFkF,AGzDzF,AhFgEmF,AkFrBnF,ACwBD,AGMyF,A9FjCzE,AwB0Bf,AyEHI,AnKqBE,A0KvCE,ACdJ,ACaH,ACcQ,ACvBH,AI8EoB,ACA1B,ACjCQ,AElBI,ACxBX,AG0CO,A3DrCC,AiE4DG,AC5DV,ACuBH,A1DvCE,A2DOqC,ArIgCqC,AwI1B1D,ACef,AGJE,ApKzDO,ADeD,AJpBS,ACSpB,AvBcD,AczByE,ATAV,AbsB3D,AYNA,ADCC,AoCVH,AoBC8B,AxEW5B,AFqDA,AclEM,A2C+CR,A7D5BE,AKiCF,AYnBU,AH3BV,Ab0BA,AgEsBK,ADDG,AV5CF1F,AmKMNkD,ADtBK,EnN2DL,AoNrCAA,C/EoDO,A8BaP,AuBlDO,A/CRA,CvIP6C,AkFuUlD,A+CnRF,AqDrCA,A/CRA,A+DwCE,A/M3CA,AcbF,AwCGMlD,CyDsCF,AIHF,A0B0BmB,AIxBjB,AUsBkD,AIJA,AxB3B9C,ChDGA,AEmLJ,AMlJE,AFuDF,AqB/EI,AgBmCA,AevCN,AUoBA,AC+EK,AGnFL,AGtDI,AhEkEA,AgFrBE,A3ChBF,AiE0EM,AUpDR,AjLhEmE,ATAV,APuCnD,C8FsBJ,AEO8C,A4BQgC,AOlB3E,AOaP,AIJA,A7EU0B,A8HewB,CpMH5C,A6FtBI,AW8CJ,AgB5CF,ACNA,ASuGE,AGjHJ,AzI4CE,A8KjDA,AQ2BM,AWnBN,AvLlDc,AlBmBd,CSJ8C,A6I6C7C,ApEW8E,AkFrB9E,AuBsEA,AxKrGT,AuClBS,A5CKP,A2MSO,ADtBOuD,C/MsBsC,AFmBxC,AoKoCF,AQhCF,ASiDI,AMAE,AS9CwB,AIqB9B,AlK9CE,AJpBS,AnCiBX,ANMF,AcbN,AkD+CQ,AyJtCAJ,C7MoEG,AqGrByC,A0DQzC,AQhCF,AOkFiB,AEjCb,AmBzBJ,ACwB2C,AlKvF1C,AbL6D,ATAV,AbsBpD,AYNA,AnBwDA,AyDnBT,A5DfA,C4GeY,AtFrCF,AlB0CV,CsEjDW,AeoIsB,AK9DpB,AkBXuC,ACbrC,A4B+GF,ApEjHE,AoIAE,AEuCmC,AvK1F9B,AlBcZ,AlB0CV,AoNrCA,C7MoEc,AsGlCE,A0C+FD,Ae1ED,AOlBE,AzIxDO,ARFgD,ATAV,AlBmBjD,AFqDA,AJhDL,AyNHKuC,ClIyBK,A2C4CA,AkBhCT,Ac7CO,AwBiHe,AiB/Ea,AxLtB7C,AczByE,ATAV,AbsBhD,APkDA,CuFoRC,AI7QE,AkBXoC,AmBCtC,AUiGE,A0DlDM,AC5DR,AOoCsC,AtJrFtC,AtDiEF,CyGnBK,AEAb,AK4Da,AyBrCI,Ae0EmB,A1DvEvB,AgFrBE,AIVJ,AkBoEQ,AGrEoB,A7JxC1B,ALLE,AqCMW,A1EgE5B,AclE2B,A8CqDd,AyJtCA,ClIyBiC,AkBqB1B,AMfpB,AGGM,AgBmCc,AG3BN,AQad,AqB/DgB,A4B8DI,ArJzEK,A3BU3B,AkD+CgB,AyJtCAC,C9HuUC,AczRM,AQC6B,ACb/B,AkBcJ,ASOf,AOlBmB,A0CiBE,AWnBN,AOoCmC,CjHbpD,Ac1BoB,AO4DA,AlBlCC,AoF/BH,AM6CN,AMAY,AazBtB,AlK9CkB,AafF,AxCDW,AoCSP,C2DqD8B,AoBLjC,ASuGX,A0DlDI,AO/CR,ACuBgD,AnKtE/B,AtBNH,AmCTC,A5CKR,Ab0BX,CuM8E4B,AGrEQ,AzLzCP,AboD7B,AJpBY,CyFuG+B,Ae1E/B,A/Bda,AwGKA,ACdrB,AW+BQ,AIkBe,AgB7BN,A5M7Cb,AYbqB,A2C+C7B,AxDKA,AiD3CyBzF,AkKhBpB,C5M0FU,AHpEqC,A8EyBE,AG+FV,Ae1EhB,AQCwB,AG6C5C,AcvBoB,AErBtB,AahBG,AvEAiB,AlE4CJ,A0KvCI,AIVpB,AM6CoB,AElBE,AWnB1B,AOoCkD,AlIpFjB,AxEWb,AuDkCM,A5CdlB,A+CoBa,AwJ5DMmD,C7IUlB,AYqC2C,AkBqBzB,AZmEN,AqB/Ef,AgBmCoB,AG3BtB,AYVF,A0BuBqB,AnKqBF,A2KrDA,A4ByBf,ArJ9DU,AoBCkB,AdmDZ,AyJtCxB,ADtBK,CvEoDH,A6DE4B,AvLrCZ,AmCTX,A5CKP,CLSoD,AgG8CxC,A/BdG,AiHyEC,AaVJ,A/JlHwB,ApCwDpC,AYnBU,AuMxCsB,C9H8IC,AuDvF7B,AKYW,A5Ebe,AwHwCE,AgB7BX,AzK9DgB,AqCMF,AjB6CnC,C6BwFiD,AGPtB,AgBjFrB,AuCKyB,AvGpCrB,AiCdoB,CYqIoB,A0DnFlB,AlEmB+D,AyFDtE,AuBiBjB,A3K7EE,AsCqCyD,AxDKnE,CqFmFmD,AgGfzB,AoBzEI,ApJ9CD,CmEEf,AiEkEF,AoBXR,AhM1DI,CNmFM,AiF6Cd,AoBlEoD,A2CkFI,AQ9FxC,AcEG,AQoEO,AEjCS,AoBDiB,A/MtDpD,CsFQQ,AEmLO,AwB7JqC,AiBsB5C,A0B4DgD,Ae1E1C,AOjBJ,AUkC0B,AoBDgB,AzL5E1C,CXyE4C,AiF6CrB,AiHjFhB,AjJAjB,A5DfyD,CO2DnD,A0MjCF,AzK9DuB,CiD2IsB,ARhEqD,ARxB/D,AjCnDO,AoBmDgD,AGM/E,CoFDM,AEQL,ApEWuF,ARxB/D,AiGuB1B,AOjBA,AlHAN,CkBkB8F,A0GgBnE,AkBxClB,ApJ9CV,AJQD,CqC6UJ,AyDlSM,A/IAA,CIrC4C,AgF4MhD,APpJsG,A0GgB/D,AjLvElC,C8E2MT,ACpF8D,AuBzEV,A2CkF7C,AMzIwB,AhFgEuE,A8HelD,ArMtE1B,AYNR,AmCTsB,AG8CxC,C6BwFiD,AuDvF9B,A/DuBkE,COoJ5D,AwB7J2B,AqCFrC,AMoFE,A1EzEW,A8HewB,AnJvCqD,CqBwB7E,AkFrBZ,C1EqFkD,AuDvF5C,AKYE,AYrDN,AxFwCY,AkHwCkB,AlItFJ,CgCsIuB,AwEhInE,AxFwCiD,AnDrC/B,AmCT2B,CgCsIuB,AuBzEG,A2EyBpC,AoBDoC,A3MlCvE,CqFmFmE,AiFjE1C,AlI1EqB,CiD2IG,AkGhDG,AlItFZ,ArDmDP,CuJ4FT,CkDjGM,AvLrCZ,AmCTX,CgCsIkE,AwH7EpD,A3LhDX,CmE6HuB,AkESO,Ae1Ef,AhKtDC,C+EuHO,AhCtIqB,C4F2DvC,ApDaqB,A0FcD,ArK7EjB,CqK6EV,AkBxCsB,CxDaI,A4DFb,CxIX4B,AiGuBxB,AiBiBoC,CjBjB/C,CpJ5DI,CuLqCY,AvLrCpB,C2E+DW,AyEHI,AmCvBR,ACgBb,AGLiB,ChHerB,A6GTM,AGNF,A5M7CI,CiBHE,AjBGR,CuHV6B,AiF4CD,CIWT,AxJzDrB,CiHqEyB,CAAX,Cf0E0C,CAAA,AkDjG1B,A7LdpB,C0JqCI,AmCvBG,AIWI,CAAjB,A3LhDc,CwLqDd,AxLrDgB,CuLqCH,C5BMP,A6BYJ,AGPF,ChCL6B,CtB2F1B,EAAmB,EXhGW,C0BsBZ,CAAG,EoCLrB,C7BZG,C4BNoB,AvLrCpB,CqIsIyB,AsB3FU,A4BNb,ECkB1B,ClF9DyB,A+B6IS,C/B7IP,AiF4ChB,ACkBF,AGPM,A3LhDiB,C0HsChB,A0BsBgB,AmCvBD,AIWd,CjEVJ,A0BsBoB,CAAD,CAAb,C1BtB6B,A0BsBlD,AOjBM,CrDlDqB,AiF4Cd,CjF5Cc,AqDkDyB,A4BNvC,EjF5CsB,GqFuDnC,EAAA,A3LhDK,CqIsI+C,CAAA,ArItIF,G2J2CE,G3J3C/C,CAAP,EqIsIE,G/B7IwC,IAAL,CAAR,CAAjB,EAAqC,CoB6CgB,QpB7CrD,CAAZ,EAA6D,CoB6CI,QpB7CjE,CAAuE,UAAvE;AjHwFE,AH3FM,AkEGsB,AYqCxB,AEoLN,ACrFyE,AK7D3E,AS3BI,ACeQ,AZsEV,AtFjGQ,AsGaJ,AEWJ,ACJM,ACO4C,ACV5C,AEwDD,ASxGN,AKiFD,AErBM,ACNA,AKUP,AGGE,AC0FO,AGjHiE,AGKlE,AEQL,AGKK,AEGJ,AC4EA,AGhFA,AGzDH,AjF6BA,ACkC8G,AkFrBxF,AI+BvB,A9FlCwD,AwB4BvD,A1FiBK,A0KtCO,ACfN,AGIA,AGwBJ,ACqDwC,ACCxC,ACjCQ,AElBC,ACxBZ,AG2CS,A3DrCH,AuBDO,A0C4DD,AC5DT,AzDhBH,A2DM8C,AC4C7C,AEtC2C,AEuCS,ACvClD,ACcE,ApK3DQ,ADeH,AJrB2C,AYAtD,AlCMA,AcR0F,ACItF,AVJ4E,AGI5E,ANIK,AKQA,AIbL,AMiBF,AzBEgC,AYL/B,AmCTF,AoBAyC,AxEYvC,AFqDA,AcnEO,AHDC,A8CgDmB,A7D3B1B,AKiCA,AYpBqE,AQxBzD,AXDd,AbwBA,ANGE,AsEOyC,ADYpC,AV5CJ,AmKMH,ADtBC,CrMQH,AsMQA,CtMR+B,AEAtB,AKQA,ADDO,CoGPP,AgBwDA,AcMP,AIJA,A2B4DiB,AnDtFb,AhHjC8C,AjBElD,ASJA,A0MkBD,ChNjBW,AgF4NR,AwB9JkD,AY5DpD,AgBwDA,A8C+DE,ApD1FF,AyEuDoD,AhNlElD,AcZF,C4E+HE,A0DjGE,AKoBA,AvEaa,AsHmCT,AM7DJ,A7IHiB,CsBFF,A6DHjB,Ac7BI,AjF6BA,AyGmFoC,AkBnCtC,AMxBA,AjJnBF,AuJhDKC,CxI0LwD,AyEjHzD,AvEI0G,AsHyCtG,AMhEJ,A5KlDD,APAA,C4D0Cc,AM4Fb,AtFjGI,AsGaJ,AiCiHE,AQpGF,A6BtBA,AGIA,AGwBE,ACqDA,AEhCE,AarCJ,AQJE,AnLlDF,AMiBN,AlBd+B,AbqDvB,AJrBR,ANGM,CcnCI,AsF0EH,AS3BO,A0BsCP,AhCVA,ArDhEC,AiCTI,AjB6CgB,A7D3BrB,AcZP,AkD4Ca,AwJ1DH,C5MiGA,AH3FA,AsF0EF,AiBnBI,AEHE,AyFX+B,A7HxClC,AhEOX,CkE4K+D,AO5If,AwBmBvC,AqDTa,ApK9Bf,AyBXO,CkDNkB,AyD6DpB,ACNA,A6CJI,AgCON,ApK3DE,ArBOE,AgMQNsC,ADvBK,C5MiGA,AoEyFkD,AyBtH9C,AQAmC,AgCdqB,AKa9D,AqC4DA,A7BtEqB,AkDmCoB,A3LpF7C,ASLI,AMiBX,AzBEgC,AkD+BJ,A5Df5B,CgH8BoD,AiERlC,A8BgCkC,A3LpF7C,AHF8B,AvBmCnC,CYAe,AmEYsC,AiH0E1C,A9IxGE,ApBRD,AuC6CD,CpDqCG,A+DxFgB,AKiL+B,AzEjJ7C,AyGoBA,ACOkC,AqCDtC,AYrDE,AjF6BA,A2GmDE,AoBFkC,AtL5E7C,AIbO,AMkBZ,AyBgC0B,A7D7BrB,ACeL,CsFOoD,AQkCvC,AS3BX,AKCW,AuBgBE,ACNA,AYV4D,AKa3E,ApEUe,A4EpBe,A2CAjB,AEVqC,AOoB1C,AxLnDH,AIbL,AZGmC,CTA3B,A8EwC4C,AEoLtC,AMlJA,AS3BU,AtBwBxB,AoG5Bc,AjLUE,AoB5CgB,CkDNF,AKiL+B,AzEjJ9C,AyGoBkB,ACOiB,A6BmGjC,AW9Fb,AS3Da,AjF6BA,AiGiBH,AIXC,AkBqEP,AGvE4C,AGOhD,AEsC8C,ACvCjC,AxKnDiC,AXCnC,AnBmBqB,AOhBD,CXmC3B,AsGaQ,AIckC,AmBEhC,ACNA,A8CnBF,ASiDI,AarCM,AGkC5B,AICoD,A9LtFf,A2C+CT,A4J9B7B,ChNjByC,AkEGR,AKiL+B,ASwC5C,AgB9JP,AQAwC,A+FwBA,AEzBhD,A7MRiB,AS7CrB,CgIyJsB,AoC3GI,A0B+BN,AKtCE,AnK7CA,AVapB,AnCkBA,C8G0BO,ACJD,AmEhBa,AGIf,AxIzCiB,AzBAhB,AeaL,AnCkBA,AwNhBiB,C7M0EK,AoEyFuC,Ae1GxD,Ac1BD,AIc8C,AqEnB9B,AGwBE,AgBhBtB,AOmCkD,A3LpF7C,AVc+B,AGRnB,CFmFM,AH3Ff,A+F+CN,A9BA6D,AoFIjC,AoDU5B,A7MRqB,C+JHH,A1FH4C,AhDrC3D,ARVC,C6E4EJ,AS7BmD,A0EO3C,ACfa,AM4BE,AEsDd,AOhCK,ApJvFN,ApBQL,AUKL,AnCkBA,CW0Dc,A6EiId,AyCvIa,AhCVA,A4DxBiB,A6CV+B,A7JvCnC,A3BA9B,AiBaI,AzBC8B,AGRhC,AbyBE,CiHmB+B,AkBY3B,ACNA,ApDrBc,AiGiBa,AIX3B,AqBF0D,AlK7CF,AtBMhE,CPyFM,AgLH4B,AnJ5F+B,CiCmDR,AkHyCtB,AsB3BvB,ChGT0B,A4B6G5B,ApElHgE,AiINlB,AMM/B,A5L7ChB,AKQA,AUKL,AzBC8B,AViB9B,C+EmJ6D,AiCtHX,A+FwBA,ChI8FW,AiCtHX,AhCzBjC,AiHoDM,AShDW,AK6CgB,AlKpFlB,AVa1B,CmDyBA,AbO+C,AwH0C7B,Ae1CJ,AnK7Ca,ALNiB,ApBMpD,AKQA,ArB2CqB,C4GS+B,ACVZ,AjCfZ,APU2B,AkHyCjC,AoBF8B,AEzB1C,AzKjE2D,CwEkEjB,AwEKxB,AGqBW,AoBFa,ACvCrB,A5MM7B,AJpBO,C4FmGS,AqC/CF,AhCVA,AvF3DsB,CoF0D/B,AtD9E6C,CyHYvB,AgCiFJ,ApJvFb,ALNwC,CmJ4FT,AsB3BjC,AjN7BV,C+EoJ+D,AevG3D,AmGY6B,AgB5B7B,C/BtBiB,AxKvBiB,CqEoKyB,AkD/FhD,AgC7EI,AhEmEJ,CiFpCT,A+BsBI,A7L3DM,AKQH,CwG2EW,AgC7EW,AhEmEX,AuFRG,EzGiHkD,AyGjHpB,A9KnDnB,CoF6D3B,A+D1BqB,AnJnCA,CoF6DpB,AmHhBF,A7L3DV,C6L2DI,AxLnDJ,CwK+EyB,A7KvFE,AVcW,A6MtBevC,CtB+F7C,AxK/E6B,AUKnC,AoLrBoD,CtDcnC,AgDqDf,AMnEmD1J,CtDcvD,AgCiF8C,ApCtCd,A1HpCH,C2D8DzB,AmCQW,AhCVA,A4DxBiB,CjEiF1B,AxElIN,AVcsC,CkFoHpC,AqC/CgC,AhCVA,AuFRP,A3BhBW,AnJnCN,CUdY,CwEkIJ,A4FjE6C,AyBN3E,AMnE2C,CzHmF9B,AmHhBX,AvM7CoB,A6MtB8BsB,CzHmF1D,AmBzBgC,CzF3CoB,CyF2ChD,AgFqCA,CnGVJ,AkD/BqE,AiD0C9D,CzKjFG,A+Lfb,CvEsDwE,A7GjC5C,AzBCS,CmJmCA,AnJnCG,CiLwEF,AsB3BnC,CtB2BqD,C9BrCnB,AoDUlC,GvM7CkC,CAAN,ImJmCM,CoCuCZ,ApCvCY,GoCuCT,CpCvCS,E/D4BxB,A+D5BF,CoCuCqB,CpCvCK,CAAA,I/D4BjB,CAAC,CAAD,CAAjB,A6FSmC,C7FXnC,A6FWkB,CAAZ,C9BrC4B,C/D8BlC,A+D9BkC,IAA1B,EAA0B,UAAA,GAAA,K/D8BzB,CmGSgB,CACjB,CpCxC0B,CAAA,IAAA,E/D8BlC,A+D9BQ,E/D8Ba,AmGSI,ApCvCW,EoC4C5B,UAAC,UAAD,EAAW,UnGdoB,OAAlB,EAA2B,SAA3B,CAArB,CAPJ;AnFkBI,AH3FM,AuEmLqD,AO5IvD,ACyFR,AjCtIF,AkCkOI,AE0HA,AIrQH,ASlCC,ACeW,AZsEP,AclGJ,ApGCS,AsGaH,AEYF,AIHF,ACmDG,AOlGL,AEND,AKiFG,AErBI,ACNA,AQaP,AC4FS,AGpH8F,AGQrG,AEMC,AGMM,AEET,AIJA,AGzDC,AjFgCE,AC+BD,AkFtBoC,A1FHuC,AwB6B1E,AyELE,AOhBU,ACZR,ACSE,ACcA,ACtBH,AGwBD,ACoDI,ACCW,AChCT,AElBD,AIwBmB,A3D1C7B,AuBFkB,A2CCf,AEXqE,ArIiCnE,AsIYF,AErCM,AGDJ,ACgBA,ACvBJ,AtKtBU,AJvB+D,APGrE,APAA,ANGuB,AKSjB,AIbN,AMiB+B,AzBCa,AYJhD,ADAE,AwDTI,AxEYP,AYfS,A2C+C2D,A7D1BjE,AKiCA,AoBTJ,AwCWI,ADDM,AyJrCRiI,ADvBCA,EtDcD,A3IGA,AkMMAA,ADvBCA,CpEuCM,AlEmCP,AkFnBO,C3JjDG,AuEmLqD,ASyC7D,A0BnKA,AiCxBF,AnEOE,AXiCE,AsIYF,AtL1EA,AtBSA,AKiCA,A4DEA,CmD0CE,A6BlDkD,AmBEf,A0BL/B,AnL7BC,CC4EL,A2EpDe,ACyFb,AKIF,AclGE,AI0BF,AKoCS,AOtFP,AsBkCJ,AQuBM,AS3DJ,AkB2CI,AMoEoC,AI5EtC,AgBKE,AIeJ,ACvBE,AxMzBJ,C8F4CQ,AlG1BF,A6G+DN,A6BpDA,AvEE4B,CMqIiC,AWmKzD,ApFnTI,AsGaJ,AqBqCE,AErBF,ACNA,ASyGE,AQtGF,ApDcE,AiFjCF,AO6EsC,AE/BlC,AarCJ,ApLlDqB,AKSjB,AoDRJ,A5DHiC,CTC7B,AuEmLqD,AWmKxD,AavSA,A0DvCA,AhF+DA,ARzBuE,AkIuCvE,A/IvC4D,A7D1B5D,AyBwBT,AgM3BS,ADvBC,C/MME,AwEwCF,A0F8BA,AcHE,AkB3B6D,ArIiC7D,AzBvDA,AXpBD,APAA,AJaD,A0C4CA,ADDA,AyJrCAC,ADvBCA,CxIyLsD,ASyCtD,A2FzKI,AMoE2G,ApH9C7G,A7B9EgB,AzCyBpB,AiEmCE,Ce4HsD,AqGlHnD,AuBoBF,AMtBA,AzKpES,AlBgBT,ADAA,AwDTA,C2B4DO,AvBSN,AyGiDQ,AsBzER,AEPE,A9LvCc,ASJhB,AMiBwB,AdHxB,AmMMX,ADvBC,C/HkOW,A0BnKA,AlCjBA,APMkB,AwGQZ,AEHwB,AtBDnB,A6CVoD,A7HtCjE,AjB4CyD,AxDOvD,AoNpCA,ADvBC,CxIyLkD,Aa/ClD,AtFjGI,A2HkDF,AkCpCR,A1FHQ,AwHgDa,A5HrBlB,A4IVG,AhLjEC,APAA,ADYG,AyBrBR,A9CgEI,COsCC,A0I9BA,AGMI,AWlBlB,A1FHe,AyGJD,AS8CI,AehD2D,ArIiCzE,A6IjCY,AnJcF,CpDqCC,AwH3BA,ACNA,AoBSI,AvDQF,AyELF,AQ5BA,AQ8EQ,AcrER,AQJA,A3LpCb,AuCmCiE,AGQpD,C6B8EC,AtFjGN,AsGaM,AqBqCE,AY8EA,A6B7FV,AeiDuH,AxJzH9G,APAA,ANGU,AKSL,AUIiB,AdHvB,AGiClB,ChB5CY,A+F+CF,AKCS,AEYA,A+BuGE,AQtGoB,A+BI/B,AKsDuH,AE/B1G,A9BtCO,AgDFP,AIeJ,ApLlEN,AMiB6B,AlBfU,CsEiI9B,AmB9FA,ApGCE,AoHzBF,ASsDF,ACNA,AnDaA,AgBID,AkFxB+B,AqBAT,AKHjB,AjK9BF,AfrBT,AmC0DT,CrDoCE,A6IxBI,A2BhBwC,ACc3B,AxI/CA,AM7BR,A9CgEX,A4DEiB,ADDA,CpDqCC,AH3FU,AsG4DV,A0COI,AyBbV,ApBJc,A5InDsB,A2C+CiB,CpD9CzD,A8EuC0B,ACyFb,AC4FrB,AkB1LqB,AEcjB,ActCiB,AmByJf,AQtGN,AqBSmB,AiBkBX,AvKvFiB,AKSD,CsDyKqC,A6BnIzC,AuBgBhB,ACNA,ASyGkB,A7D3HF,AiGcM,AuBH1B,AGkCQ,AKtCY,A/KjDC,APAA,ANGI,AeaQ,AlBfe,AbsD5B,AmN3DrB,CxIyL8D,AC3IxC,AiHsDe,Ae/Cf,ApK7Bb,AXpBc,APAA,ATC0B,CqEwCd,AwBqBhC,AqETI,Ac2C+B,ArJ5Eb,AxBjBC,AmMPFG,CxIyLsC,AkD9FpC,ClD8FoC,AO5I3B,AuHS5B,A3J3DK,A9CgEX,CmGNK,AKCD,AqBqCJ,AY8EM,A7D3HI,AkGEE,ArJ7CH,AqBRE,AqKKZ,CvI8C2B,AkGEtB,AeoDsB,AxKpFlB,AIbO,ARcD,A6BtBH,CqD0DoB,AiDoBA,A0BzBJ,AO6ErB,AQzBoC,Ae/CxC,ApK7BM,AoBqCR,AwJtCF,C3DiC4B,A5HpDX,APAA,AwBTJ,CoCkDuB,AkG4BH,A3BjBL,AmDHG,A/KjDC,APAA,AwBTnB,CwCiWP,A8DnR8B,AvEIzB,AyFDP,AxHjFS,CsG8EwB,AxE3BzB,AiIuBC,CzDIoB,AxE3B/B,A0F8BgC,AcHE,AvKpE5B,C2EqIJ,AqHrEA,C3HxBgC,AI+SA,AmEpSnB,AhIrDN,CyD0CyB,AkE4BK,AvEIJ,AhDzEC,APAA,AGDb,CqJ6CnB,AMyBkC,AvJrED,APAA,CwJ6C/B,C5FJ+B,CzD1C5B,AkCyDI,ClCzDU,CoIWH,AiBmCV,AQ6EO,AO1BuC,AiBtDxB,AjL1CjB,APAA,AqCwDH,CuBfsB,AWoCnB,AyF6CoB,A3HlE7B,CkBiBD,AgBIc,AhE7EyB,APAA,C8HqEtC,AyC2BqD,ApKjGlD,CyD0CgC,A2E/BpC,AhF+DwC,CgF/D/C,ApIX0B,CyD0ClB,A4HCQ,C3HwFyB,AmB9FA,AgBxBA,AwF8BzC,CjHmCiB,AhE7EmC,APAA,CuE6EnC,AhE7EoC,APAA,CGD1C,C0DmIY,AmB9FA,AgBxBA,AzBiEI,AyF6CR,CnGQnB,AmB9FA,AgBxBA,A7FbiC,C6J2HgB,CzJ1HhC,APAA,COAb,APAA,EuKgGuE,AhKhGb,APAA,AGDnD,CoKiGiE,ApKjGxE,K6DyV4C,AgG9N7B,AO1BwD,EP0Bd,AO1BsB,KhGnBnD,GuFRI,CAC9B,AEoDa,CAAA,AO1BwD,EAAoB,CfnDvF,CACE,EjF+BiB,CAAV,CAAf,CuFRkC,EAE9B,CSyBqE,CvGwPvC,CAAlC,AwF3SM,AemDmG,EvGwP/B,AwFzSlE,KMwBH,CAAD,EAAK,ASyB0G,EAA1C,CAAjB,CfjDhD,EeiDiH,UAA/F,CAAA;AtLFtB,AH3FI,A8EuCV,AEqLC,ACtFC,ACgNE,AavSF,ACeU,AZsET,AcjGH,ApGCU,AsGYL,AEYF,ACFK,AENA,ACON,AQjDF,AO2EE,AErBI,ACNA,ASyGC,AGpHJ,AGQJ,AEMG,AGMM,AG+EN,AMzIF,AjFkCE,AC4BA,AkFtBH,A1FJsF,AiGyB/E,AnKsBF,A0KtCY,ACTJ,ACKJ,ACgBE,ACvBP,AG0Ba,ACiDR,ACC+D,AC/B7D,AEhBJ,AIqBgI,ApC3CxH,A2CCZ,AzDhBJ,A2DIsC,AC6CpB,AEpCR,AGDF,ACgBF,ACtBJ,ArKxCY,ADmBF,AJ1BoE,AYChF,ApBDI,ACII,AVJJ,AGII,ANEqB,ASHxB,AMgB0C,AzBE5C,AYhBiD,ADW5B,AwDXX,A3BViB,A/C8E5B,AcrEQ,AHIE,A8C2CoF,A7D7BvF,AKqCL,AYzBF,AQtBF,AXeG,AbCS,ANaR,AsEoBD,ADDM,AV7CL,AhE3BJ,AmOmCE,ADvBC,CjMKI,AEOP,AgMEA,C1MNY,CkIwCV,AtI9C4D,AXoB5D,AyBVF,AwCiCS,CxDvCG,A0G2DR,AlChBA,AC4BA,A7ElBA,AJ/BQ,AgEiBV,C4B2FE,AkBzEA,ArChBE,A4GLF,AKkFc,AvJzGd,CmD0BE,AI+SA,AgBnTE,A8CgCE,A/E3BN,AlEoDE,A4K1CW,AMoE6B,AoBtEpC,AIeJ,A7L/DuB,AiCSrB,C4I+EuB,ApHzFzB,ClE4FE,A8E2CE,AcvFF,ACeM,AlG1BF,A6H4BJ,ACNA,AiBGA,AMqFE,Ae5EF,ASpBS,AQsCL,AarCJ,AQJA,AhLrDA,ATAA,ANI8C,AD8BpD,AtBOM,CcnCI,AkHUH,AuCDA,AgCqFK,AlD3DL,A2DI4B,AQE5B,A1KjD0B,ArC2E1B,AyDtBuF,A5DvBpF,ANaH,A6NzCCA,C/MME,AuG0DE,AENE,ACON,AlChBA,AoGuBE,AvBhBI,A1HrCgC,AnCSpC,C4F8GD,AsBzEA,AiETiC,AUsB7B,AzKxEc,C6JsDX,AOeA,A3IpEJ,A0KPX,C7IO+B,AYsCrB,AoBJE,AiGiDG,A3K1FL,ATAA,AFgBW,ALkBtB,C2IsHc,A1E3EF,AiG1BI,A9J7CW,AeY3B,AyBiC8F,AxDQlF,AVlBA,CqHuBK,AiGXJ,ApK3BE,AxBpBY,AhBqDd,CkFdC,AG+FE,AiBnGA,A8CgCE,AjJyBJ,AsM5CI,AGDJ,ACgBA,AjM9BZ,CL0Da,A+D1FiB,A8EkEb,AG+EF,A1E3EF,A1EqBA,A4K1CiC,ACgB/B,AyBlBE,AIeJ,ApK9DC,AKZY,AjCSiC,AHInD,A8C2CoF,C4CiBxE,A2BEN,ACNA,AiBGA,A8BXgC,ACgB9B,AIGI,ACiDkC,AenExC,A3JlDC,AbPD,ATAA,A2BLY,A/C8EZ,AWjEN,CHyFO,A+D1Fe,AeqIb,AexEI,AlG1BF,A6H4BJ,ACNA,AsCYA,AiBkBI,AzInGO,AlDiClB,C0FgUQ,ApFlTI,AyGsBA,AENE,ACOtB,Ae0BK,AgD/BiB,ApBJA,A5IpDqC,AvBqC3D,CcnCQ,A+F+CS,AWaf,AmCCe,AMqFE,AsB5FI,AOeY,ACiDmB,AQxB5C,ApC5Ca,A2CCN,AQJb,ACgBF,A/J1EwB,CwBYI,AgGqEZ,AQzBR,AEqBF,AOsBc,AsBzBJ,AjLrEd,ATAA,ANIuD,A2C+CiC,A5CZ5F,AhBX6B,ANaX,CgGmTC,AuBlSM,AS1CN,ASsDf,ACNA,AsCYA,AUJiB,AKoDiC,AI9C3C,AjJpDH,AzC+CH,AcrEsD,AbuD3D,AYpBA,CRjC2C,A+F+CP,A4BiBhB,ACNA,AuBwFL,AuBrGS,A8BEH,A7MoBD,CuElEU,AYsCT,AhFHb,A4GwBF,AsCOA,AKjBM,AgDFN,CtGDN,AjGX0B,AoHzBxB,A2BkDF,AMqFA,AyBhFQ,AvBhBoB,A2CC5B,A3JlDU,AbPY,ATAA,AnB2DA,CsEpDQ,AYsChC,AkBuBY,AmF0BF,AgBJM,A7LlFN,AE+BR,AhBXQ,CQtBA,AyHqFK,AgC5EA,A1JmFX,AkL0BoD,A1CnF1D,AkE4B4B,ACtBX,ApMvCL,AE+BR,CyEqG2B,AnFlGnB,A2HiDM,AErBV,ACNA,A4EXA,ACgBqB,A9MIpB,CuElEyB,AeqIF,AuHvFD,C/HwB3B,AuGF6C,A3BnBjC,AdfY,A/GzCG,ATAA,AFgBW,AlByDV,C8Kbd,AEJR,AKmBuC,AnK3DN,AJZjC,ADmCN,CyKqFsD,AuBvElD,CvBuEkD,AzJ5HxB,ATAA,AnB2D9B,C6GDyB,AjF1DzB,ATAA,CZiGgC,AoGjCtB,CtB4EiB,AgGhB8B,AzJ5HxB,ATAA,APuC1B,CyEqGP,AwE7Hc,AuB4DA,A0B5BA,A7L/BwB,APR9B,CHyF2B,A+D1FL,ArDSV,CqDTU,CgBqV5B,AqB5RwC,A0E4DY,AwBvDpC,A/J1Ec,ApCalC,AE0BA,CL+DkC,AoGjC1B,AW/CC,CuFoDL,A5LrDgD,C0FgDL,AkDjDhC,AwB6GgD,AyB7EhD,CvMkD4B,AUjFW,C4ID9B,AwB6GhB,AyB7EgB,C7L/BF,A6BrBkB,CwBYR,AxBZS,EwBYT,C5DCX,C4FiCU,AxD9CG,EvCqGd,A+DzF0B,AxBZlB,CwEsBN,AxEtBM,CwD8CZ,AgBxBM,AuCFP,AiDgCA,AhKpDa,CwD8C5B,CuD1BkC,AiDgCA,GxF9BzB,A5GTT,C4GSsB,CRiDlB,ApG1D0C,CoG2DxC,GQlDgB,CAAb,CO0EwB,CP1EX,IRiDlB,EAGE,AesBU,CAAD,CAAb,EAA0C,MftBrC,GesBL,CAAoD,CftBhD,EAAM,GQpDU,EAAA,EAAA,AO0EpB,mBP1EwB,IAAJ,CAAA,CAAb,CAAL,EAA6B,wCAAiB,cAAjB,CAA7B,CADiB,GAEjB,mBAAQ,UAAC,MAAD,EAAS,UAAT,EAAmB;A/GgFzB,A+D3F0B,AYwChC,ACuFM,AjCtIR,AmC6II,ACgNE,AcxRO,AZwEP,AclGJ,ApGAS,AwGwBR,ACFS,ACEV,ACRU,ACUO,AC+Cf,AOjGI,AOyEJ,AErBG,ACNA,ASyGA,AGpHN,AKcG,AGMK,AS1DL,AjFsCA,ACwBD,ARxBA,AwB2BC,AyEJG,AnKsBF,A0KtCa,ACTF,ACIN,ACiBC,AIEO,ACiDR,ACEN,AC/BO,AEfD,AIwBM,ApC/CD,A0C4DD,AxD3EZ,A2DGuF,ArIkCnF,AsIW0B,AEnCvB,ACkBC,ACkBR,ACrCK,ACkBD,ACxBF,ArKxCS,ADmBF,AJ1BH,ARAF,ACIC,AVJD,AGIC,ANCuC,AKW1C,AfKF,AWNwD,AwDPrD,A1EiED,AWjEA,A8C2CA,A7DzBH,AKiCG,AVlBE,AsEoBL,ADDM,AV7CC,AhE3BR,AmOqCA,ADzBC,E7MqBC,CoGWO,ArCYA,CqCZP,AmB2DE,AoBxBA,A5EvBF,AiHiFE,A8BpGEuC,C3E6HA,AWzFA,AjJHiB,AoM+BnB,AEzCE,AxLjCF,CiE+BI,ACuFA,AGuNF,AEhNA,AoB1EE,A6BmFJ,AWzFA,AjJFA,A4KHa,AMoEkD,AI5CzD,AkBWF,CzMrDE,AoKqCJ,A6B0CQ,AGxEN,AGWA,ClM0CA,A4EoCA,AwBrEI,AImDJ,AnC9DA,AiB2BE,AwF2CyD,AQpBnD,AiBxDN,A1K/CF,AfgBA,AXRE,AuCOE,CqD2BH,A6F0EK,AxD3EL,A2DGkF,ArIkChF,AT3BF,Cc7CyB,A2E6DxB,AwCYI,AoBRJ,C1H8DwB,AEOvB,A4DzEA,AoCwD+G,AyB5E7G,A/M0BF,ACdA,AVlBA,C4FKG,A2FcI,ACTF,AMuBU,Ae0CZ,CrFhDK,AwDQN,AmBGI,A9CtCJ,A+D+BkB,A9KxElB,ATAA,AEgBA,A+LSE,C9InBmB,AuDqFpB,AiF5CE,A/M0BF,CQwBC,A+D3FmB,AYwCZ,AI8SP,AqB5RI,ACEF,AiByBF,A8EDE,A5MjBF,AkD1DIvF,CqD2BH,ApGAI,AyGsBA,A2E6DJ,ArH/CV,A7B9EU,AgLyBE,C7MwED,A+D3FiB,AgCoCjB,ASyEb,A0EpCM,AiBPqB,AlJrB3B,AlEVE,CgFnC4B,AgBsVhB,AsB1RE,AiByBhB,AwDgC6H,ACE/G,AqBnCE,AvK1FJ,C8C8CU,A0BoBN,AEEK,AC+CN,AcxBA,AwDgC8G,ApH7C5G,AwI9Bf,AE0Cc,A/K1FP,ATAA,CZiGO,AoGjCR,AsCGR,A4BPsB,AELK,AKmBG,AqB3B9B,AKAkB,AlL/CT,ATAA,AEgBT,AXRkB,A8C2CF,AlEVA,CgFnCc,AqC0DT,ACEL,AqCEd,ArEfe,AiB2BE,A8GUH,AG3CG,A/M0BZ,ACdP,CwFiFkB,A8FjBJ,AjK3GI,AtByDA,CQwBC,A+FvDd,AKsBG,AkEJiB,AELE,AKmBQ,AS6BR,AMaN,A7L/FF,AIbE,CkG0DL,AEEK,AlCfD,AiB2BE,AsGoCA,AQ1BN,AnJvCI,AlEVlB,CkGmGmB,AqCjDA,AoBvBf,A8BbqB,A8BgBzB,AvMlDiB,CgGsBjB,AuBgDoB,AgEYQ,Aa/BH,C7BZb,AiCbd,A7JhCQ,C6DqDO,A+CrDN,CjFsCT,A8HmB2B,A9KxElB,ATAA,ATQY,A8C2CI,Cc7CK,AgCqCxB,AyEYqB,AcgDf,AzJvGA,ARAG,ATAA,ATQM,C4DFS,CwC8Df,AqFgDL,ApM3CS,AyDtBnB,APpCgC,CqBTF,A8GoEe,C9GpEf,AuCoDZ,AiEPgB,AMuBW,ACiDvC,CxDhCS,AkDpCY,ApCdtB,CdkD2B,AhCXV,AkFzBK,AhLkBT,C4IhCpB,ArIpBqB,A8MIK6E,CtG2CH,A+CrDrB,AsCqG8B,ApM3CA,CsFmEZ,A0FrFY,ArK/CT,CmJOA,A9J0DH,AWjES,CwEsCT,A2BYV,A5CoBN,CiBhCkC,AoC5Bf,A8DwDP,Ae0CJ,ApM3C2C,AkD1DjD,CqC6UF,AuBlSyB,ACUN,AeuBN,CrCiDb,AqCjDF,AkDpC2B,AnJvDlB,ATAA,A8BemC,CrBff,ATAA,AiMyBf,CjB2FgB,CpB7DK,AqC9BD,CxGyCL,AEER,AqFgDS,AQ1BD,C9FhCrB,ACUO,AiEbT,AnJvDG,ATAA,CuLwEkB,A9KxEE,ATAA,ATQR,CAAgB,CwEsCA,AG8F9B,AiBjGL,AQyBmB,CRzBO,A6FyEE,CvKpHrB,ATAA,AiMyBK,C1MjBO,C2EoIc,AzD5IL,ATAA,ATQO,A0MiBMI,CxGyC3B,AEEK,A4FIM,ACkBX,C/FxBA,AEED,AqFgDe,AO5CH,ACkBX,CxH2CmC,AgHjBzC,CO5CwB,AhMhEb,A0MiBP,CtG2CC,AsG1ClB,ClIoBuC,AiHsEN,AzL5GQ,CyE6HR,AmB1FD,A2CyB3B,C/DtB6C,ACuF3C,AyBnEmC,AqCGnC,A0DqBmC,C/K1F9B,ATAA,E2FoEY,AqFgDS,AvKpHW,ATAA,CkE4IN,AuB1EnB,AEEO,AQlDF,A6EkGX,AQ1BM,CrFxEO,A1FlBd,ATAA,EgLoHqB,AO5CI,A9KxEW,ATAA,CyFkEN,AEExB,A6FsBwB,AjMlFlB,C4FmCO,AQyBA,AqFgDE,AzL5G9B,CkG0DuC,AqCErC,AYrDoC,AsCqGR,AO5CI,ACkBK,CrG/CA,AgBzBlB,CAAA,A2BoDjB,ArHtEK,ATAA,CSAP,ATAA,C2FoEa,AQlDc,A6EkGC,CvFlDS,AEExB,AqFgDL,AQ1B6B,IDlBL,C9FNK,A8FML,ACkBK,C/FxBvB,A+FwBA,C1DpBX,ErCJkC,A8FML,ACkBK,E/FxBvB,AuFkDc,AO5CxB,ACkBU,AShEN,CjB0FA,CO5CwB,C9FNS,A8FMT,ACkBS,AShE9C,CADiB,EnE6CV,AmE3CP,C9FTqC,C2BoDnB,EYvDuB,CAAE,G6CyDN,CAAA,E7CzDI,CAAA,C6CyDhC,C7CzDwC,C6CyDZ,G9FNpC,A+FwBA,KS/DM,GV6C8B,GAAA,GU7CrBC,CvDZuC,IvCGH,AuCHH,AuDY1C,CvDZkC,A6CyDJ,AU7CfnC,CvDZE,A6CyDa,AU7C9B,E9FT8B,AuCHkD,AuDY9D,C9FTO,CAAR,AoFsDa,CpFtD9B,CoFsDE,CpFtDmD,CoFsDrB,G7CzDf,CAArB,EAAgG,GvCG5F,MuCHJ,CAA0G,UAA1G;AtJgFkB,AHxElB,AuEiKF,AOzIE,ACsFI,AC6FN,ACtF2C,ACiNxC,AcxRM,AZwEN,Ac/FG,ApGFI,AsGUN,AEaL,ACFU,ACET,ACRU,ACS0B,ACqDhC,AOtGC,AOyEJ,AErBE,ACNA,AS0GF,AQpGO,AGKP,AG8EC,AM1ID,AjFwCC,APFH,AwB2BK,AyEJE,AnKuBJ,A0KvCc,ACTH,ACKb,ACgBO,ACxBL,AI0EM,ACGN,AC/BK,AEfA,AIwBO,AMaF,AC3DV,AzDhBH,A2DGS,ArIkCJ,AsIWH,AE9BC,ACYW,ACmBb,AG3CE,ArKxCO,ADmBF,AJ3BY,AYCrB,ApBAK,ACIA,AVJA,AGIA,ADYC,AIdF,AMciF,AzBI7D,AWLpB,AwDPD,A1EgE2D,AcrE1D,A2CgDD,AxDQA,AY1BS,AHLV,AbQE,ANOU,AqEEO,AV9BTpD,AhE3BZ,AmOuCE,E3MCA,C6GZI,AOuEG,AYsDA,AWpFP,AS5CO,A0C0EP,AvMjCA,CsHxCA,AOyEA,AYsDA,AoBhIA,A1JsFE,A8KnDA,AK6EA,AmBlEA,A1K3CiF,AnBiBzE,C0EwTR,Ac5Ra,AUGX,AiBPF,ACFA,AuD8BE,AETE,A5J5EJ,APAA,AqC6CA,CgB0II,AQnDQ,AC6FV,AgBpKI,AIRJ,AIaE,AGsDF,AsEE6D,AcNrD,AQ1BN,AtL1EF,A4BDMA,AmKYJyD,C7MmEF,AuGxBE,AkEhBA,AOyCA,A/IrFA,CpCYA,AkGuBI,AOaA,A0C+FF,AyBpGO,AakDD,AO9CN,AEbA,AQGA,AxM3Bc,AOjBhB,AjBiCA,CmLoBC,ACHH,A/GyBK,AsIWF,A9JzFC,AhBED,AMc4E,AnBiBzE,AHLV,A2MDS,CnE2CG,ApDUJ,A1FmBA,AiCpGW,ALiBgE,AnBiBzE,AHLV,AnBeY,C4FGH,AI8SA,A2DtRI,ApDUJ,A1FmBA,A2KlDG,A7JlCH,C4J6CO,AIZN,A3K5BY,A8MOVL,CjIyGS,AEOsB,AnFhG5B,A+KKJ,AhH8BP,A7B/EkB,APKX,APAA,ADYA,AtBwDiD,AqN7C/C,CrG6FD,AwCiCE,AwBjGF,A2BeO,AtKxEI,AfiBX,AIdV,A2LyBY1J,CzI4JC,A2B1IE,AS2EJ,AuD5CA,AgChCE,AzKxCF,APAA,AhBgBS,APoDwC,CoF4DzC,AqB/EP,A2F+DQ,AlItCN,AlEN+C,AcrE7D,C0IsJe,AuBtGE,AqBiEI,AGxEN,AlK7CE,AXGJ,AnBkBO,AWLpB,C0DwKgB,AOzIF,ACsFK,AmBvFY,AOab,AkEFJ,A3IzDW,AfiBvB,ARbY,CqE2CC,ACsFI,A0B1EA,ACYf,AmCAE,A8BdD,AOqEU,AC9BX,AuBhDa,AzL/BF,AUAkE,AtBYnF,AbQE,CwF6LF,AoB5KkB,ArG8ChB,AsMxCgB,A5KvDP,APAA,AvBoEmD,AU5C9D,AnBesB,A8NhBV,CnE2CW,ApDUJ,A1FmBA,AkLuB6D,ACG7D,AOtBQ,AO9CN,AKEF,A1MayC,AavClD,AhBGS,AwNTEsB,ChIsMD,ASjJA,AkFvBhB,AETF,AyBuBuB,AIxBH,ArL7CpB,AMciF,CoDoH7E,A0B1EI,AoEVW,ApJ5CA,APAA,AhCuCM,CYAjB,A2GegB,AyDkBpB,Ae8C0E,AejExD,AxLxBd,AHLV,AwCb4B,CqD8BY,A1BU5B,AuH6DA,AO7Ca,ArLvDrB,CgE2HoD,AiB9Ff,AS2ErC,AsEE4E,ACAhE,AgB9EU,AQGA,AMpB1B,ChNLc,AiFqH2C,AkEcvC,A0BzGO,AqBJE,AlK7CS,A3B6BpC,AwCb+BqF,CiC+BtB,AiBWE,ASSiB,AfcxB,A8GUwB,AvK3FS,APK1B,APAA,AhCuCoB,C4FGJ,AoBDM,AiD4GhB,CjD5G4B,AEQjB,AKKlB,AhBsBkB,AgFpBM,AyBhBjB,ArIkCb,AwInBF,CtGFU,AKJiB,AIaE,A2CuFqB,ApJtDlD,AkLuB8E,AoB9D5E,AE8B2B,AG3CT,A/K/B6D,C6EkDpD,AhCXZ,A0HZsE,AK+C1D,AG3CC,C1MzB1B,AwEiCc,A/CnDW,APAA,ClBkB7B,AiFqHsD,AuBzEzB,A+FwBA,CF9BvB,AKbc,AlMdZ,CRXa,AiFqH2C,AgGjBc,AejExD,AMcC,AIxBvB,A1KhDyB,CwEmEK,AyEwDgD,AqBnDvD,ACmBO,AvK3Fc,A3B6BtC,CmE2BW,AtFZP,C4FGH,AsBOS,A3EjDmB,APAA,A2BW3B,CiC+BR,ANSyB,AmGCpB,AMkE4E,C7ErE/E,C7BkI2B,A2B1Ic,AoG0BhC,A7KnE2B,APAA,CyJsDpC,C1FiFoD,AgGjBwB,ChGiBrC,ATpFX,AnE3BhC,CkE2JkB,AiCrHuB,A+FwBA,ChI6FzC,AiCrH0C,AhCXvB,AyGmEoE,AsBhC7C,AlM9DV,CmGsCS,AhCXvC,A+HmCuC,C/FxBV,AyEwDvB,AsBhCuB,AvK3Fe,APKC,APAA,CsDmDV,A/CnDW,APAA,KsF8DO,A+FwBA,A9KtFf,APAA,EOA7B,APAA,COJT,APAA,CsFkE6B,AhCX7B,A+HmC6B,C/HlC3B,EmGEQ,CnEQ2C,A+FwBA,C/HlC/C,CgCU+C,AqElBlC,A0B0CkC,C1B1CX,IrEkBW,A+FwBA,E5BhC1C,C0BET,CACE,C7FKiD,A+FwBA,C/FxBxB,AqElBV,A0B0CU,E5BhCnB,AEV4C,CrEkBD,A+FwBA,C5BhClC,CnEQU,A+FwBA,C1B1CV,ErEkBsC,AqElBG,AwBY1D,AE8BuD,EF5BrD,E7FIN,A+FwBA,E5BhCY,EAAmB,EEVV,CAAnB,GwBcI,I7HNF,CACE,UADF,EAEE,UAAC,UAAD,EAAW;AxEnCb,AuEiKJ,AOzIC,ACqFK,AjCrIR,AkCmOI,ACvFyE,ACkNvE,AanSA,ACWG,AZwEN,AchGkD,ApGD1C,AsGUN,AIaH,ACRU,ACYF,ACkDJ,AOtGL,AOyEA,AY+EA,AQpGW,AGKX,AG8EK,AM1IL,AjF6CS,ACiBR,AgBGM,AyEJD,AOhBU,ACLD,ACGR,AEVL,AGyBO,ACgDA,ACIN,AC9BM,AEhBH,AIwBQ,AMaF,AC3DP,AEbI,ArIkCJ,AsIWF,AE3BM,ACSE,ACmBV,ACtCI,ACkBA,ACpBF,ArK3CK,ADmBF,AJ5B+C,ApBMlD,AKYE,AIdF,AMFK,AdeN,A6BvBS,A/C+E0D,AcpEhE,AHIF,AE0BQ,AHLR,AbQE,A+DwBH,AV7CM,AhE3BT,AmOuCE,AD5BK,GjI6Ce,AkBYT,A6E1BJ,AQOH,AxK/BmB,A0CmChB,CuBGP,A+FdA,AK+FE,AG3FF,A1JlCO,AnBiCG,A+CQV,C0BiGS,AmB/FP,A2FgEM,A3JvGJ,AzCmEK,AWhEN,AuCMG,C7CSF,AuEiKE,AQpDiB,AGyNnB,AanSA,ACaE,AQJA,AEIE,ACkDJ,AwCiCA,A3E7FI,AyG6DiF,AehErF,AKKI,AE4BF,ACtCF,ApKjDF,A3BAE,AjBiCA,CiMuDyB,AM0BnB,A1JvHI,A1CyEwD,CsFmEQ,AwBhFpE,AoCYA,A8BZA,AM+D+E,AQ/BjF,AS9CA,AQMF,ArKpDA,AzBMA,APwBE,CoEiDD,AZCE,AxC5EF,AMFA,AnBiCG,AwMNH,AD5BOkD,ChIoIa,AoGpCf,AgBNJ,AGlBE,AGDF,A9KtED,AeRG,AlCyCA,CRXF,AgF2MC,AyFzKK,AQiE0G,AzLrFhH,AqDrBK,C7COJ,A0GgDK,AyCmFJ,A1DzEA,AiFzBI,AMkBF,AtIjFF,A/C+ED,AHnCA,CuF+FkB,AmBvFwB,AiD6GxC,AwB/FI,AuBdF,ArIkCT,AjD1EO,AjBmET,CgHiDU,AwF/BA,A9KvFV,C0DiIyB,AmBvFwB,A8FatC,AEbE,AvK5CR,AeRqB,ArCoCb,CLNX,A+E6GuB,AiB7DpB,AUAW,AmCAA,A8BZA,A9GoBF,A2I1BF,AEFA,AjM/CA,CwEuIZ,A0BlBa,A8D5DM,AEFf,AoB2DK,ASjEI,AnLlDA,AqBVa,AjCWb,AHIA,CkEqDK,AwGaF,ACgD6G,AE1BvH,AmBxBQ,A3KvEO,AeRK,ApCeZ,ADqBE,CLNF,A+FmCC,ASSE,AqCIE,AmCGF,ACgD4G,AoB3D1G,ACSJ,ACmBE,AGxCF,A1KpDmC,ApBMlD,AeJK,C4CuLa,AQpDd,AC8FY,AE2HA,AanSA,AoDgGd,AgC1DkB,AYsBZ,AC5DG,AnIqBT,AwIhBkB,CrHmKA,A2BzGlB,AwCiCe,A1DzEA,AiFzBI,A9JnDJ,AJ6BT,AuMlCL,CvGmEkB,AfcH,AsGqCN,AQ3BS,ACtCnB,AnLlDF,AqBV0B,AjCWxB,AJyBkB,A0M7BKH,CxIwLJ,AWqKF,A2DtRI,AMmFrB,A3E7FgB,A0GiEC,AiBpCb,AGlBE,AEnBW,A/LjDA,AjBiCjB,AuNrCC,ChH0DD,A2EFsB,AsBEtB,AEfqF,AC+CnE,AGlBA,A5J/EZ,ApCeR,AE0BQ,CRXY,A+FoChB,AiFeM,AEoDW,AwB3EA,AKnDO,C/MuBP,AgGgDjB,AUAsB,A8FlBxB,AEFoB,AhK1DZ,AlD4CW,CwF6LL,AyBvKW,ACYA,AlCVrB,CwBUS,ASZa,AhCmBf,AgBGL,AiFzBI,AsBEV,AKKI,A/LvDkB,C0E0NI,AsH1JpB,AIrBO,A1KpD6C,ChCwB1D,AgLmD0B,A0BvBF,A1KpDmC,CwEoE/B,AEId,AlCVV,AiBoBqB,AuFPrB,AuBiBwB,A7JlGf,C8D0EgB,AEIC,AjBU5B,A8GU2B,C/FxBD,AwEOC,AuBiBD,C/FxBT,AfcS,A8GUT,A7JlGN,AjCWb,CD8BM,CkCzCO,CsJiEJ,AtJjEI,AlD4Cb,AwNTiBK,ChIsMH,AwB/JgC,AEIhC,AjCOF,AwG4CR,AsB/B0C,AvK5FE,A1BShB,ADqBlB,CoG8BR,ACYF,ApG/D6B,ADqBE,C2EqME,AhDnOW,AgL6B7C,EhB8BM,AUPe,AhK1DlB,AsKmCgB2B,CxIiCN,AlErDM,ADqBR,CoEiDH,A/BrFI,ApCeuB,CDqBG,C0F8B7B,ASQhB,A/BWwB,A8HaxB,CvHuIkB,AgHxKL,ChHwKJ,AE2HL,AVhSgB,AwHHhB,AtJjEmB,CsCyOmD,A1E1N3B,ADqB7B,CAAhB,C2L6BW,AtJjEU,C6B+LkB,CS0ChC,AevKc,AvBEH,A9BpEG,CsCyOwD,AevKvD,AvBEhB,A9BpEe,CqDkEA,AzFnDG,CiEgLH,AwB7HjB,AtBmBS,AuHpBF,A1LlDX,CiEgLF,AC3HoB,AwHHhB,CjGC8C,AtBmBhB,A/BrFxB,EsJiEN,AgB9BG,CnE2Cc,AsDmBb,Aa9DR,CnE2C4C,ArEVxB,A2H6BlB,C3H7BM,GAAA,CuBFF,CACE,CiGFK,CAAE,EjGEH,A8CWS,EAAmC,IrEVpC,CAAG,EwHHnB,EnDaiB,AmDbjB,EnDa+D,IrEV/C,CAAZ,IQqKwF,G6D3J7B,W7D2JY,CAAtE,CAAP,AetKM,CAAuB,UAAvB,EAAmC,UAAC,KAAD,EAAM;A5FsC7C,AH1ED,AkElBG,Ac6NL,ACvFA,ACkNE,AajSO,ACWF,AE3B6C,ApGA9C,A0GwBP,ACTS,ACYD,ACkDJ,AgBlDF,ACPA,AiBOU,AMmFR,A1E7EmC,AgBI/B,AyEJL,AnKuBD,A0KvCc,ACLH,ACGP,ACeF,ACzBL,AG+BW,ACyCF,ACAQ,ACzBN,AEhBX,AI0BQ,AOhDH,AEbI,ArIkCL,AsIWF,AE3BO,ACSC,ACoBT,ACvCG,ACkBG,ACrB4B,ArK1C7B,ADyBH,AJnCuE,AYcrE,ApBXF,ACIA,AVJA,AGIA,ANAE,AKYD,AIdD,AMGK,AdWP,AwDRA,A1E+DC,AcpEE,AHID,A8CkDF,AxD0IA,AYlKU,AHLR,AnBcE,AqEkBL,AV7CWpF,AhE3BZ,AmOuCE,AD5BC,CCyBF,CnMRC,AuCyCA,AxD0IA,AoN7KgB,C/HgHT,AiGdA,ArH/CL,AlEJF,AqN/CF,C/HgHE,A0ChEE,AuDkDF,A1JxHE,ATAA,AYKK,AnB4BG,AHLR,C6Fe+B,ApGXV,A2LiDnB,AelCF,AnKpDE,A5BMF,CyF0CI,AQ2BE,ACkDJ,AwCiCA,A8BjCqF,Ae/DrF,AKKI,AhKpEN,AQqBQA,AkKhBHqD,CtGuDC,AgFoDF,CzFpCM,AlG1BN,AqJ6GA,ApJtDA,A4KzCI,AQqCA,AenDF,AO0BF,CzGAO,AQHN,A2CsFA,ApJtDA,AwMRA,A3JhFO,AnBPP,APAA,AGFA,AMGA,AzBae,AmEVf,A7DyBG,AuMlCA,C5MiGF,AwH1BA,AkBAI,A+BGJ,AIME,ArJ1EH,AnB4BG,AtBSF,CiBsDC,AwH1BA,AlDM8B,ArC5C9B,AJnCkB,AvBMlB,AHIA,ADqBA,C0F+BK,ACWE,AyEVA,AyBhBJ,AlK/CO,ApCsMnB,ASvKU,A0M7BG,CnFgEF,A8EduB,AlLjDvB,ATAA,AHIA,AVcW,ANiLtB,CEvJM,A2FoCM,AyGpCE,A1K5CF,ATAA,AqCyDZ,CcrDc,ApEwCR,AkMaO,ArKpDN,AzBae,AwC1Bd,AjCWK,A2CsDb,CsDakB,AiEZZ,A0BIY,A5K1DhB,APAA,ALYY,CmFsDN,AUAW,A2FRA,AzL1Df,CiIkEgB,AmCSF,AGgBE,AatCJ,AURkB,A9JtC9B,AvBTF,AMGqB,AzBaD,AWFtB,C8FwGkB,AwCiCZ,ApJtDW,A6K1Bb,AOsBiB,AMWf,A7I/FqB,AnBPV,APAA,AGFA,AMGO,CgFmHL,AgBlDjB,AwBmFE,ApJtDc,A4B9FX,AtBuBL,AnBcE,CiBsDe,AwHzBf,AkBDmB,A4BVE,AGaN,AIME,AqBjBb,A7K9DN,ATAA,AbkBoB,AwC1Bd,CvCwGY,A6LvChB,AKKqB,A7K9DL,ATAA,AnBmMpB,AVzJoB,CiMqDV,AsBzBW,ArKtCZ,AlCda,AIXpB,AV4LF,ASvKqB,CPgBf,A2FoCgB,AgFpBM,AUmCF,AvIpFtB,AnBPF,APAA,AGFA,AZCO,A2CsDT,AP1C4B,CkD4ClB,AjGfE,A4G0BJ,AiBCA,ACRN,AiBOU,AmCSa,ACyCmF,A5JtHrF,A+BuDvB,CrD0CE,AiLpBwB,AyBTF,A7J3D8B,ApBXpD,ATAA,AbkBoB,AOfE,CsFwDK,ANqBP,AjEhFG,ATAA,A8BeMlD,C1CiF3B,AqG7BW,AoBJQ,A7HoCG,A0KvCV,AQ4D4F,AsB7B7F,A1L3EA,A6BxBP,AlCyCE,CmGuFN,AtFtHF,AqBVM,CvCwGoB,AwGwBC,AsEA+E,AvIhIpG,C5CwCN,AkL+CuB,AxJ/EvB,ATAA,APiCQ,AHLR,CoFoDoB,AuFDJ,AtIvFV,AUiER,AxD0IA,C6FnHQ,A/CxFA,C7BwBR,A6BxBQ,CsIuF2B,ACyCyE,AEzBlG,AkBjC4B,AzJnDlC,A1COkB,AkDuCtB,AxD0IA,CsE/LmC,AhEcb,AWFO,CqDZO,AtBO0C,C4DwD9D,A6FLyB,AE6BzB,E5F6BZ,AsEAwG,CAAA,CoB1D/D,E7FK9B,AwEY6B,ACyCmE,AsB7BhG,ArMzEO,C8K6DuB,A5HtBrC,AxD2IN,C4GjIsB,A+FwBA,ArMzEF,A2CHZ,C4B6D4C,AgINpB,CvIlEC,A+GoHyE,CzKvFlG,C0D7BuC,AhEcpB,C8K6DM,ACyCgF,CDzC/D,CvGHb,AwG4C/B,A7H/DR,EqBmB8D,ArBnB1B,CoDUrB,AwEYoB,AuBYpB,CvBZ0C,CxEZvB,AwEYC,AqBjBM,AE6BP,CvBZxB,ApLoHV,CyMrIQ,CzMuIN,CsEjMiC,AuIkEc,C9EC7C,CzDnE2D,AyDoEzD,A8EFkB,ChIMe,AgINjC,C7M6HN,C6EvH0E,C7E0HxE,ImNvMD,C7IKkC,CAArB,AyDmEV,AlDKmC,CPvE9B,CyDoEH,AlDG6E,A7EuHnF,EAGgC,EsElMlB,CACC,IADD,CyDqEP,AlDGgC,CPvElB,AOuEkB,IPxEzB,AyDqER,EzDnEG,AyDmEM,IzDrED,CAEA,wCAAiB,cAAjB,CAFA,CAAR;A/D6FA,A+D1FD,AKiLC,AOtIN,ACiFA,AjCrIF,AmC6IC,ACkNE,Aa/RW,AX+EZ,Ac7FM,ApGHJ,AsGSA,AGWM,ACIN,AEEK,ACkDJ,AgB5CK,ACVJ,ASwGN,AQpGc,AMmFT,A3E7FK,ACesF,A1EwB1F,A0KvCW,ACLJ,AEsBL,AIEG,ACkDT,ACJD,AC9BW,AMWF,ASlEiF,ArIqCtF,AwIfI,AE8BL,AEtBG,ACtBkC,ArKxCrC,ADuBa,AJnC+D,AYe9E,ApBRE,ATAA,AHCC,ASFD,AnBeoB,AWDpB,AwDTO,A1EgEV,AcpEK,AHIH,A8CkDC,AxD8IA,AYnLM,AHQN,AbSE,ANKE,A2D3BC,AhE3BT,AmOyCAyF,AD9BG3C,ClJuE2C,CiBrB5C,AjBqBK,AkJvEJA,CtI4EM,AnExEG,CRyCR,A2E+BF,A5D3DE,AwDTO,A7DaD,CkGyCJ,AyCyFF,AkD7FE,AKTa,CnIuIX,AQrDA,A4CtDE,A5HuBJ,A0LOI,AiB1DN,A9JrCE,A1CMkB,AOdlB,CyDDA,AwCsEE,AwFhCA,AGuBA,AIKF,CtM4BE,AoEuFA,AOtIA,AoBFI,AEMF,AIeF,AoESA,AOkBI,AezDC,AKsDL,AEtBA,ApI/DO,AzEgML,CkFtJD,AM2FA,AtFhGD,AuI8HC,AqC/HC,AM4BA,AC0DD,AzK7GC,AwMSD,AD9BC,CjN6CD,A8HsBG,AiBIE,ArEVA,A0HfN,AhM5BgB,AmEVP,A7DaP,AhBiBA,AwNRAuC,AD9BCtC,CxIwL2B,AmG/H1B,ArIhDD,AOGA,ApBRA,ATAA,AMDA,AnBea,AkDwCb,A/C7BA,C0EsGG,CKUD,AmB5EkB,AnEjCd,AlCdO,AhByBX,A6N3CV,C1KSC,AnCSoB,AmEVf,A0IRM,ChImIE,AgBrEE,AiFkBF,AyBTF,A7J3DA,AvBTX,AZCW,CqE8Cb,A4BYI,AlCDI,AzEuCM,A6KtBA,Aa6BI,CvF3DC,AKiBU,AqEad,AyBpBX,AnMxCkB,AMGd,CkGsDF,AlCdc,A2GmCA,AsBzBd,A7MiIY,AS3KhB,CyEqBe,ACiFE,AgBrEE,AjGjBnB,ACuDgB,AkL8BV,AElCa,AMWA,AY1Cf,AzJrDN,AnCRiB,AuM0BnB,C7MmEoB,A4FnCI,AGdA,A0BmBF,AiBIE,A4DAJ,AjLnEA,ATAA,APiBgB,AwMShB,C7MmEC,AqG5BA,A+FwBA,A3JjFA,ApBRA,ATAA,AnBoME,CE3JF,Ae5BC,ALIZ,CuFyCiB,AKRF,AwBaA,ASwGzB,AqClHY,AekDF,A5K1Fa,A3B0Bf,CiBsDA,A4FnCM,ASOwD,AmBQ1C,AU8FJ,AQpGI,AqDzBM,AK+CgB,AQ7F/C,C5MiGsB,AkI0EzB,AtIvEuD,CgGtCzB,AKRF,AGWG,ACI3B,AzG+BoD,AwMPpD,ArM3EoB,AhByBE,A6N3CCG,ChH8DI,AGdA,AmC2HC,A8C3EpB,AjL9EY,CgG8BQ,AmC2HhC,AuC7FQ,CrEbuB,AoBYH,AzH3DJ,AWDF,AJbO,AsMJ1B,ChH8D+B,AWa1B,A2BgG8B,AnIzJd,AWDpB,AJb0B,A2CsDA,AlEftB,C4FOW,AoBFK,A0BmBU,AyET5B,A7KtDK,ATAA,AqCsDoB,C8CVK,ApGHL,AmLqFtB,AoBzEL,ClMwC6B,AwHpBvB,A5HuBU,AHoGe,COvGD,AyH9BG,AiBIC,AoC2Df,AiBpFY,AzL1ChB,AboMiB,CwF3D3B,AtF/FD,A+IyB+B,A9I6BjC,AUhG6B,A2CsDL,CgCmFN,A8G/FU,A1K1CE,ATAA,CZ6FH,AwHpBvB,AvEnBwD,CjDuC1D,AiG3CoB,A8FR+B,GnHqF1C,A6ChEX,AxFnCsB,A3B5BT,CsE+Ha,AtE/H1B,CsF0DyC,A8CSnB,C9CToB,AGdZ,A1GVX,CqJiCX,ArHnE+B,ATAA,AqCsDf,CgCmFL,A5DzIqB,ATAA,AqCsD1C,CtDZI,CF0J2B,CwCxKC,AxCwKb,CmG1IT,AQGiB,ExBkEE,AgBrEuB,AnG0IF,CmG1IG,C3D9BrB,C2D8BtB,A4Bec,AnIvClB,C4FuGc,A5DzIY,ATAA,AvBkC9B,CuGwBuD,AQG9B,CnB4EI,AmB5EJ,AnEjCH,A5CMW,C+EkJoB,A/CpLA,ATAA,CwF6DrB,AoBYV,E5CsDI,A3CnGJ,CmCwJU,CAA9B,AQrDmC,C4CtDf,CAAlB,A/H2Ha,G+H3HK,A/H2H2C,CwCxKnC,CmEiCE,E3GuIqC,C2GvIrC,AoBYV,CAAlB,AvF7C0B,GuF6C1B,EvF7C0B,CAAR,EmEiCU,CAAA,AnEjCF,ImEiCE,CnEjCF,CmEiC1B,AnEjCkB,EmEiCU,CAAA,AnEjCV,GuF6CA,A5GzEiD,C4GyE/C,E/H2HyC,CAAmB,CwCxKtD,CAAE,EmEiCA,CAAA,C/E7D4C,EmGyExE,AvF7CO,ArB5B0C,CwF6DjD,AxF7DgF,C4GyEhF,CpBZ4B,EnEjCW,CxCwKsB,EAAmC,EmBpMP,CAAC,EqB4B3C,AxCwKc,C2GvIjC,AnEjCoB,CxCwKuD,CmBpMvB,CwF6DpD,AxF7DoE,ESA/C,CY4BV,AZ5BuD,CTAd,CqB4BzE,ArB5B8F,CnBoMxC,CAAnE,E2GvIkC,CAAA,IAAA,AxF7DoD,CSAc,C+E6D9F,AxF7DgH,EwF6DlF,OxF7DkD,CAA/B,CAAhD,CAAP;AZ8FG,A+D1FF,AKgLG,AOrIJ,ACiFQ,ACsGJ,Ae3KQ,ACQN,AZ0EN,AcjGsC,ApGDhC,AsGQJ,AGUS,ACOX,ACXM,ACcI,AC+CX,AgB5CO,ACVJ,ASwGJ,AQpGW,ArERD,ACaX,AgBIS,AyEJN,AnKwBC,A0KvCU,ACJD,ACCN,ACoBA,AIKI,AC+CR,AElCO,AMWD,AMSI,AC3DR,AGiCJ,AEtBE,AE2BA,AC1CA,ACkBI,ACpBJ,ArK1CD,ADsB+D,AJtC/B,AYmB/B,ApBT0G,ACE1G,AVDD,AGCC,ADYA,AIdD,AMYA,AdEA,AwDV2B,A5DHxB,A2CsDH,A5CrCO,AHQP,AbSK,AqDtBH,AhE3BL,AmOyCC/H,AD9BE,EC8BFA,CrG6DQ,AtEpGA,AtBEG,AMEH,A+B6DP,A/C/BA,AwCfE,C8DiFF,AtEpGA,AgCgB4B,A7DcpB,AqCLJ,CTeF,CmCwJY,ASkDR,AoBnLF,AKMI,AkBiBA,A8D8BA,AUjBJ,A1LtFA,AuM0BD,C7B+DK,AYuBI,A/J3HA,C8CyDN,ACiFI,ACsGJ,AIzFA,AoBzEA,AhCRI,AmGLE,ACoBN,AKoDA,AsBnCA,AExBA,ACpBA,A1K1DF,AYmBE,AnBPA,APAA,ADYA,AoDV0B,A7E+B1B,AwNRD,ClIoBE,AuDyHA,AQvGc,A4BfT,AsB+DA,AvL/FJ,AuMrBA+H,CjN8CI,A8HqBF,ASwGF,AQvGE,A6BXE,AsBAJ,A3HlD0B,A7Dc1B,CwEoNF,AgBnKS,AZ0EN,A8EpEA,AcOE,AmBOF,AEtBA,AxJpDEjK,CkD8CG,ACQE,A+F8CJ,AGvEuB,ArJ7B/B,AkKhBH,ChH8Dc,AGfyB,AQ2B3B,AkBPA,AuD6BE,AuB7CJ,AlLhDiG,ACE1G,APAA,ADYA,C8DkHc,AKaJ,AmBhFO,AoBaH,AlCGJ,A5ChEE,CmDsDK,AqCqGN,AoC9GM,A0B6BN,A1KrFA,APAA,C0G8DG,ASwGhB,AuC7Fc,A8B3BA,AjM/CA,C8DmLW,AQpDJ,A4CtDF,AnDdA,A/D3DJ,CsF0DK,ACQL,AEvByB,A1BgBpB,AyGmEJ,AezEZ,ClHPE,AiBYQ,AWYK,AkEIF,Aa6BI,AS9DqB,AC6CtC,AMnBa,AjNjCA,C+EiJQ,AgCvHA,AyFPP,AScA,AjNjCA,CgHiCC,AmBMX,AqDMa,AC+CwB,AyB/E3C,CnIoIuB,AyBjHC,AUIJ,AwDEpB,AcOoB,AkBtCoB,AKkDtB,A/K5FiG,AwL2B/GoD,CzIyJmB,AOrIJ,AiBYI,ACQE,AONF,AqEcnB,AIKe,AeiCE,AI1BF,AEtBZ,AIGQ,AjLpEqG,AhCmChH,AwNRD,CjIqGuB,AqB7EN,AIiBA,AuF6CE,AGvEkB,AO0BpC,AjNjCgB,CuF6FM,A0BvED,AmBOF,A+CTI,AKyBJ,AC+CvB,AiBrFwC,AKkDnB,AC1CX,A/LjDR,CgGwDwB,AmBOF,CrDoHpB,A6BjImB,A+FoCA,C3H3BN,AkGNW,ACCE,AnJvD4E,CgFoE1G,ACXM,AmBOQ,ApDJN,AuHqDE,AvKjHgH,AhBkBpH,AhBiBF,CwFqMJ,AyB/K8B,A8FmC9B,CxHoCQ,AqB7EN,AwBaA,A8CV6B,AM0BF,AmBOF,CnBPG,AxK9DF,CsE6BC,AkBoBM,AwGjBnC,C1HH8B,AkBoBM,AONb,CAAA,AmEPb,AqB2DiB,AI1B7B,AKrCsB,CzGSgB,AvFzC9B,CuFyC+B,AiFqBd,AmBOU,CpG5BG,AvE3DsE,CuE2DnF,AXkFD,AsBtEe,AsESlB,AeiCT,AvKjHgG,CsD+C1G,AiBYwC,ACQlC,AONK,AoENmB,AKyBtB,ElGjC8B,AkBoBM,AUIJ,C1BiK3B,A+GvHc,C/GuHb,AgGxJ6B,AwB9B3C,CT+D2B,AS9DzB,CpH0FQ,AsBtEA,EsESqC,CAAC,AwB7B1C,CxHqLO,AI3FoB,A2G5BN,C/GuH3B,Ae7KuB,AXkFW,AqBpFM,EVE5B,Cf8KR,AgGzJ2C,ApIvEvB,CoIuEhB,AeiCmB,CAAjB,E3G4BuB,C2G5BN,AnJxGvB,CAAJ,CwCoI4C,CxCpIZ,EmJwGL,CAAjB,CtFxD6C,CAAC,CsFwD7B,E3G4B2B,A2G5B3B,C3G4B4B,A2G5B5B,C/GwHL,CAAC,CI5FqB,C2G5BjB,C/GwHvB,AI5FM,AqBpF6C,AsFwD7C,C/GwHiB,AyBhLG,ErBoFiC,AqBpFK,OrBoFpE,CJ4F4B,A+GxHD,AS9DzB,C/FM4B,A+FL1B,C/FK0E,AsFwDhD,GAAH,CtFxDuD,AsFwDxE,I/GwHiB,CwHtLzB,CxHsLoC,CwHpLlC,UAAC,SAAD,EAAU,U/FIgE,CAAuB,UAAvB,EAAmC,UAAnC,EAA+C,UAA/C,CAAhD,CAAxB;AtGsCL,AH5EF,AkEdA,AK+KK,AOpIF,AhCiDA,AkCwIyC,AEmH7C,AahSa,ACQH,AExBmC,ApGAnC,AsGQN,AGUM,AEJH,ACayC,ACgDjD,AgB5CS,AU8FT,AQpGW,AMqFR,A3E7FO,AiBiBC,AyEJT,AnKwBA,A0KvCa,ACJF,ACCJ,ACqBF,AIIG,AC+CP,AElCQ,AMWH,AMSK,AC3DN,AGkCJ,AEpBE,AGfI,ACeF,ApK9DP,ADsBE,AJlCE,AYeC,ApBVkI,ACGlI,APAA,ANCF,AKWA,AJdqB,AwDGhB,A5DFJ,AHIH,AVgME,AYtKA,AhBIG,ANIC,A2D1BAwD,AhE3BR,AmOwCO,AD7BN,ClMGM,CPKL,C4JyDO,AnKjBA,AqCtDA,AiCYP,C6F2DA,AnKjBA,AqCtDA,A5BwCE,AqClBIA,C1CiEJ,A+FnCoB,AOHlB,ACiBA,A+EmBA,AzJzFM,ARY+C,C+CoL9B,AOpIvB,AkBoBM,AExBJ,AEQF,AMKF,AiBkBM,A8DCN,AMsCU,AM7CR,ArKjFF,ARYO,CiF2DH,AjCFE,AhDzDN,C1B4CQ,AqJ8GF,AyB7EF,AKmDA,AElCI,AavCJ,ApM+IA,CkDrGQ,AlC7FP,AKWA,ATiBD,C+DoJyB,AgCtHrB,AkEHI,ACJF,ACCA,AwBiCJ,AKnCM,AhMtBP,CwEyMsC,AEmHnC,A8HjUEiD,CvHmDF,AuGvBA,AEbkC,AhNFlC,CqF4IqB,AzBnF3B,A0BpCW,A5BnDJ,AnBPA,APAA,C4B8FW,AoC2PtB,AiHnQY,AvLrFV,C2DgL6B,AoDzGd,AlGxEJ,APAA,CqDiLkB,AOpIjB,AkBoBM,AIhBN,AGUE,AwFoDM,AGxE0B,AMY5B,AvLvClB,CiE6UW,AcxRQ,AONJ,AErBb,AmEoCW,AmBqCQ,AnL9GR,ANEf,ApBkCe,CYIK,A2GJlB,AkBmCkB,AwDmBA,A7KxFpB,ApBkCgB,A8NbG,ClIqBF,AhCiDb,AqGyDe,AwBlGE,AQsCA,AepD2B,AG2B/B,AGfM,AvLvCN,A+LYGC,CzIyJd,A6BhIY,AqEOM,AGkBN,AnJ1EP,APAA,C4B8FsC,AkCwIH,AgBrKpC,AONA,AkEHe,AyBjBuB,ClG0BtB,AONJ,A4C4FA,A1D5EF,AkFtBI,AoB0DZ,AGxEoC,AtLtC9C,AiCUsB,AmKaZ,ChHyCe,A2BOnB,A+CpBiB,AOyEJ,AcdQ,AIzBrB,AKnCmB,A/KnDN,APAA,ADYnB,ArBuLW,AoN3KW,C7BmEd,AgBLY,AEpBL,CrGDP,APUa,AmFDjB,AOiBqB,AjMtDjB,A2D1BiB/C,CoIkHkB,AcdjC,A7M1EY,CqHsBd,AoENF,ArKlDR,C0EmO6C,AqHpKzC,A5KlEO,APAA,AZGX,CuI+DoB,A4BVN,AjK3BZ,CsCiEE,AkCwIsD,AoBrL9B,A6E4E1B,C7E5E2B,CtD6C6C,AqGyDnD,AkDrFnB,A7LrCyB,CiB7BE,APAA,CiK2FK,ChC4Dd,CNrFK,AvI/D3B,ApBkCU,C4FQa,A+DqBK,AMqFG,AgC5DQ,AjMtDjC,EkHYY,AoGEK,A/KnDc,APAA,AZGrC,ApBkCqC,EkHYjC,A+E0CuC,AqBxCnC,AQ3BI,CvLxB4B,APAA,CV6BA,AwMLI3D,CnKbtC,AmKaM,CX0CK,AW1CZ,CvHmD2C,A0GWxC,CtDpBmB,AsDoBzB,C3LzD2C,CsEgBtB,A+DqBiB,ApHlEO,APAA,CmLkE9B,A5KlE+B,APAA,CZGhD,GuI+D6C,CpDSY,A4GTxC,A5KlEuB,APAA,C2HkEb,ApDS+B,A4GTtD,A7LrCF,CqIqCQ,AjG3DoB,AnBPnB,APAA,COAP,APAA,C2HkE8C,AwDAjC,C5KlEyC,APAA,AtBmMxD,C6FxH8C,C7CpErC,AhD4LyC,C6FxH7B,CAAb,A4GTO,AzJ3DoB,CyJ2DjC,GxDAM,AwDAN,CxDAwD,AsCyBrB,CAAkB,GvIpF9C,CAAP,GiG2DM,IwDAO,CAAE,QlByBoB,CAAH,EkBzBhC,ClByB6E,CkBzB7E,GlByBiF,sBAAJ,EAAvE;ArG9CmB,ACiF3B,AjC/BF,AkCuI+D,AgBpKtD,AZ0EP,AchGI,ApGFG,AsGQN,AIuBD,ACbA,ACWD,AiBIO,ACbJ,AiBKK,AMoF2B,A3E3F1B,AiBgBD,AyEJV,AnKwBA,A0KvCc,ACJF,ACCH,ACsBF,AIGC,AC+CL,AElCO,AMaR,AMOU,AC3DL,AnIqOF,AsInMH,AEpBG,AEwBF,ACvCM,ACeH,ArKxCN,AJlCG,AYeC,ApBVF,ACGK,AVFI,AGEJ,ANEJ,ASJK,AMiBA,AzBJG,AmEVX,A3BhBO,AjCcL,AHIO,A8C4ER,AxDoHI,AYtKF,AHJQ,AbQP,AqDtBA,AhE3BL,AmOuCO,EjMzBK,AMAH,AMiBA,AyBgEP,A/CtDU,CqGDH,A+EsCA,AjK5EG,AfKA,AuM+BQ,C9GqBZ,AOgBJ,ACnCF,A+EsCA,AjLjCE,C4FiBA,A2FoDM,AvMxEN,CmIgDM,AgDrBA,AoB4CF,AM/BF,AGfI,C1MZA,AkLqB4B,CjGiE9B,AKcA,AtFlGI,A0G+BF,AhCbE,AoGgBJ,AKkDA,AezEA,AOsCE,A9K1FF,APAA,ANEE,AVSE,AIRF,CyE0HD,AjC/BA,A4H1DC,AM2CF,AnH0MQ,ArD5PR,AHJI,CoGkCF,AmBEA,A8C1BF,A9JjCI,ANCF,AE0BD,AHJG,C+EkHD,AqBhFA,AhBcD,AzDjFC,ApC2MA,AJlKA,CgHuCG,AfGF,AyGrCwC,AnLxCxC,CiEuOqD,A4CxKpD,AuByFyB,AqDnGrB,AzLrDL,AHIG,ASJN,AfKqC,C8EwIhC,AchGI,AyEUA,A6BFA,AxK3Dd,APQU,APAA,AGFL,A+BiFP,C0BnC6B,ACiF3B,AKcA,AchGe,ApGFA,A0G+BF,AyEqDF,AxJ7HA,APAA,AkC+Eb,CwElBc,A/D4NV,A3D9Qc,C6EkHH,AKcA,AuFtFI,AuBfoC,ArIoPvD,AnBzSM,ApCkBE,CwC2FQ,AoDnDV,ApGFI,A0EkBU,AyGkEmB,AezEvB,AQDR,A5LjDU,A8BjBZ,CsCoP+D,AkB1LhD,AiD2GqB,A3E3FrB,AiBgBJ,A4GTA,AEwBE,ACvCE,AtMxCE,AwC1BjB,ArCwCI,C2E4M4D,AlF5LhD,A2GkBpB,A0C2FyC,A+ChHY,AtLpCrD,APuBQ,CyEmBmB,AhCkDV,A2DlCf,AuEmBE,AtI9FA,AlC4CJ,CiF8CQ,AwFkDR,AezEkB,AEdmC,AG4BnC,AEwBE,AxL5FZ,AYiBH,C6C4CG,AmGNe,AuBf8B,ArImPnD,A9C3RM,AMAH,AMiBA,Ae9BD,CiFyFoB,AnDfA,AiBgBJ,AkFtBI,AtJvDnB,AqBbD,AU8FN,A5ClDqB,CgG2CL,ACZR,A5C+NR,A2IxOQ,ApJ4BR,CwElBI,AyEKA,A5KlEE,APAA,CyG0EuB,AvEK7B,CwElB0B,A8EXf,AhKjEL,AlC4CmB,CoK8CE,ApK9CD,CwEwM2C,AmE/EzB,AzGrKtC,AU8FN,C4BsJ+D,AkB1L1C,AM6BN,AmBEkB,A+ExBrB,ArLpDL,AqBbD,CsCoP4E,AgHjLpD,AOsCP,A5K3EhB,AnBcc,CgG2CsC,AmEnBxC,AqBDY,ArKrCxB,AnBcuB,CgE8BpB,AmGLA,AtJxDV,Ab+BqB,AHJX,EGIuB,CqD4P7B,A9C3RM,AV2BV,C8I6H2C,AwBhG7B,A4BoCQ,A5K3Ef,CkC4QqB,CsFrIwB,AoD5DqB,AxL5FzE,AqCiFG,AxDoHC,CoFkC2D,AgHjL3C,ArKrCpB,AzBJ6C,ANwLN,CMxLM,C8E0NgD,AgHjLvF,C3KtDS,GyBgGc,AtCjER,CAAnB,Ca/BF,AhB2BA,C2E4M+D,AjEvOtC,Abaf,CmBbe,A+BiFzB,AxDoHI,CkDrGe,AkCuImF,CrDtNtG,AyBgEoC,CNeA,EzBhGpC,EAAsC,C2DuOyB,AjEvO/D,CiEuO+D,CjEvOZ,E+BgGhC,A2DlCf,A1F9DJ,C+BgGgB,A2DjCV,C1F/DuD,AqCiF7D,ENeiD,AMfsB,EuEL1C,CAAuB,A5G5EpD,EAA8E,E0F8D1E,E3DkCsD,A2DhCpD,AkERI,C7HwCiD,A6HvC/C,GhDmBiB,E7EoB6B,A6EpBM,AvEKhE,CNeA,CMfmG,EqDjB5F,AkBYsB,CgDpBnB,ChDoB4D,CgDlB1D,ElEMN,EAAM,KkBYiB,CAArB,AgDlBK,KAAD,EAAM;AxKoChB,AH1EQ,AkEbV,AK6KA,AOtImC,ACkF/B,AjC/BL,AkCsIuI,Ae5K1H,AXoFR,AcjGI,ApGDE,AyGqBA,ACSE,AEFb,AiBKS,ACbF,AiBIC,AMmFkD,A3E1FhD,AiBgBC,AgFnBC,ACFN,ACES,ACmBT,AIKG,AC6CN,AElCK,AMaR,AMSM,AC7DA,AEfyD,ArI8PxD,AwIjOH,AEwBS,ACvCJ,AEDJ,A1K1DH,APQI,AVHwD,AGGxD,ANEH,AKUA,AIdA,AMiBM,AzBJN,AWIG,APbG,A8C6EA,AxDoHL,AYtKD,AHJA,AbQE,ANGI,A2DzBT,AhE3BD,AmOuCCgB,AD5BM,ClKHN,C7CyBW,AgNMXA,CjBwEK,A/JlHG,C7B8GL,A4LGgB,A/JjHlB,AnBkCW,ALcT,AqCrCJ,CmC4O+C,A6D5KzC,AsCkBA,AkBdF,AzMqIA,CsE7LE,AK6KA,AQpDA,AKeA,AcjGI,AiF8BN,AtH0NI,ArElQF,CsFUa,A+DwBX,A4BvBI,AsByEN,A9KzGC,A+LWD,ClNmBM,A8HoBJ,A6CnBa,AOqCX,AC6CF,ApHsKA,A9CtSuD,AHKrD,AeaA,ArBbE,A8C6EF,A/CtDF,CyEkB+B,AMiG9B,AqFjGC,AjKdF,AwMNA,AD5BQgG,ChH6DF,ASgBA,A+FkBA,ACvCE,A7KpCN,AyBgEA,A5ClDD,CqDsQ+G,AxCrS5G,AnBaD,ANwLA,AJlKD,C4F2GE,AKjEA,AkFnBQ,AzK7CR,AVsBD,C4F2GL,AcjGW,AnF9C8C,AYkB5B,AzBJvB,AWIU,AuCgEa,A/CtDtB,CkGsCG,CrC3Dd,AiFiJyD,A+ChHK,C/LsDhD,A4EkCA,AmBlFI,AM6BA,AyEqDJ,AsBnCI,AlL5FH,ARiBQ,APbL,CHyFH,A+DvFA,AK6KA,AQpDA,AiG7CE,ApK9EA,AeaT,AyBgEA,AlE3CqB,CqF6Ib,AOtIC,A8CmBD,AoDkBE,AjKnF2C,C+D8Cd,AhFD1B,A0G8BQ,AqCLvB,AoC0DW,AiBxFiD,AKqDrC,AlL5FX,AfIA,ADuBhB,CFkEA,ALjDoB,AmLmFpB,ArK3HkB,ASJV,ClB6FS,AyH7BA,A1HnDD,AITA,AE2BhB,AHJiB,AnBWU,CoBlCX,CNeR,A+FuCe,AoD6FwC,ApIxJJ,AvBoCzD,CQhBM,AuEgKN,AgClHoB,A4CsF0C,ApIxJL,AMCtC,Ab+BF,AwMNdpK,CjIsGH,AmBlFuB,ApGDjB,A0G8ByB,AfGZ,AsGmBvB,AQJmC,A3LxFV,AoMqBnB,ClIoBW,AiBaW,AjGdA,A0G8BO,AoBVX,A+CNV,AKwBN,AuBU2B,AxL7F0B,Abc3C,AVsBK,CsFUnB,A6CgCc,A+EzBJ,AKvDT,C7GgDyB,AKoBF,AoEPM,AnK3BT,AuMlCQqK,C5MgGN,AoEsFA,AzEvIjB,AqJ2G+C,A6BrE5B,AwB7BI,AnLrDL,Ab+BF,CL8DE,AoEsF5B,AwBzHY,AoD6F4D,AjJ1I9D,AITF,C4LmCsD,Aa1CzD,CxIsLyB,A2BtItB,AM6BI,A0FnCmE,AKqDnE,ACvCwB,AhMtBf,CL8DM,AH1EjB,AmJoI+C,A6BrEjD,A0B9BY,AlMrBU,AtBOD,A6NzCSC,C5MgGpC,AH1EQ,AuG8CwB,AqBDf,AuBuFsC,AuDnGpC,A9LhDnB,AVSQ,AMkBW,C+FkCc,AqBDF,A8EZb,ArLpDX,A0LHJ,ClJwS6H,A2IhP1F,AEDpC,AlMrB6B,AtBOJ,CgNCiC,Aa1CpB,CLuDjB,ArLnDrB,C6KsCkF,C1MJlF,C+G8BM,C1CoO4G,A3DxRpG,CqGoDyB,AoBYT,C3H1DxB,A2H0DyB,ACbhB,AvG/Df,CAAA,CuG+DwC,AsEzBiD,ArI+PzF,C7DnRJ,A0MiCI,AxMvCc,AMkBG,CkMsBf,AlMtBJ,CmH8CgC,AuEtC8D,CvEsCxF,EAAmC,A+ExBjC,AxMxCQ,CgM0B4C,AhM1BpD,CgM0BoD,A7KtC1D,CAAM,CuG+D4C,A1HnDpC,CFMG,AdmBQ,E0I0B4B,EDajD,AzHhEU,CyHgEmC,ACblC,A4EXiB,AnLpDhC,AnBYM,C0HmDJ,AvG/DW,CmLoDT,CtMxCE,EFMV,AqBlBI,AnCqCyB,CmCrCZ,AnCqCY,CcnBiB,CdmBP,EmCrCnC,CnBYc,CmBZA,AnBYE,KmBZhB,CsG4EI,CtG5EiB,GnCqCc,EmCrCnC,CADK,AnCsC8B,GwNejC,ArLnDF,CqLoDI,IrLpDC,AnBWC,IhByB6B,CgBzBM,AhByBN,CwNejC,EAEE,ArLrDJ,CAAc,AnCoCqB,EAA/B,EAA+B,CmCpCnC,AnCoCmC,EmCpCd,EqLqDhB,GrLrDL,CAFF,CqLuDM,EAAM,CxM1CL,EAA0D,AhByB5B,CAAA,IgBzB9B,AhByBD,CgBzB2D,ChByB5B,IgBzB4B,CAA1D,EAA0D,OhByB5B,GAAA,YAAA,CAAA,GgBzB4B,ChByB5B,CgBzB4B,ChByB3D,CgBzB2D,ChByB1B,kBgBzB8B,IAAJ,CAAA,CAA1D,CAAP;ACiFA,AH1EA,AkEbA,AKgLA,AQvDE,ACsGkI,Ae3K3H,ACQH,AZ4EL,AcjGI,ApGDE,AsGOP,AGcU,ACQA,AmBIL,ACbD,AiBKE,AMiFoE,A3EzFrE,AiBgBG,AkFnBM,ACmBb,AIKa,AC6Cd,AEhCD,AYwBF,ACjEI,AEhBkG,ArI+P/F,AsI7MN,AEpBC,AEuBW,AEnBR,ACjBM,A1K7DX,AYcG,ApBVQ,ATAmD,AEgBzD,AIZH,AMcO,AzBHP,AWID,AwDdF,A5DFE,AHEQ,A8C6EA,AxDqHE,AS1KN,AbQD,ANEU,ALnDf,AmOsCQ,AD3BL,EvLCS,AXmBV,AJhBA,CuEoOM,AmGhKC,AkB5CA,AhL3BA,AnBRqD,C8E8O1D,AgBlKM,AIfN,A+EkBF,AtHgOM,AwI5QN,CnGkBM,AyBoBF,AnDjBA,AoGJF,AoBKA,CnDsBM,A4DGJ,A1L1EyD,AgMDxDD,C/H0OD,AlFhMI,A6HuCF,AwBwEoC,A3ExFpC,A0HxBA,C/CgH8B,A8BvB9B,AiBhGK,AQwBD,A9J/CJ,AjBQI,ArBbU,A8C6EV,C8IjDN,ArIsQO,AsI7MJ,AtLvEA,AwDdA,A0INC,C3GsDA,AIsBY,AmEfJ,A4BiCI,AtL7EX,ArBuLC,COxGD,AH1EA,AkEbA,AKgLA,A6BnIA,AvCkPI,A9CvSgD,AFmBtD,AmMOMR,CzGyCD,AyEiBI,A5HFF,AxDqHJ,AS1KA,A0M9BC,CAAV,C/GqEiB,AQOM,A+FkBA,AxL7FqC,ANG7D,CuFiEmB,A2ERE,A5J5DwC,AEgB/C,AUEG,A0CbnB,A5DFE,A2C+Ec,AxDqHmB,AmNxMnB,C/MsBA,AFyBI,A+IyBA,AxElEJ,AhEwBA,CmG8Ce,A+FkBA,AnJXf,CmDfI,AoEPM,A1J5CP,AUEA,AyBgEH,AlE3CK,A8NbC,CrFsDd,AkBTe,ArEPf,AmGJU,A+BHK,ArIpDvB,A/DAiC,AVkMrB,AoN7KWzF,C5G2BnB,A4E+BsB,AC6CN,AyBxEI,A/KvCL,CyEoCb,AGaiB,AkGOF,ACjBE,A/KvCJ,A0CbK,CoIqEF,ACjBV,AlLzDA,AlBKqB,A8C6EvB,CjDaN,A+DvFO,A8B4DD,AQO2B,AqCJ3B,AmCa6B,AC6ChB,AsBpCc,A/K7FzB,AXmBH,C2FwD4B,A+FkBA,AtL7EZ,ARbvB,AHE+B,A0MqBlB,C5G4BL,AsGGmB,AzLzCH,ARbxB,AHE+B,A0MqBJpE,ChNLlB,AdkBgB,A8NbZ,CzI8JC,AgCrHa,AyGzCrB,CxGiDM,AyEsDV,AsBpCU,A5K3EJ,C3BGmB,AuEmKlB,A9DrLT,AvBoCyB,C8FkME,A0HhLjB,CnI+HQ,ASiDU,AmH/IU,AMhBlC,ClGPuB,AkGOI,AjL1ErB,APgBO,ARbjB,CuKiF+C,AxJpFrC,APgBsB,C+JoEe,EzEjB1B,AjG9Db,C0EoOmB,ChFpNlB,AgFoNL,ApC/Nc,C5CWmB,AiBLC,CsDwK7B,AgCrHY,AtFnDkB,CsDwKrC,ASkDI,CgGtJU,AvKjFX,CmCOC,A1D6BmB,C0D7BvB,A1D6BuB,C+BvBR,CsFmDU,A3DzDD,CpBVhB,APgBoC,ARb9C,ETkBS,AyMqDuC,AhMvEnC,AvBoCA,CclBX,AwBrBF,C+EmE2B,CkGOwB,CxL1DC,CAAC,EsFmD1B,AkGO4B,ClGPlC,EtFnDJ,CsFmDI,A/EnEI,APgBrB,EAA0D,CmFsC1D,CpBoLyB,AoBnLvB,A/F1BI,C2E6MoB,CuBvKT,AlGtCjB,E2E6ME,CAA4B,AuBvKH,A/EnE/B,E+EmEY,A/EnEiD,EAA7D,C4EsDI,C5EtDmE,C4EwDjE,I5ExDN,EAAwF,I4EwDjF,KAAD,CpBkLmD,CAAC,AoBlL9C,CqGkBuC,CAAuB,IzHgKjB,EAAS,IyHhKf,EAAmC,GzHgK7B,CAAnD,CADF,GAEE,EyHjK6C,EAA+C,UAA/C,EAA2D,SzHiK/E,CAAC,CyHjKmB,CAA/C,IzHiK2B,CAAzB,GACA,aAAa,CAAC,GAAd,CAAkB,uBAAuB,CAAC,MAAD,EAAS,SAAT,CAAzC,CADA,GAEA,EATA,EASE,CATF,CAAA;A7EpIL,AH1EA,AkEd6B,AKiL7B,AO1IG,ACmFD,AjC5BC,AkC8HE,AgB/JC,AlGrBG,AsGSF,AGWI,ACQR,AmBOI,AChBH,AiBKG,AMgFqE,A3ErFrE,AiBaC,AgFlBD,ACJJ,ACGW,AKuBC,AC8Cd,AEhCH,AexDI,ArI6PC,AsI5MF,AEpBH,AEuBK,ACvCI,ACoBL,A7JhEC,ApBXmE,ACInE,AVJ0E,AGI1E,ANwBF,AKXI,AUCE,AzBFR,AWIE,AwDdF,A5DFE,AHCM,A8C6EA,AxDqHE,AYtKT,AHHE,AnBUO,A2DzBZ,AhE1BA,AmOqCQ,AD1BFsK,E7MgBJ,CCkDO,AH9CG,AgG4BH,AnCsP+G,AmJ9QpG,C7M0ClB,A6FlBA,AmG2CE,AY3FEA,C5DwJF,A+CxHA,AOiBA,CzHmLK,AoB3KC,AImBJ,AmBOI,AnDhBA,A0HnCN,ArIwQE,A0I1MA,AQ9FE,ClEwEG,AkExEFC,C9BkID,AzJlIiE,AZ4BjE,AeVa,AlBdb,AHC2B,A8C6EjB,CNoBF,AkC8HJ,AmHzIH,A9HrFA,A5DFA,AoCWArD,CqBPuB,AYuCtB,A0B6BA,AmBOI,A8CrBA,A+BPE,A5L3BN,AhB2KI,C4G3HH,A2FeF,AtLvEE,CmEgNC,AuBhKE,AyEgBc,AuBUhB,A9K1FA,APAA,AmDEA,CvE0CK,A4KUJ,A7G8OA,A0I1MA,A3JnFA,ApBX4D,A4BkFlD,Cc1ES,Ac4NpB,AoB3KM,AxF7BJ,AHxBA,AHC2B,ApBmC7B,C8F4LA,A6D5JF,C7D4JE,AmH1I4B,A9HpFxB,AjB4EO,A2JlFjB,C7IQ0B,Ac4NxB,AoB3Ka,A3ErDf,APAA,AScwB,AdEb,APfwB,CwCiGnC,AyDlCc,AyEgBc,AC8ChB,AzJlIuD,AZ4BrE,ACRc,AuC8DK,AxDqHD,CsE/LU,ApB8FH,AyDlCR,AsCIE,ArELA,AiGLb,A5G0OJ,AvDnSmC,A8C6ElB,APnEvB,AkKfqB,CnM4BD,AeVU,ArBbW,AuCUrBC,CuD0CV,AqEKe,AOsBc,AC8ClB,AsBpCf,ACvCqB,A5MgJL,C4G3HhB,AhCToB,A7CjDI,AzBFR,AWIX,A3BoBO,CqH4BJ,A/EpE2D,AGkB3C,AdEP,AwDdA,A5DFnB,AbmMkB,AV/JH,A2DzBnB,CCuFM,AhDtDM,AyGoBc,A1CoOF,A2IjPM,AhLvD2C,AtBgBnD,AkDkEZ,AxDqHY,C8K7IhB,AjKtDmB,AoCWA,CCuF6B,A0BnC5C,AyG+DN,AzJlIqE,A6CMzD,A/DDN,CwE0CJ,EAAuB,A+DyBI,A3JhCrB,CqH4BE,AsCIoB,A3JhCR,C8L4CuB,A3G9ElB,C2G8EkB,AnHoN3C,AlCtRI,A/BqLE,EV/JA,A6NxCN,ClJySA,C2IlPwB,AtMvCR,AWIX,EgIoDY,AmCYL,AnKhEoB,CwDd7B,CwEkEC,CnGnFE,E2BiB+B,CxDcvC,G+BTuB,KAAd,EAAqB,GyBLuB,CAAC,GAAD,CAAd,CzBK9B,CAAP,GyBL6D,WAAjE;AlE2FD,A2EjDO,AhCuDN,AkC6HM,AEuHK,Aa9RD,ACUX,AZ4EG,AtFlGO,AsGSD,AGWG,ACQP,ACXI,AkBkBA,AkBXD,ArELA,AiGLG,ACJP,AEuBD,AIOM,AgB/BN,AEhBE,ArI+PE,AsI7MJ,AIGE,ACvCM,AEEA,A9J9CP,ApBZoE,ACKpE,APAA,ANwBC,AKXC,AIZK,AnBUW,AWKpB,AwDdF,A5DFK,A2C6EI,AxDqHE,ASxKT,AnBUQ,A2DzBP,AhE1BJ,AmOqCCoF,AD1BG,E1LKQ,A2LqBXA,CdIC,A7LJU,A0M5BT,CnCmFC,A/GuNI,AsI7MJ,CtDjCE,ArEXA,AkGjBF,C5HwEE,AkC6HQ,AoB1KJ,AuB0BA,AkB1BN,A0DqCE,A/K/FmE,AqBgBjE5F,C2BsDA,CMtBA,AiBaI,AXsFJ,AqFpFI,AO0BF,AgB/BA,AnI+OE,AsI7MJ,AjM5Ee,AkDkEE,CgCiEhB,A2HlJC,C7H0VG,ArBlDC,AsI7MN,AIGE,A3MwGc,AoN5Kf,ClK4EE,AyJRA,A/K/F8D,AZ6B9D,AHxBA,CuE+NS,AIjFR,AsHzFI,AxM1CO,A8MWZ,C5HwHP,AqBjF2B,AiGRd,A9L7BX,ASvBM,A+B4EkB,C+IQU,A3K1FiC,AHM7D,C2D8NQ,AEuHF,AkBjSC,A5E1DsD,AtBgBlD,CyHoEH,AnDpCd,AiGec,AO0BF,ApK5DF,AwCqDc,AxDqHA,CoF6BV,AyBlKW,AkBkBV,A8CrBA,AvK/CE,AOXjB,CqE2CY,AEoLE,AEuHC,Aa9RC,AKHA,A5Bad,AkIbQ,AtJwBc,C0BlCX,AEoLC,AevKG,A3CqBO,AxDqHA,CoF6BtB,AgG3Ic,AvKpFF,CGwBC,AhB0KS,CkFvJtB,AyH+CF,AGrCoB,A9M6II,AiDvLN,CiCgCD,AhCuDA,AiD1CX,AKHF,AsGAiB,ArLpDf,C0EuDgB,AiF4BF,A3JnFd,A+B4EF,CuEEA,AiDFe,AIOE,AgB/BA,AvLrDrB,CgG6DyB,C5DlDFK,CqDoCZ,AuEWL,AuBLkB,ApM6IlB,CmG1IA,AUKmB,CvByRlB,AVpRL,CwGkByB,A0B/BE,ClGmBnB,AwEYkB,A0B/BE,CAAD,CFFb,AEEV,C5HVW,AlEnBP,C8L6BwB,A9L7BJ,CiCbhC,CmIyEuB,A3JnFf,CwBU6B,CmJ0CX,C9FNF,AsGIhB,AnLlDV,E2JmF2C,AwBjCd,CxBiCL,ClIcxB,A0D1BI,AwEYI,ApK5DM,EkC0EmB,A0D1BJ,A5FhDgB,E4L2BnC,A5L3BI,C6FqCe,C7FrCoB,ASvBxB,EmFuErB,G5FhDU,C6FqCe,A7FrCzB,C6FqCyB,EAAO,ApF5DpC,EAAoD,EAApD,EAA8D,KoF4D1B,ApF5DpC,EAA+E,CoF4D3C,SAAA,CAAA,IAAA,EAA5B,EAA4B,CAAA,WAAA,CAAA,IAA5B,EAA4B,WAAA,GAAA,SAAA,CAAA,IAAA,EAA5B,EAA8B;AzG1C5B,AuEmKV,AO3I2B,ACmFzB,AjC3BA,AiD1CO,AXwFP,AcjGM,ApGHD,AyGoBE,ACQL,ACZS,AkBmBN,AChBH,AiBOH,AMqFC,A3EtFM,AiBWA,AgFtBE,AEFI,ACqBb,AIQO,ACyCN,AezEE,AEhBL,ArI8PK,AsI5MF,AIGE,ACvCM,ACqBR,AClBU,AlL5D4E,ACMvF,AVFC,AGED,ANwBE,AKXA,AIb2D,AMa5D,AdDqB,AJZnB,AHAF,AE6BF,AhBGC,AqDrBK,AhE1BR,AmOoCW,ADzBLsD,ClMgBC,CbMK,AQWV,CqImBO,A+BfA,A/GiQH,ApC1TG,APAA,C2HwEP,A+BfA,AuBsDE,AMfA,AM5EEA,CjNqCyB,A6H0BzB,A1GlDF,CsD4KI,AiC7GF,AoBTA,AoEVA,AnI+OA,AkJxSE,ChHkDE,A4BmCF,AoFrFCC,ChIiIC,AgBhFF,AjGAA,AqJ8GE,AsBjGE,AEFI,AK6BN,ACyCA,AuB3EE,AzLrDH,AMEuD,AMaxD,ArBbA,CyF4CF,C6BmBI,ApDMI,AkIfA,CxIpDkB,ApBgGrB,AsC8CA,A3EhJA,AuMqBMV,CzIgKH,AV2GN,CsIzMK,ApLzFC,AEeA,AIbkD,AMa5D,CoDgHY,AjFhFR,A2Gea,AhBoBL,A+G7BE,ACqBJ,CvItEkB,AKmLf,AzExIT,AkMQO,AGkCF,AKpCM,AhMtBjB,CsCqEE,A0D1BY,AmBbV,A8CDc,AnK1DhB,AE6BF,AuMjCI,C7IM0B,AYwCF,ACmFX,AyBrDF,AzF1EC,C4GoFV,AgD1BkB,AqBHR,AUCI,ArLtD0C,AfA9C,A0MqBM,CzIgKH,AkG3HE,AEFI,AMsEN,AyBxEE,AzLzCH,A+LQK4C,ADzBJ,C7IMW,AkB8IZ,AqBpFO,AiGNL,AjMtDhB,CsE6HiB,AKmBF,AoBxEf,AkGlBQ,A3LxDL,CyF0Ea,AfQE,AwF8CA,AezElB,A/KxCiB,CjBKX,AkEhBoB,AuC0DL,AjCSjB,AiGXE,AEFI,A6BLJ,AnLnDoD,AZAzC,AuMqBN,ChNHL,A8EwByB,AhFG7B,A6KWwB,AwB4BQ,AO9BZ,ArLtDoC,A2LqBlC,C9InBE,ApE2ClB,A0EwBe,AiBWF,A1ElFD,AP+BxB,CuEgGiB,A1D7H6C,Ab6B9D,CsEasC,ACmFX,AmB9ET,AzF/Cd,CyDE0B,AsCsE1B,AkGlBQ,CtH0FH,AKhEoB,AkFxBf,A1J3Cc,CmEmIA,AuC9DtB,A5GpFuB,AEeA,ATgB7B,C2I8H+B,A6BtEA,CuBKjB,CvMxEJ,A+E2GO,AhE/He,AP+BhC,CRXU,A+E2GR,AmB9EuB,ApGdvB,A2G2BuB,A0C+FS,A8B7BZ,AlKhIhB,AiMuBS,C9G0BW,AOaD,AxF/CJ,A+LQZ,ClIqBsC,AkG2ChB,C9GnFD,AjDO5B,CiDP4B,AYwCH,AqEiHW,ApI7JC,E0F8D1B,AuEyBL,CzGgGO,CACb,AatC0B,CrElJgB,AP+BvC,CRXK,AgLmEF,CuBKJ,AQ9FA,C7IM0B,AgC6CL,ClG7BzB,AkG6BQ,AqG2CqB,AxL5FmB,CmDIlB,A1D2B9B,C0FkBwC,C1FlB3B,CO/B0B,CmDIK,CqIwFxC,EpDiE8B,ApI7JsB,CoI8JpD,EjD7GI,ClG7BR,AuEoKmB,A2BtIT,C3BuIN,AxDzLyD,GmFkD/C,EnFlD0C,CoI6JtB,C1D3ET,AuFKM,C7BwE3B,A1D7E4C,A1ElFqB,CAAnE,EwDwLiB,AxDxLsD,CiKuF1C,CzGmG3B,IyGnG2B,C7BwE1B,A1D7EoB,AuFKjB,EvFLoD,CuFK7B,CzGiGZ,C4EzBf,C5E4BA,C4E5BS,C6BxEkB,CAAvB,CzGoGA,CkBzGiB,CuFKjB,CzGsGA,AkB3G+D,UlB2G9D,A2B3IC,ATgCe,CS/Bb,CT+BiE,IlB2GrE,EAAO,G2B3IL,CTgCe,AuFKM,C9EnCnB,AT8BJ,AuFKyB,U9EnCpB,C8EmCL,EAAA,E9EnCI,EAAM;A/F+CpB,AH9EI,AkEjB4B,AKyLV,AOjJ8B,ACoFhD,AjC3BD,AkC2ID,AI7FI,Ac9FU,AEEN,AIoBJ,ACZM,AkBuBF,ACpBL,AiBOJ,AM0FO,A3EvFI,AiBOF,AgFtBE,ACJR,ACEW,ACqBd,AIQQ,ACyCH,A5BrFQ,A2CYR,AnI0OE,AsIxMJ,AIGE,ACvCM,ACuBR,AChBU,A9JpDV,A7BRE,AMC0D,AMc5D,Ae/BE,AjCkBD,AHAC,A8C4EF,AxDqHE,AYpKI,AHHR,AwCfM,AmKSG,ADxBP,E1M8BF,EFsEI,AgMTF,AMbA,EzHmKE,AwBrKA,AmBWI,AsD2CJ,A5BrFQ,A2CYR,AnI0OI,A0IrMJ,AlL3F0D,AzBkM1D,CoF4CC,A2F5LK,AKM0B,ChLrC5B,AkEjBsB,Aa4HxB,AmB3EQ,AuEQJ,ACJF,AMCJ,AmBgCE,AKpCI,A5J7CJ,AjBOA,AnBgBE,CsEYF,A6FiBM,AzKjDS,AGiBrB,C2EmNA,AI7FQ,AgB5FI,AKQF,A0CoGA,A1DhFF,A0GOA,AMbA,AjM7CA,AHHR,CkEgKoB,Aa1CX,AgB5FI,AvC2OA,A4IrNJ,AChBI,ArL3DiD,A+B6ErD,APjEIzF,CqBViB,Ac4OpB,ARpKI,AlEzEJ,C4DCoB,AnDHnB,AbWU,AMoBkE,CqDkQ1E,AxChSiD,AMc5D,C3BKa,AkEjBe,AgCiDT,AyBiCJ,AtGpF6C,AnBUzC,AkDmER,Cc3EiB,AgCiDR,AOUN,A4CnBM,A2CYR,AnI0OD,A6IrOK,A9MuIJ,C6GrIG,A4CnBM,AxFsPV,AnBjTT,A9CmNW,AYpKP,CRXU,A2HiEE,AgDlCV,AzKxCW,AwC3BjB,CwBmB0B,AsCuEb,AkGdI,A3L5DV,A2BhBP,ArC4CJ,CoFsDkB,AkFrBN,AqBNM,AOqCA,AEhBhB,A1L5ES,AqC8EO,AxDqHd,ASvKJ,C+EsHmB,AqBpFT,AhBoBS,AwF8CA,AwBnDf,AvMlEiB,AwC3BjB,A9CoNE,AiDvLiB,CuCqIH,AqBpFE,A5CmOhB,AhBpRkBG,C7COD,AwGsDF,AtG/DA,AwC3BjB,ApCkBA,A8C4EK,CqCID,A8GUc,A7J5GlB,ArC4CJ,CoFsDuB,A4DvCX,AoDkCJ,A5JhEe,C4H+CK,AQoET,A/KrHE,AkDmEG,C8C1BH,AOUX,A+FTmB,AEOA,ArMhC7B,AwCf6B,C1CqFD,A+D/FE,Aa4HJ,AKmBtB,Ac9FU,AsGCgB,AEOA,AhK5E1B,AG6BmB,CqBVO,AgCiDK,AEE3B,ArFtDG,AnBoMG,AiDvLR,CuCqIsB,AsF1FE,ACKjB,AMmET,AezEwB,AjLvDX,A2BhBb,CvCkH2B,AH9E7B,AkEjB4B,Aa4HD,AqBzEI,A4FCJ,AtJvEzB,CwBmB0B,AtEoMpB,CsGnJI,AwEImB,ACKrB,A+BDS,CxGRmB,AMsBR,AyEsD5B,AyBpEgC,A9JpDpB,C6C0EiB,AkFrBjB,A4B+BiB,ArMjFZ,CsG+DjB,AmBWkC,AlCHJ,AvFvEb,C6EoHnB,AwHnCE,AnJd+B,A/ClD9B,E6FwBS,AyBiC2B,AqE9BvB,AQFR,A5J7CJ,CAAJ,AhD+LgB,CoMhJd,ApMgJe,CgD/LK,AQsEW,A/ClDnC,CkEgKiC,AoDvGzB,C5GrFG,AbWU,AGiBR,CoFsDU,AiF1BU,A3JxDF,AnBuMrB,C6FrHkC,AvFvEvB,AkDmEG,AxDyHA,C2EXJ,EAAmB,A0G5DpB,AlKhIR,CAAoB,AbWH,AkDmEJ,EsJlBH,CvMsCgC,AuMtCzC,CjHsBW,AwF8CJ,AlKhIR,CZkGb,AoE0FsB,AkB1GZ,ClB0GY,AxD5LY,AnBuMtB,EAA0B,CqLvEjB,AyBpEgC,CzBoE/C,C7HlD+B,E6HkDhB,AwBnDf,CACE,A7MyHI,CmBvMC,AnBoMG,CwDtHqB,CsJlBwB,A3L5DhB,CkKgIxB,ArLwET,CqLxEN,AlKhIO,C2L4DmD,C3L5Df,AqC8EZ,C6HkD/B,A7HlDoB,EqJDpB,ACjBQ,A9M4II,CwD1HmB,CqJC7B,A1L/EK,CAAP,AnB4MM,GwD9HyB,CAAX,CxD8HT,EwD9HS,EqJCjB,CxBiDY,CAAE,GwBjDf,C7M6HI,C6M7HE,A7M6Hc,EwD9HS,CAAG,G6HkDlC,EAAA,A7HlD+B,CAA1B,CxD8HC,CAJM,CwD1HgC,ExDiItC,EwDjI0C,GxDiIrC,EwDjI0C,GAAT,GAAe,KxDiIrD,CAAmB,MwDjI8C,IxDiIjE,CwDjIiE,AxDqHvE,IwDrH2D,IAAA,YAAY,KAAA,KAAA,CAAZ,GAAY,KAAA,CAAZ,GAAA,YAAY,CAAG,KAAH,CAA3B,GAAuC,eAAe,KAAA,IAAf,IAAA,eAAe,KAAA,KAAA,CAAf,GAAe,KAAA,CAAf,GAAA,eAAe,EAApG;AmB8G4C,AOhJzC,ACoFH,ACgHA,AI5FI,AtFrGL,AsGQS,AIoBP,ACZM,AkBuBF,AwB6EC,A3EpFI,AiBIJ,AgFtBC,ACJL,ACKU,AK4BV,ACuCA,A5BrFO,A2CYR,AEbL,ArIsPQ,AsI5MgC,AIQnC,ACvCM,ACyBQ,AClBN,A9JpDP,ApBVF,ACGJ,AVDK,AGCL,AN2BI,AKbA,AIf6E,AnBU1D,AORpB,AHAE,A8C4EF,AxDkIE,AYlLK,AhBvBD,AqDMJ,AhE3BL,AmOgCoB,ADpBnB,CCoBD,CxNXS,C+EkLC,A4HrGD,A1LvFP,A2C8EA,APlEuB,CqJiCzB,AC0CE,AtJtEE,C2DsDA,AmBTE,A0BhCI,A2CyBN,AOkCA,ChIuGM,AoDnIN,A+CFE,AOwEA,ApHgKW,A3DtRM,CmJmCX,AmDIF,CzH8EF,ACgHA,AI5FA,A5DrJC,AhBgCG,CiB7BZ,APAA,AN2BS,AKbA,CuD+DK,AiBIJ,A5B8MW,A3DtRE,CAAA,CiJwJP,AwBrGI,AnLtDX,CwLkFI,AnHuMQ,A4IlNF,A7JtEN,ApBVC,AtBYS,AVHd,CUGc,C2DsRF,CWlND,A6EnDV,A6CeV,ArIsPqB,AjDpQjB,AKbA,CkImJe,AwBrGM,AnJ/DP,AtBYK,AMoBF,C4EqHH,AKjEA,A4DpCN,CjEqGO,AKjEA,AyGxCnB,AOoC0B,A7LlDP,AKbA,AzBRV,C2J2Ja,AuB1GF,A7GwOZ,A4IlNmB,AjMhDN,CyKkGA,AzJlIZ,CiEoFC,AkFrBoB,AzJ5D9B,AV6BqB,AhBvBnB,C4F4IM,AKjEe,AiF1BA,A9J5BnB,AJEiB,C+DwJA,AanCG,A6FnBA,AwBlDL,AxL/Df,CsDsKa,AalCQ,AqHrEO,AjLhFN,C+CuLxB,AQtDwB,A7ErHH,CkFyIf,AuFtFQ,AzKnDO,CwK8CjB,AOwEA,ClGDuB,AqBzEP,AuEOe,AzKnDd,CmJoCX,AoDgCO,AjLhFY,AtBYR,CiJwJU,A+CxHjC,AOoCmB,CtDoFe,A1HjKlC,AjB6BU,AhBvBS,CgCTe,CAA1B,CuDiIJ,CU7CM,AuFOJ,AxLlFJ,C2J2J+B,CnE6Eb,AmE7EV,A3HpK+B,AhCSE,KgCTG,AhCS5C,CwFwOM,CAAJ,AoBzLkC,A5G/CgC,C4G+C/B,CpByLV,AxDjPqB,I4EwDZ,AxD9CT,ApBVY,C4EwD7B,C5G/CV,C4G+C6C,C5ExDW,AhCSiC,CoDC9E,EAAuB,EpBV2B,G4EwDnD,CACG,C5EzD2C,EoBU7C,CAAP,ApBViE,CAAnE,EAAuE,W4EyD1C,GAAG,IAAI,sCAAJ,CAAuB,UAAvB,EAAmC,WAAnC,EAAgD,eAAhD,CADxB;ApGlCR,AuE6KF,AOrJG,AhCwDH,AkC4II,AerMF,AGYY,AEEL,AuB+BR,ACtBC,AuBkGM,A1DjFD,AgFtBA,ACHH,ACIY,AK4Bb,ACuCA,A5BjFS,A6CFZ,ArIkPM,AsItMP,AMZqC,ACjB3B,A9JpDN,ApBVC,ACxBN,APAA,ANuDI,AedA,AnBcM,AhBtBN,AXpBJ,AmOmCA,CvLhDA,APAA,COA6C,APAV,CyG8D1B,CAAP,AC6BE,A/I9EA9I,AmOmCEqO,CvCeE,AOiBJ,ACuEA,AwBlDE,C3JwBA,A4H1CA,ArBVQ,AxFgPS,C4IjNf,AC/BA,C1M5BA,A6D4Qe,ArDlQA,CRVd,AuE6KA,AwBtJA,ANwBD,AiHHE,A9LlCD,CgHoCC,C9EkCC,A8ElCA,AsEpBT,ArIkPqB,AlChRZ,AnCRA,AwNeE,C9GgCO,AiD6GN,AEpHM,A1HhCR,CqDgOC,AerMA,AlCqPU,ArCjSV,CuE4CC,A2EeA,ACIQ,A9GkOC,AjDlQnB,AoMPY,ClK6ED,A2CjBA,A4DnCQ,A7IlBO,AhBtBf,CQYP,AkFiU2B,CAAC,Aa1SnB,A2EeA,A9J5BA,A/B1CA,CkHuDb,AlCqPI,AlChRU,AnBcY,CsCsE5B,AoD7CyB,AiD6GR,AEpHL,AoD+BN,AC/BA,AlLjDK,CxBqBO,A+FuBA,AGYQ,A0BWxB,A8EnBE,AlLhDO,AhB+BiB,A3B1CV,CiEgHC,A8EjCf,AjGnDe,AnBcS,C2IsIR,AwBtGJ,A/JhCd,C2DmKmB,AmGvIA,AwBZrB,CxBYsB,ACIQ,AuBhBX,ChGSD,A0BYV,CrD8HiB,AWoJQ,AgB9RD,ClGnCP,CAAC,AmJgJA,AxHpJA,AnBclB,C2IsImB,A+CtH3B,A1K/CW,AGiBgB,AnCRlB,C0F6UsC,A1DtV9B,AGiBS,AnCRE,AXpBDpO,CqN0DS,AvK9B3B,A9C5BS,C0F6Ma,A4E7BX,A1H7LtB,APAA,CqD0NkC,AwBtJD,AoDyHA,AuB1GhB,AjJnFjB,APAA,ArCagCC,C6LuExB,AlLnDG,AXpBS,CmOmCMmL,C9GgCS,AvEvCC,AnCRA,AXpBD,CmBgC/B,AuE6KuB,AS+CL,AerMe,CxBsJE,AwBtJD,AoDyHhB,AuBzGV,C1KvC2B,AkFiUmB,AiEjLhD,A+CtHR,ChHuSyD,CgHvSL,A1MtC3C,AwNeK,C9GgCkB,AvEvCQ,CAAC,AnCRA,AwNeT,C9GgCO,A1ExD5B,C0DsV6C,A1DtVzB,EwDiPV,CerMyB,ApE3BZ,CuDqU6B,Aa1ShB,AvE5CpC,CAAoB,AwLwBjB,CxNfL,CmCQyC,AnCRhD,AwNeuCwC,ExLxB9B,CuE4CO,CfqME,AEqG2C,A1DtV/B,AwLwBlB,C9H8TiD,CFrG5B,AEqG4B,A8H7ThE,CjHmB0D,Cb0SM,Aa1SL,Cb0SK,AvDrU7D,CuDqU6D,Ca1SF,A6BwBzD,AjGnDyD,CiGoDvD,CpGrEK,EAAgC,EAAhC,CuE4CyD,CAAC,AvE5CtB,GoGoE3C,EAEE,A8CVA,AlJ5DK,CuE4CT,A2EgB2B,AlJ5DzB,C+CkMkD,CwBtJuB,CAAC,EAA5E,EAA8E,E6B0BzE,C8CVD,EAAmC,E9CUnC,CrD4H+B,CAAZ,AqD5HV,CrD4HM,GAAsE,CmGtIrF,EAA8C,GnGsIpD,SmGtIoD;A1KtChD,AkElBA,AK+LL,AzB7FG,AkC2IsC,AEsGpC,AEjME,Ac9FsC,ApGP5C,AsGUO,AIuBL,AmBQH,ACnBS,AnCcA,AiFxBA,ACGU,AtBdP,A2CQT,AEXiB,ArIkPb,AyI/NE,ACiCN,AC3CM,AC0BA,AjLjFL,ATID,AH4BA,AKfA,AIZA,AMYE,AelCA,AjCqBJ,AHDE,A8CgHF,AxD8FE,AYnLM,AHFN,AbnBD,AXpBC7N,AmOoCH,AD1BM,EjNiDL,AW5CA,A2C+GA,AvE9HEA,CWkBK,E4GyCH,AiDrBI,CzB2CA,AyB5CF,AxFsQqB,A4I/MnB,A9KhEJ,CyE0CE,CtD0CA,A0DpBE,AkErBA,AsBHA,AOyCA,AxL9FF,AEaA,AIZC,AbyBuB,C0LgBX,AtLdZ,AN7BA,ADyBA,A0M7BOmM,CtHqFN,A6GnBM,AEVF,A9JxER,C1CsCK,A6D2QuB,AyI/NjB,A1LjCb,AhBiLO,CwF5DC,AuFtFQ,A8BkBH,A/JlGX,CwBoBQ,AuI8EI,AxLhEd,AIZU,AMYD,AelCP,CqD4DO,AmGGQ,ArIkPa,AyI/Nd,A1LjCN,AefA,AlBbZ,A2C+GA,C4B6HwC,A4C1KvB,A3GrDJ,ARbb,A2C+GA,AvE9He,CgF2SiB,CqBsD5B,AEjMW,Ac9F6B,AgGTzB,AnL1CJ,AMCC,AqBtBZ,CwCuWA,A0ChRgB,A7GlEJ,AlCfEhM,CmBgCd,AkFiUA,AkB3RE,AIsBa,A8FhBI,ACiCJ,A3LlEF,Aefb,AoLlBC,CjNiDL,A2FoCkB,AkFrBQ,AoChED6L,C7HuVf,ApFtSV,A2FoCmB,AkFrBQ,AqBNN,AnIuOW,A4I/MxB,A7LjDI,AS3BL,AzB4ML,CI5LkB,AwG4DE,AkErBA,AwBdH,AImBO,ACiCJ,CrG3C4B,A0Be1C,AtHnEN,ADyBA,A0M7BG,C/HiP4C,AkBzLE,A8FE3B,AvLrDxB,A2C+GA,AvE9HwB,CmG2P0B,A0FpLzB,A8BLjB,AzLnDF,AH4BiB,AS3BC,AZDxB,A2C+GA,AvE9HyB5L,AkOUK6L,ClJiSE,A9C5RR,CfiBC,A6D2QO,ArDlQiB,AuM/B5C,ChIiIM,CU5CH,AiFxBA,AqC7D0B,C7GwDU,ApGP5C,A+DgPmC,AjDhQP,AS3BC,AbyBoB,CVkBjD,AsDmEA,CuHpDkB,A2BEA,AvL7DZ,AP0B2C,C4EuH3C,A/DhJ0B,AZDhC,AD0BiD,C0D3BhB,Ac6OgB,AwB/J3B,AwFxBG,AOyCH,AlL7FhB,A+B8GN,CchHkC,AgBmVV,AEjMS,AkHpFM,CtH+KsB,AEsGpC,AoHrRjB,A7L7DR,CMAmC,CAAjC,AMCqC,C2KoDf,AnNpEN,CkCeoB,CfiBlB,A+E2GE,AGsNE,A8G7RS,C9G6R7B,ApFtSJ,CE3BI,AkFiUA,A7DjVwC,AxCfrC,C+B0CgB,AwCmFhB,C4B6H0C,AlFhMjD,AchB2C,CsD7BV,Cc6OuC,A3D3OxB,C6CFD,AzDC/C,CoD4RgC,ExC3RO,CwC2Re,ArDlQ9C,EsCuEkB,AkC2IuB,AnBgD3C,AjDhQiB,CoEgNiB,A3D3OgB,CT2BF,CdgBtD,CsDmEA,CNdM,CoBlG2B,ApBkG/B,AzBhG2D,A+B8GK,CchHtD,AtD6B+C,CsD5BpD,ApBiG2B,ClCrEX,EAAwC,AS3BP,A+B8GxD,EchHY,AdgHkF,Cc/GjF,A7CCwD,CAAnE,CT2BqB,CAArB,AS3BuE,C6CF7D,EACO,Cd+GnB,EAAmH,CchHvG,EAEL,IAFK,CAEA,8BAAY,SAAZ,CAFA,EAEyB,0BAAU,SAAV,CAFzB,CAAR;AlEmBD,AkEhBA,AYuCD,ACoFE,AjC3BA,AkC0IoG,AerLrG,AX6FK,AcjGiD,AEKjD,AIsBJ,AoBXI,AuB8FA,A3EjFM,AiBCP,AgFvBD,ACIE,ACFU,AK6BhB,ACuCA,A5BhFG,A2CMD,AEZgC,ArIkP9B,A0I7LF,AEjBI,A7JxEN,A7BLE,AH6BF,AKhBE,AIZA,AMYA,AzBPM,AONF,Ab6MP,AYpLO,AqCfN,AhEzBO5L,AmOoCV,AD1BE,G1DoBG,AzJmKJ,C6KzHM,AO+BJ,A3B3EF,AxK5BSA,CqFYP,CkC0DM,AwBWA,A/DyNgD,A4I9MhD,A5JnEF,AkKfD,C/HgPM,AnCjOJiI,CoIqHC,ApH4JgD,AjBtRlD,A1CCI,AONF,ADyB2C,CwEmN7C,AkB1LY,AwEWT,AwBpB2B,CnHmF5B,AmB1EM,AM2BN,AwEWA,AuBMA,A9L9FA,CqEwCC,AkGgDA,AnHmM+C,AjD9P/C,AehBA,CuEqCmD,AiD8GhD,AwBrGM,C7HsCP,AqG+DE,A8BjCA,Ae1ER,AnIsOmD,A5C9Q5C,AIZD,AZDkC,A5Bf3B,C+IiFF,A/DyNwC,CuBxI3C,AxEtHX,A/B5CkB,CuHsEF,A5BwBE,AyGgDJ,AwBlDE,A9KhEd,AzBPc,C0H4DC,AsEzBiB,AOoCjB,AhM7EX,CsE4HQ,CqBrEK,AnF1CH,AIZP,AMYM,AzBPM,CiJ0Jf,AwBrGkB,AK6BxB,AkB/CkC,A7KxCzB,CyDuCT,ACoFiB,AiGpCA,C7BwEC,AsBvGI,ACIF,AsBRR,A/KxCO,CmEsIb,AgB5FA,AIsBJ,AmElByB,A9GgOvB,A0I7LF,A1JpFmB,CuCyID,AsFtFd,ClEgBe,AwFxBN,AOyCM,AEjBf,A9KhEe,CoD+GnB,A6C1DwB,AjGrDJ,AnBY6C,CoHyCxC,A+CPX,CDEU,AOkEZ,AiBtFoB,ArJ/BRE,C2BqEK,AvDlEL,AIZjB,AbwB0D,CoHyClD,A3GrDU,AIZZ,CMYb,AnBYiE,CoHyC7D,ApDa4B,AhEtDiC,C4E0H7D,CtClDwB,CAAC,AsCkDA,AnEtIZ,E+J2Ec,A/J3E/B,CuDkEsC,AwGSN,CxGTO,AvDlEH,C6BoFR,CAA5B,A5C3FyC,CAAA,C8EsOrB,AjE5OF,CyD+Ec,AwGSD,A3JvFxB,AwBSJ,CxBTwB,CmD8EjB,AwGS8B,AgBnCjB,ApJhDL,E8HwD0B,A7HnDA,CmCkO1C,A3D3OK,AwBSsCF,CmCiOtC,A3D1OoB,AnBKrB,AMmBF,CwEkNJ,AIxFI,AsFtF2C,A9HxD7C,CoImF6B,ApInFjC,CoImFA,CpInF4B,AvBJnB,CqJ4DiB,CrJ5DI,CqJ4DxB,A3J7DJ,CAAiC,EAAjC,EiLqDuC,CAAC,E3KpDjC,AwBSL,ExBTqC,C2KoDA,CAA1B,A3KpDN,CwBS2DK,CmJ2ClB,A3KpDL,KAApC,CAAP,A0LNwEyD,Gf0D3D,AnJ3Cf,CmJ2C4D,Ae1DzD,ClKe6E,AkKfDJ,Gf0Df,Ae1D7D,CAAJ,EAAsF,mCf0DzB,CAAuB,UAAvB,EAAmC,aAAnC,EAAkD,iBAAlD,CAA7C,CAAb;A9HnDH,AK6LG,AOtJH,ACoFG,AjC3BD,AkC4IA,AevLF,AX6FM,AcjGS,AEKR,AIsBF,A2CoFI,A3E/EI,AiBFT,AgFvBA,ACIE,ACFW,AK6BhB,ACuCE,A5BhFL,A2CKqI,AEZ5E,ArIkPlD,AyI9NE,ACkCF,AC5CE,AC2BD,ACrCL,A9JnCE,ApBPF,AZ+BD,AKhBK,AIZH,AnBKD,AOPM,AHDN,AE0BM,AHDN,AbYF,AqDzBM1D,AhE1BC,AmOqCR,AD1BKkD,EvNwCJ,CsFHA,AiBFA,A0EDI,A7J7CG,C6J2CP,AO6DE,AnI9EIlD,AkKfFkD,CfwDF,ASmBE,CxByDA,ApH2JoD,CuCnO/C,AsEFH,A+ByBA,CrGvBI,AsEHK,AlJtDT,APeA,ARdI,ADyB6D,AHDjE,CkEuKQ,Aa/CR,AsF3FF,AgCZG,ArMjBA,C8I0IG,AmDrGE,AEVA,CFUC,ApMtDJ,AIRA,AyMHE,CvGkFC,AhCKE,AmGvBI,A4BmCN,ArMxFF,AV6BV,AuNxCYC,C/B6FD,A0BhDA,A9JnCA,A1CCD,AV6BV,C0GesB,A8EsCV,A0BhDA,AzL3BA,AZUA,C+E4HC,AvBuIoD,AyI9NhD,ArL/CJ,ApC7BuBnL,AkOWhC,C3G4DK,AIsBO,A2CoFA,AmDrGJ,ACkCI,AQnGA,C5DsKC,A8BlCF,AyBvFA,AlL1CA,AfCI,AHDjB,CuD4R+D,A4IpN7D,AC9BF,AlL1Cc,CgF+EG,A+FiBA,A/LtE+D,C0F0BtD,AEKN,A+C0GZ,AtFyHuD,AyI9N3C,AGmBhB,ACvCY,AjMzCC,AoCWG,AhE1Bf,AmOqCJ,C5GkCoB,A+C0GF,AmDrGE,AIpBJ,AxMlCD,COPC,ADyB+D,AhBWlF,C0GeoC,AM2Bb,AwEWrB,AuBMqB,A9L/FJ,AJwBjB,AbYF,AqDzByBqI,CmI8EH,AsB5BI,AIpBJ,AlMhB4D,A3BxCrC,CgF0SoB,ArC5R3D,AhB0B4E,AHD3D,CkEuKnB,A4E7BM,A3HnKc,APelB,AfPY,CqEyLlB,AQnEc,A2HpFZ,AlNLF,C2J8H2B,C3E/EI,AmGvBI,A+BnBR,AK7CvB,C7GuDuC,ArCwOsB,A6IlPrC,AxMlClB,AV6BV,C0Ge4C,ArCwOqB,CWxM/B,AiIH5B,ACvCJ,AlL1CI,AfCE,AuMsBC,CnKXH,CkCkHe,AmB1Ee,ArCwOgC,AyI9N9C,AIpBQ,AxMlCpB,ArBtB6C1I,CkG4IjC,AmB1E0B,AiD+GhB,AtKjLa,C2BwCrC,CgB1B2B,A3CduBC,C0F8MtD,A4E7B+B,A3HnKjC,A3Cd2C,CuHuEpC,AkGKgC,C/HoIzC,AyGxGsC,AsB5B9B,A9K9D8B,AhCqCjC,AXnDwD,CmMwGtB,CxGNK,A8HtBA,ApMtD1B,CkGiD2B,A5B2BA,E0BhCI,A1GfjD,CuFyFqB,AP1Ca,AXwM8C,CkB9J5E,AoEqCwC,A3E/EK,AwGMX,A9KlFpB,AV6BJ,E+E2JV,AQlEgC,AyB/CjB,AwEW4B,AuBM5B,CpDmE4B,C5EgC/C,A2B/IgD,AM2B1C,A3C6M0E,A0I5L1E,CrMxFY,CgG4CqC,AhG5C7C,E8KkF4B,AnHkM8B,CmHlMlE,A9KlFgB,E6EsHd,CACE,AoEoCkD,AtFyHY,EuCnOL,A+C0GnB,AjJ3J1B,CkGiD8C,AlGjDtD,C6EuHA,AnCxHuB,CuG4J4B,A3E/EK,CD4G9D,AC5G+D,AtE5EzD,EqE2LuC,C6B1IzC,A+C0GyD,AvG5JtD,EAA6B,CiBqRwC,EuCnOL,A5B2B1B,AtE5E/B,CsE4E0D,AtE5ExD,E2DoR4D,GjBrRrE,CAAP,CiBqR4E,CAAZ,CuCnOiB,CAAC,A+C0GzB,CtFyHO,CsFzH1D,A3E/EkE,M4B3BD,EAAnE,AlGjDE,G2DoR0D,E3DpRxB,C2DoRwC,CkB7J9E,CACE,UADF,EAEE,K7EzHC,E2DoRwD,A3DpRA,G6EyHxD,AlB2JyF,EAA5F,A3DpRG,CAAwD,E6EyHzD,EAAM,C7EzHmD,CAAxD,EAAwD,0BAAA,EAAA,EAAA,mBAAI,IAAJ,CAAA,CAAxD,CAAP;AFWA,AuEgLF,AQjEU,AC8GT,AEkGG,AazRL,AX8FS,AcnGoD,ApGPlD,AsGaH,AIsBD,AoBVE,AuBkGE,A3EpFwE,AiBD/E,AgFvBJ,AEEkB,AK6BhB,ACuCG,ApH0JE,AyI7NI,ACkCJ,AC5CI,AC+BF,A7J5EL,ApBPC,ATCA,AEcC,AUAD,AzBPH,AORO,AHAP,A8C+GC,AxDmGM,ASzLJ,AbYF,AqDzBI,AhE3ByDD,AmOsC/DsN,AD1BItB,EnNqNI,AoN3LRsB,ChCUO,A9KpDqD,AIY5D,C0KwCA,AnMhD+DtN,AkOY3DgM,C3G8CA,AXiBF,A5G3E8D,C0FiNhE,A6BxJE,A6EuFE,ApH0JgG,A4IxM5F,A1LlFJ,AlChB6D5L,AkOY3D,CAAC6L,CjN+CG,A0GmCJ,A3C4M8F,AyI7N1F,ACkCJ,AC5CI,A/LpDW,AjBqCf,AwNdA,CAACA,C9H0TH,AE3LI,AwCjFI,AjGtDH,AtBUC,CLPD,A4HmDI,A+CZG,A9GkOoF,AT5K3F,APnGIvD,CkCqHC,AGgNV,AtF/HI,CmFjFO,AGgNX,ArBtDgG,AjEzE5F,AJ7KG,CMOK,AqJ2HA,AtFoHoF,A6IlPzF,AjMzCgB,AJyBb,CiMqCG,AvL7DJ,AYcC,A9C9BiD,CmBiCjD,AiL+GA,AqBnEI,AvL7DJ,AgMJV,C7HoVA,ApFrSiB,A6KiBE,AlK7DI,AJyBV,CmGsDD,A3C4MV,A0I3LU,A5KjFC,A9C9B4DzI,AmOsC7E,C9G4B4D,AM4B3C,AyEkDA,AsBjCA,A9LhGU,A5BfoC,AkOY5C,CxIqMnB,Aa5CkB,A3EtJS,CsEiIjB,AKqBS,AwCjFX,AuBkGe,A3EpF2D,A8HrBxE,AzJlDa,AmKWJ,ClNqBM,A0GmCnB,A+FiBA,A3MkHE,ASzLc,AbYpB,AqDzBsB4I,CkCqHC,AyBlDJ,AoBVI,A2E2BJ,AC5CI,AC+BA,A7M+HjB,CIhMN,AmJqJwB,AmDzGC,A3K/CJ,AnCsBD,C+E6JtB,A2B/IkE,AvEpC1C,AkBHD,CqDuC4C,A+E8E3C,AuB7EI,AzLnDxB,ANDI,AsMHJ,CvGkFE,A+FiBA,A1JpFuB,C/CgCnB,A2MuCe,A5JvEF,CuC0If,A6FrBmB,AlKhIA,A8BWrB,C0BsLN,CAAA,A2B/I4D,A1BgCgC,AnE1D3E,CmE0D4E,A8HrBnF,AGqBF,A9KpES,AtBUe,CkEyKhC,A2B/I4D,A+E8ExD,AtJlH4B,G8KoExB,CpM1DS,CUxBb,CYckC,AyBgGlB,A/CtFhB,CsBVmC,AyBgGnB,EAAA,GoB5BwE,A7CpE3E,AyBgGI,CoB5B6D,C2EoFjC,AqDnHX,A7KrCQ,CwHwJI,G6DhJlD,CpN2LQ,CuJ3CyC,AsDpFxB,AjLnFE,AGeyB,CAAC,CwHwJE,AvJ2CvD,G6M/HyB,C9KpER,AyBgGG,CzBhGhB,EwHwJ6C,AqDnHI,A7KrCS,CwHwJpD,AqDnH4C,AC+B7B,CAAjB,CrJ4BmC,AxDmGL,E6M/Hb,ErJ4BL,GoJ3DiC,AC+B5B,CD/BG,AC+BpB,AjLnFJ,A4B+GuC,CoJ3DjC,AhLpDsC,C4B+GL,AxDmG3C,C6M/HQ,AjLnFJ,C5BkNiE,GwDnG1B,KAAA,CAAvB,GAAuB,IqJ5BlB,CAAE,ArJ4BgB,CAAvB,GAAuB,EAAA,CAAE,IqJ5BrC,ArJ4BC,EqJ5BD,ErJ6BF,KAAK,OAAL,CAAa,cAAb,CADG,GAEH,KAAK,EAAL,CAAQ,cAAR,EAA8C,KAA9C,EAA4D,QAA5D,CAFJ;ApD5FD,AkEfD,AK8LA,AOvJA,ACuFY,AjC/BV,AsCoDK,AcpGoE,AES1E,AIoBK,AoBVI,AuBkGA,A3ErFiG,AkGlBvG,ACHc,AK6BnB,ACuCK,Ae3EF,AEbJ,ArIiPQ,AyI5NG,ACkCH,AC5CG,AC+BD,ACtBL,A3L5DA,AH8BO,AS5BR,AMYI,AzBPN,AOTQ,A2CkHP,AxDiGC,AYzLA,AhBYE,AqDzBD,AhE5B8E,AmOuCjF0C,AD1BI,EnMkCM,AVvBV,A8MeAA,ChNXU,AoGMH,AhD2FP,AvE9HkB,C0FkNlB,A6B/KA,E6E+GI,ApHyJgG,A4IvM5F,AjN9CJ,CgNaI,A3NjEF,CiEiHA,A8E7BI,AoEfF,AQFE,A/LrDmB,AbmNrB,AYzLF,C0DtBC,AYuCA,AoHDT,A1LhBS,AwMFA,CjI0GK,AoEsCF,AuBvGF,A7G0NgG,A3DlRhG,A8MeAC,C9G2B4B,A7E/C3B,A0LNE,C7GqDK,AM6BJ,AmElBM,AqBPN,AO0CA,AEbE,AvM3EJ,CsE0EuC,AXwMuD,AjD3P9F,AoMRV,CxI2DkC,A5DnDxB,AoMRE,ClImBZ,ANwC+B,AwH5BhB,AnIoOyF,A2ItOvF,AC+BA,AMtFb,ElOZYxL,C0FgNhB,AQhEoB,AyBlDF,AoBVE,ApDa4F,AyG+ChG,AuB7EN,AhM3BR,A3BxCI,C6L+EF,A+BmBI,AhMpFgC,C0IwKpB,AtFmHoF,A0I1LtF,AC5CI,AnLjDJ,AbsBA,A3BxCCC,AmOsCnB,C9IpBO,AK8LP,AQhEuB,AyBlDG,AoBVH,AuBkGF,AuBvGF,ACHQ,AMoER,AiBxFrB,A7KtCqB,AxClBb,C4BckC,C+FgFlC,A+FiBe,A3LjEX,AhBmLa,AfjOD,C8L4EQ,A/J9BpB,AHhC8B,CsEkI5B,AoEsCF,AtFmH8F,ApD3RhE,C0IwKd,AtFmH8E,AxCvR/F,AzB+MsB,CoM5JhB,AO0CU,AlL7FA,CmD+EiG,AmGrBxG,CnGqByG,AXwMhB,C+DrN3E,CAAC,AqD4DJ,A5J9HpB,A7BkCoB,C6BlC3B,A7BkC4B,C2JkIpB,AtFmH8F,CoHzJxE,EpHyJgF,ApD3RxG,AbmNN,EkDhHgB,AewLZ,AjD3PI,C2DkKV,AqD5HuB,AqD4DnB,CrD5DsC,ChHtC1C,C4DmD0H,C1BgBpH,A0BhBQ,A+HcO,CzJEnB,CyJFI,CzJEoB,KlCnED,CgHsCF,EAAiC,MhHtCxD,CgHsCuB,CAAb,AhHtC0C,GAApD,EAA+D,KAA/D,EAAgF,GpBMjC,KAAjB,CAAD,EAA0B,IAA1B,CAAzB;A0ElCG,AK8L0C,AOtJlD,ACuFa,AjC/BR,AkC+IJ,AI3FK,AcnGW,ApGRd,AsGgBH,AIoBO,AoBVG,AnCaP,AiFdI,ACPW,AMoEd,Ae3EC,AEnBN,AK6DQ,AC5CI,AC+BH,A7J7EL,ApBPE,AZ+B2D,AKhB3D,AIXH,AMYI,AzBpCuD,AIqB5D,AVkNE,AYzLE,AhBYD,AXrDqB,AmOuCxB,AD1BE,CbsCJ,AhMxDO,A8MyCN,C1MpBC,A0MgBc,CdmBhB,A7K1CY,A2LuBZ,ADvBG,CjNkDC,A2FuCA,A7FgIA,CqLrFA,AwBxDE,AjNlCF,AwNVJ,ChIwNM,AyH7KF,AjLrEE,AhB0BA,CwEwNC,Cd/OE,AwGkED,A8BhBI,A5J9CJ,AhCwByD,C/B9ClC,AkOarB,ChIoII,ACgHZ,AkB9LgB,ApGRd,AkMWM,ClMXN,ANNO,CwF4MC,AwBlKE,A+FiBA,AtLlFF,CiDZH,ApBgGI,AlCpEoD,AJLpD,A3BzCsBK,C2ByCrB,A3BzCY,C2CeX,C0CGN,AwGkEO,AlJrEA,CiEmFC,AiFdA,AzJtDX,AXdJ,C0LsDI,ApLxB2D,AN9B/D,AEyBI,A3BzCkCL,C2NoEjB,A5M8JJ,AYzLA,A3BzCO,CqFkBjB,AgCiDmB,ApGRxB,A0GoCgB,AwFzBA,AO0CA,AC5CI,A5M8JJ,CsG/JS,ApGRnB,AjB3DiC,E2H+FpB,A+FiBA,AC5CA,A5LtB0C,C4LsBrD,A5LtBqD,AJL3D,C0F0BY,ArHnE6BC,CiEkHrB,AoD/CQ,A1EpD5B,AZ+B2D,CkCoEtC,AxClGzB,CyEiI8B,A2F7DxB,ApKpEN,CkBD2B,E3CfwB,CiEkH3B,AhDvDtB,AQ3CF,AzBhBoDK,CiEkHhD,AhDvDe,EQ3CnB,CsCMiB,C9CqCf,CAAiB,A0B5Cf,E0EoD0C,CtD7CxC,A/DtBuC,CiB2D3C,A8CrCA,A/DtB4DC,CqHmEb,CtD7CxB,CtCNpB,GVkNH,EUlNF,CVkNiD,CUlNpC,GVkNX,CflO2C,CqHmEkB,ArHnEcC,CqHmEd,GrHnElB,CAAqCR,CqHmEjC,ArHnEJ,CqHmEkB,CrHnEsBK,CAAxC,CAAJ,EqHmEsB,ArHnE0BN,CqHmExC,ArHnEyC,CAACM,CqHmE5B,ArHnE2B,CAAD,GAAOL,CAAC,CAACK,CAAD,CAAR,kBqHmE1B,EAAA,EAAA,mBAAI,MAAJ,CAAA,CAAd,CAAH,GAA+B,MAA7D;AlGhCN,A+E+GC,AjC/BR,AkC+ID,AI3FC,AoBvEK,AoBVD,AuBkGG,A1DrFT,AiFXK,ACVS,AK2CjB,AgB/CQ,AnIqON,AyI3NQ,AC6BA,AC5CE,ACiCT,ACvBC,A9JxDE,ApBPD,ATED,AH4B6D,AKf5D,AUCA,AlBjBD,AHEA,A8CwHF,AxD0FU,AS3LN,AbcA,AqD1BF,AhE5BqG,AkOcnGiL,E/MqBM,AoDsGV,CqCjEO,AgHvCA,A5NnCL,C4G0EF,AgHvCA,AC8CE,ApM9DA,AyMHEA,C3H2IK,AwC7EL,C/DmOA,AjDjQ2D,AiClBzD,CuC2ID,AwChFC,C8CCA,AsBdA,AvL3DA,AboNI,C+K7JI,AKmDP,AvK1GA,CuEmPC,AIzGC,AoBzDD,A8FZI,AC6BJ,AGlCA,ApM9DN,C8EwIA,AvBsJO,A6IhOA,A3L7DA,AH4BsD,AN7B7D,AdqCO,AuNxCE,CTsEG,AStEFC,CnKSD,AvCiBgB,C2E0Nf,AmE1EE,AvI1IiD,AwC2F/D,CuH3DqB,A9GiOR,AjDjQkD,AwC2F/D,A2J3HI,CvGkFU,AkERA,AsBdA,AOuCA,A3MkHI,AJ7Kd,AuNxCY,CTsEJ,AjM5Ce,AbcZ,CgH0CD,A+FiBA,C3E1BR,A8CCW,AsBdA,AnIqOb,AjE5EmB,CoL1GzB,AsBrCwB,AILpB,A3L7DA,ANHA,AHEA,CoM+DE,ApM/DI,C6IuKE,A1IzKU,AjBuChB,CQnBM,AgF+NF,A0F1KF,AMiCY,AnHsLG,AxDvQM,CLLjB,AgF+NY,AwBnKD,A2CyFG,A6C9GlB,A5I+DN,AxD0F2B,C8MnJnB,ApM/DN,A8CwHF,CmJzBqB,AjM/FT,ADuBe,CwDuQF,GyI3Nb,AhMnEV,CuD8R2B,AvD9RjB,CVkNF,CIhMA,CAAA,A+MrBN,ClJiSJ,AyI3NqC,AhMnEnC,CgMmEM,CzI2N2B,AvD9RrB,A8CwHd,CkJrDwC,ElJqDxC,E9CxHmB,CNkBT,GAAV,AgF+NQ,CAAN,A3E1NyB,CCvBb,GAAc,ADuBD,C+CiG3B,A/CjG2B,CuCjBC,CvCiBG,ECvB7B,ENkBF,A4CZW,EAAwB,EvCiBJ,CqMwC3B,CAAuB,CrMxCI,IuCjBpB,CAAP,CvCiB2B,CAAA,EqMwC3B,EAAmC,ArMxCR,EAA3B,EAA2B,CAAA,KqMwCS,GrMxCT,CAAA,CqMwCQ,EAAM,CrMxCzC,EAA2B,QAAA,GAAA,MAAA,CAAA,IAAA,EAA3B,EAA6B;ALJ/B,AkElB0B,AKgM5B,ASiDC,AI3FA,AcjGe,ApGVd,A0GoCM,AoBPA,AuB+FI,A3E7FA,AiBQb,AiFVO,ACXU,AK2ChB,ACwBE,AevEI,AnIsOJ,AyI5NQ,AC6BF,AC5CC,ACiCV,ACtBO,A9JzDH,A7BLF,AH2B+E,AKd/E,AIZH,AZJM,AHEH,A8CwHO,A5ChGJ,AHFK,AbeN,ANVI,A2DhBD,AmKcR4C,AD5BMpC,G3H2HG,ArEvIG,AEIH,AXSP,C8E0HA,A2H3HIA,CjN8CD,C8H6BK,AmF3EF,CvM2BD,AwMCA,AD5BEC,C7IGqB,AwGwEtB,AOwDE,A7HRA,A4J/FF6B,ChNPC,AuE8KA,AyGxFA,A3JtGT,AnCqBQ,CsHwDE,AoBPI,A+CXI,A9GkOR,A0I/LA,AGjCE,AtJyDF,CtD7EN,AW7CO,CyDEmB,A8HyDhB,AMUI,ClJqDiB,C8CnEb,AM0BR,A3CgNA,A0I/LA,AlM1EG,C6DtBa,AwI+DtB,AxNpCO,CYgBA,A0GoCD,A2CwFM,AoDvEN,AQnGR,C7IGwB,ApE2Cf,A0E+BM,AkGFJ,AsBfE,AUMA,AtJyDT,A4J/FV,ChNPI,AgNOc,CzIuKR,AzErJK,AiN9CM,CrC2ED,ACXQ,AqBJN,AMUE,AC2BD,AlL5FvB,CrBgBqB,AkGmCQ,AyEQA,C3K3CzB,AkGmC0B,ApGVf,AW7CT,AJwBmB,CmEoDE,AXqNjB,AyI5NiB,C9HOC,AXqNJ,C6GvNhB,AjK1EiB,AJwBA,C6F+BH,AyEQJ,AnKrCZ,C0F6B6B,ApGVf,A6KkBe,AMmEN,AqB7DE,E/H6HtB,AyHvID,AvL3DF,C+D4Ee,AmGbH,AMmEc,AzKxGF,AuM3BxB,CxImM+B,ElE1KZ,CmEoDa,AnEpDb,E8IiJa,CjDlHF,ApGVrB,AUnBsB,CAAC,C2I+IG,A9IjJ9B,CmEoDiC,EyGsDZ,AzKxGF,C0F6BK,ApGVL,AqJ4He,A3E7FE,A8HPpB,A9L3CgB,E0F6BC,AoGchC,CpGduB,ArC0OzB,C/DpPK,A+DoPX,CqC1OyC,GpGVf,EAAA,A0E+BhB,EAA2C,G1E/B3B,GUnB+B,CAAC,CVmBhC,CAAf,CUnB4B,EVmBb,GUnBwC,EVmBxC,CAAf,GAAe,EAAA,CAAA,EqJ4HW,A3I/IX,C2IqJd,A3IrJV,CVmBwB,CAAf,IAAe,CAA1B,AqJ4HqC,EAOzB,YAAA;AnJ3JJ,AuEgLR,AQlEQ,AjC/BR,AoC0O+D,AErLlE,AclGiD,ApGT/C,A0GiCoB,AoBJb,AuBwGQ,AuBvGV,ACZS,AK2Cb,AC0BE,AezEE,AnIsOL,AyI5NS,AC6BF,AGhCA,AlLjEN,AHhCJ,AMgDI,AevCA,AjCsBE,A2CyHI,AxD0FN,AYzLC,AHFG,AbeL,ANVO,A2DhBF,AhE7BJ,AmO2CHlK,AD5BK,C1L9BN,CAAoC,A2L0DnCA,ClNaC,ANPA,C+EmKE,AyG1FA,EpDhCM,AnH1EJ,AuM2BD,EhNPO,A+E8GA,AjC/BJ,A4HxBA,AsBhBA,AMUI,A3KpDJ,AyBwGI,AxD0FJ,AoNxLD,CxGmDC,A3H9FG7D,CqG6VwD,A8FnOzD,AC0BE,AsBlCF,A7JxHN,ArC8CI,AnBKE,CsC5BC,AqBYIsI,AkKdF,C/B2GD,A0BxCI,AtJuDA,CzBxGZ,CoDiHc,AoEgDA,A6BzET,AC2BO,AsBlCF,CxHgCK,AG2MqD,AoHxQrD,A3KpDJ,AlBjBA,A2CyHC,CwE/CI,A0ELA,AC6BJ,A7JxHN,A9CyON,AmNpNE,CxIqMW,AqD1HI,AqD0DF,AezEF,AtJjFN,AU+IK,CmB4EV,AWwIqE,AwH3QrD,AtJuDN,AxD0FE,AS3LF,CLJO,AkGkC2B,AzFtD/B,AJwBF,C6F8BkC,A8FK/B,AMUR,A9KpER,AtC4BgB,CiKqJI,AmD7GC,AIHH,AxNrCD,CcTO,AmJ8JH,A/FzDf,AvEzIc,AmO2ChBvD,C3MHA,AxBxCiB9E,AmO2ClB,ChBgCC,A3LnCc,AxBxCE,CqG6V2D,A0CnQzE,AnH1ES,CsEkID,AG2MkE,AgBvR3B,A7ErFzD,AZ+BmB,A5BhBSC,CmBoCI,AuEgLf,AQlEL,AmB5E8C,A+E8EpD,A5JnKN,AnC4DU,A2DhBqB,AhE7BP,C6DNpB,AxDmDwB,A2DhBI4I,AhE7B5B,C0FsNE,A+HjIM,AjM7CJ,C0E0G0B,AoEgDhB,AuBvGY,CxFkQqD,ArChUpD,CqCgUoC,AhGhTzD,CgHyBwC,ArDzCb,CCsFnB,ADtFa,CkCqHnB,AtElIO,AoCaX,CpCbiB,CyFsD2C,ClGlCxD,C8C+EJ,CAAJ,ArCnGe,C8DsMb,A9DtMuB,CqCmGH,GrCnGP,CyFsD0D,AzFtDhD,CyFsDiD,AwGYxD,CxGZuD,AwGYnD,CxGZwB,CzFtD/B,EAAW,CiMkER,CAAA,EAAS,EjMlEZ,CAAb,gBiMkE8B,WAAL,CAAT,CAAZ;A1M7CN,AuEkLY,AQpEL,AjC/BL,AkCgJJ,AkB9L8E,AKItE,ACwBF,AoBPC,AuBwGS,A3ElGH,AkGLR,ACZQ,AK2CX,AC0BE,AexEE,AMSI,ACyBW,ACxCb,AEYA,A9J3DN,ApBND,ATCH,AH2BI,AKdJ,AUEM,ArBhBN,A8CuHU,AxD8FJ,AS9LC,AnBKE,A2DhBJ,AhE7BJ,AmO0CM,AD3BH,ClOpBJ,E2CMY,AqByBR,CmIgGA,AnI7FE,C+E6CA,CqD0EA,AuB9EI,A5MgKJ,CmF5FE,A6C9CA,A+CnCI,CnEwCJ,AmEzCa,AqBoBb,AMSI,AIHF,A9J3DF,AQiHU,CpDpGT,AkEpBqB,AamIpB,ACgHD,A2F3MC,A4BsDF,AxL5FR,AEaA,AXdA,CiEqMgB,AgC7IF,CLJQ,A+E+EX,ArKvGA,AiChBCnH,AmKaE6J,C9G2BI,A8EqDN,AnI7FN,CqBbwB,ApBmGjB,AkCgJA,ArDlOC,AyBuGS,C8CnE4D,AiD6HjE,A6BxEJ,AnI7FA,CqBbgB,CKsMR,AgC7IZ,AqBCJ,A4EJc,ApJkEG,AxD8FP,CIlMZ,AwMkCiB,A5MgKJ,CsEtNa,AqCyDR,AqBoBd,AoEjBU,AMSI,AIHF,AtJsDG,A4J9FF,CzI4KM,AyH1IR,AMSI,AIHF,A3LhErB,AYeoB,AyBuGG,A4J9FDC,ChNNF,AJkMd,CsEtNwB,AamIpB,AyBlDW,AgG3BX,A5MgKW,C4GrIC,AgG3BI,A7KrCH,AqLST,C9I1BgB,A8H4DtB,AMSI,AIHF,AzLnDV,A+LW0B,ClKyEF,AkJvCA,AMSI,AIHF,ApMjE1B,A8CuHU,CpDpGe,A8C+EA,CoBnGK,AsCiFtB,CAAmB,CgG3BK,CRMxB,AQNyB,A7KrCH,A/BqMD,C2EhBS,AzBnGd,A8EtBhB,AjG5DuB,A/BqMD,C2EhBQ,AzBnGhC,A4JjC2B,CJGC,CAAC,CnD6GC,AuDhHA,A9MoJf,CsEtNS,AcmPrB,AwBlKD,A7EhEe,A/BqMY,CIlMf,AkEpBU,AcmPH,CT7CX,A5CrLV,E3BGiC,AmJ8JH,AxHjKK,E6KqCf,AEYiB,AMxC7B,CNwC6B,C1M9CvC,AmJ8Jc,AqD5HR,AQ5BoC1G,C9I1BhB,A8I0BhB,CV2Cc,A1MiJP,AoN5Ld,C9I1BuB,AcmPF,ApEtNA,CuIqJV,AmD7GN,AIHwB,A9MoJW,C8MpJJ,ExIlEC,EtEsNQ,C8MpJT,CAAP,E1HiLT,A0HjLgB,A9J3Dd,ChCsBlB,CoEsN2B,ApEtNE,AhByLnB,CAAf,EgD/ME,CAAJ,EAAiC,GuG2KD,AvIrJa,CAAC,IuIqJd,CvIrJI,CAAgB,GuIqJpB,CAAlB,AvIrJsB,CAAqB,EuIqJzB,CuDhHO,EAAA,EvDgHP,AuDhHO,CvDgHzB,CvIrJsB,EuIqJtB,AvIrJsD,IAAhC,CAA7B,EAAoE,KAApE,CAAP,E8LqC2C,KvDgHX,CAAE,AuDhHK,CAAA,CAAP,CAAH,GAAwB,KvDgHvC,CuDhHR,CvDgHQ;AnJ7Jd,AkErB0B,AKwMtB,AQpEI,AjChCP,AkCmJD,AkBjMgB,ApGTpB,A0GqCQ,AC5BC,AmByBC,AuBoGO,AuBvGZ,AM4BI,AC6BH,AexEE,AnIqON,AyI5NS,AC6BH,AC3CE,AEWD,A9J3DH,A7BxCN,AH8DG,AK/DH,AUmDQ,AlBlBF,AH3BN,A8CmJU,AxD+FL,AY7LD,AhBqBF,ANjBK,A2DhBC,AmKYD,AD1BN,ChMhCD,AEDA,AXMA,CSLmC,AEDC,AXMI,Ad0EtC,CwLyDA,ApK5EU,AoMHM,ChNJd,CyG0BE,AiEDF,A9KoKA,CsElN0B,A0D+EpB,AqDsDJ,AuB7EI,A/LxDJ,CgGuDE,CzBgME,AwBrKF,A+FiBA,A5KjFA,AyBsGiB,AP1Gb,C/C+BZ,AkMgBS,AnIqOA,ArDxQA,C0D1BqB,AKwMhB,A0GnEJ,C/GrIoB,AtEuNnB,CmFnFK,AmB9EI,AM4BR,A/FlFN,AjB+CJ,C0E/C4B,AaoIb,AyBlDJ,A2CqF4B,AvG/J5B,AnCRP,A2CwHwB,A5DzE5B,C0E/C4B,AvCkBhB,C3BGC,AgFkOE,A4CxKE,AuBsGH,A8BhDN,AtJnHK,C4CsLK,AQpED,AyBlDX,ApDsCsB,CcxHA,AsCkFb,CxBqKG,A4CxKE,AtH1GtB,A8CmJ8B,CmBgFP,AkCjJf,AwE8EF,AexEE,A1LxFR,A8CmJ8B,CpDnGf,AQKX,C+LyEiB,CrG7CS,AqG6CR,AtLpItB,ARiCM,AjB+CJ,C+EyJyB,A2BlJI,A+E+EzB,AexEiB,A/K9FvB,ARiCY,AjB+CV,CQ1BE,AmJkJqC,A/F/C/B,CoJhEmB,CtIxDC,AsCkFJ,A2CsGV,AoDrFR,AC3CsB,AzLxF9B,AYkDQ,CuClBsB,ApE6C9B,A0GqC2B,AyEmDjB,AsBlCiB,AxLnI3B,CfqDI,AuEmLmB,AqDzHS,A/DmNf,ArEnPf,C0E/C4B,AKwMG,AiIhJvB,CtIxDoB,AcuPV,AwH/Lc,CtGFd,A0ByBe,AnH/E7B,AjB+CJ,CyLsFQ,AxKrIU,G8DwMG,AiCtHN,AoBHP,AuBwF+B,AoDpEjC,ChIqGA,AQpEQ,AyBlDoB,AwFrBA,AvL7D9B,C0I0LU,A8BrDN,AexE2B,AvL7DjB,CwKqId,ApH6JY,C7D7QH,C+E+G4B,CAAC,AkGClC,AxKrIJ,AjB+CE,CwMc4B,CAA5B,ChMxCO,A6D6QE,ArEnPf,CgNS+C,CvB6EvC,ApH6JgB,A2I1OwB,AhNTjC,CyLsFX,CzEnD8B,CxG7DrB,A+E+GH,AoEsDI,CnJrKZ,AiLgHE,ClGDgD,E/E/GvC,CiLgHL,CAAE,AuB7EsB,C3I0OjB,A2I1O2C,ExMnC7C,A6D6QqB,C7D7QhC,CwMmC4D,ExMnC5D,IiLgHE,EAAA,KjLhHS,A4CbyB,C5CavB,I4CbJ,EAAkC,K5Ca3C,EAAA,E4CbS,CAAP,Q4JgDsD,CAAuB,UAAvB,EAAmC,WAAnC,EAAgD,UAAhD,EAAsD,WAAtD,CAA1B,CAAxB;AxMlCP,AuEqLK,AQtEM,ACkHO,AkBhMF,ApGtFnB,AyG4FY,ACqB8B,ACzBhC,AmBuBD,AuB0Ga,A3ExGR,AmGhBJ,AK0CT,AC0BI,AexEE,AnI0OH,AyIjOK,AC6BD,AC3CC,AEWF,A9J3DF,ApBPL,AGiBO,AlBlBF,AbuNC,AJxKF,AqDjCQ,AhE7BL,AmOyCNgB,ClN1DD,CAA2C,AkN0D1CA,ChNVW,E4HyCN,AqDsEF,AqBtFE,AERA,AE4BA,C9ELF,A8EIA,CJWI,AEdA,AQ/BF,CnJ6QE,A0IpMA,A/MpDA,CgC9CR,A3ChBgBpF,AmOyCR,CzIgLI,AS4CS,ARrKP,AmGhBA,A/KsJJ,G6G/JO,AjHTJ,CuFqFK,ACkHG,CDlHF,AwBxEc,ChC8If,CS4CG,AwBrKqB,AgGhDpC,CDkEY,ACnEd,A3N/CG,C0FyNc,AS4CA,AuB1LY,AoEKvB,A2BMF,AC4BW,A1NlHOV,C4HuEF,A5HvEjB,C2HgGuC,ACzBrB,A0CiIH,AwBxHG,CnEgBsB,AhHlC3C,AX9DyBC,C2FgGF,A+HkBnB,A1NlHD,CiBjBP,AyMmIwB,A/MpDA,AwNrBfyB,CzIgLD,AzE1OR,AjBiBgC,AmOyCxB,EzGkCyB,AEJhB,A0CiIW,CAAC,C3HxL7B,C+E2DiC,ACqBa,ACzBZ,CDyBQ,ACzBhC,C8F2CoB,CxHiChB,A0B5EuB,A8F2CN,CpDsFT,AtF8GlB,CkBnKmC,AoEqDH,KAAd,CAAA,IoDtFE,EAAhB,IhGvCyB,MAAA,CAAA,EAAM,UAAA,GAAA,QAAA,CAAA,IAAA,EAA3B,EAA2B,CAAA,UAAA,CAAA,IAA3B,EAA2B,UAAA,GAAA,QAAA,CAAA,IAAA,EAA3B,EAA6B;AhCkJjC,AQzEQ,AjCjCZ,AoD7Ca,AKKA,ACqBqC,ACxB1C,AmByBT,AuBuGqC,A3EvG3B,AkGJT,ACZQ,AqBJP,AnI4OD,AyIlOM,AC4BF,ACtCJ,AEOD,A9J5DA,ApB1CH,AZgEY,AH9BT,A2CwHC,AxD+FI,AY9LJ,AhBsBE,ANjBQ,A2DhBF,AhE7BR,AmOwCI,ADzBD,CvLlCP,CAA6C,AZgEjC,CgHLH,A8ELA,AjM3BP,CmHgCA,A8CoDE,A8BhBA,AEzCF,AlMKE,CwLwBA,CxMFE,AX9DE,EiEkHA,A2D3CI,AkESA,A9GwOJ,A0ItMA,AnJqBE,AxD+FF,C4GvIS,AhCjBL,AuI/DI0K,CxI6MJ,AC5HE,AgIpBJ,AhMpCN,AtBKU,CsHkD0C,AgGnB7C,AhMpCP,AwMAWb,CjI2GC,AwHjCJ,CpDkE6B,AmD9FxB,AC4BJ,A3LrED,AiChBOlD,AhE7BJpI,CsKoLD,AvIvIF,AwC0FI,AvEvIR,E0H0Ee,AoEMH,A4BkCZ,C/HlBa,AmGhBA,A4BkCJ,AnJsBX,CqDjEgB,A7G+JJ,AoN9LI,CvG+BC,A7G+JJ,AftOE,AmOwCE6F,CxIwDT,A8HVU,AEVpB,AhMpCA,C8L8CqB,AETnB,ApJ2DI,A5ChGA,CuE2GgB,AwBzEG,A/BsBH,A5EsIlB,AmNvND,ChIoIoB,A0B5Ef,A7F1BA,AhByLW,AmNvNOiG,CtGwDF,A7F1BhB,AoMLG,CzGkCc,ACqBZ,A3CyNb,A2I3OM,AhMrCN,AtBKyB,A8NLArK,CxGuDrB,AkEHkB,A6BsBA,A/KrI1B,A4B2Je,A5ChGD,AwMAC,ADzBR,ChIoIS,AuH7DC,AC4BU,A/KrI3B,AwL2DQ,CjI2GwB,A4FnEpB,A/KsJgB,AVzLM,A6N9BCsK,C3JyH7B,AP3G6B,AhE7B3B,C0F4NwB,A+HtIE,A9L9C9B,AqCXgCvL,AkKd7B,CtGwD4B,A6FezB,A9L9CI,AhBsBiB,CuFqFK,A0B5EA,ArDmE1B,A5D5EsB,AuN/CO,CxI6MJ,A+HtIE,ApNzCC,AL7CHR,CgE6BhB,AhE7BiB,CkGmJG,AwBzEV,AgGwCZ,A/L1Eb,AqCXqC,C0D6CZ,AgGwCO,C9F3CR,AjG/Bb,CIKH,AhByLW,C2EVf,AkCrJI,A7G+J2B,AiDzMpB,AhE7BsB,E0H0ExB,A3F7Bf,AiChB6C4I,CrCW3C,C3BxCA,CuE0IS,AP7GM,ChE5BX,CiEiHgB,ADrF4B,CAAjC,C0JqFiB,ArNrEtB,A2DhBF,CO6GF,AxD4Fa,CwD9FjB,AxD8FE,CkDpHA,AlCrEmB,A/B5Cb,CiEiHV,CM0BI,CN1BwB,CjEjHdlI,EuE2IN,IxC/FV,CwC+Fe,CoJ/DX,A5LhCiD,C4LiC/C,A3N7EM,C+B4CZ,AwC+FM,AvE3IoB,EkGkJwB,AnEtGY,CwCiGtD,G2BK6B,CnEtGrC,CmEsGwD,CyHtEpD,A5LhCkF,E4LkChF,EhNjB0C,CuFqFX,CAAH,CvFrFJ,CAAD,CuFqFqC,CvFrFZ,EgNiB/C,EhNjBsB,CuFqFf,AvFrFV,CX7D+CC,C2N8E7C,EAAS,GpJ+DI,AvE7IsC,CAACX,CAAD,CAA/B,GAAqC,MuE6I5C,yBvE7IP,CAAN;AmBwCN,AkEzBE,AaoIW,AjCjCT,AoD7CS,AKKD,ACqBP,ACxBI,AmByBV,AuB0Ga,A3E1GA,AkGJX,ACZS,AMoER,ApHsKA,AyIpOQ,AC2B8B,AG9BzC,A9LvC+D,AeZ1D,AyB6GqB,AxDyFpB,AY9LJ,AhBsBE,AqDjCI,AhE5BLF,AmOsCI,ADxBL,E/MyBD,AnBvCEA,C6LYK,AlKmBP,AwMKgB,CtCxBhB,ClL+CE,AqDlCI,CAGE,AkKdHgM,C7GoCK,AtGiLN,CsErNI,AyGiEE,A9G0OJ,AyIpOI,A1L1CoD,AhB0LxD,CsGhKM,A6GvDJ,CvIiFI,AuIjFHxK,C/HoPU,AiG/GV,AzLtFA,C2J4IG,AxH1KF,CmBkFC,AlCtEmD,AwCiGrC,APhHXG,CAAN,CqBdO,AcoPI,AsH7KF,A1MgJJ,AfrOE,C8L+EG,A2BMA,AzJzDF,AhE5BA1B,AkOcX,C/HoPc,AnBuDJ,A0IzMyB,A5KjFpC,A9C/BW,CqFcG,AtD6B4C,AwCiGrC,AxDyFnB,C+KtJe,A9L/EFC,AkOcD,C/HoPC,ARnKG,AX0NM,AjEpFV,AfrOH,AkOcd,C7GuDW,A1B0BW,A8HVb,AzNrFR,CqFcoB,A6IAD,C/MyBrB,AgF2NmB,A2FnLT,A/JpCoD,CZJ9D,A6DkRE,AyIpOyB,A1L1CmC,CoEuN3C,CRnKP,A5DpDkD,C4DoDjC,CQmKV,AuHlJgC,CAAC,CzJCxB,A0BlBhB,AyGoDW,CnIlCM,CwJ5BnB,CtM9CV,CAAA,CmJkKmC,CrGxFP,AqGwFQ,CrGxFhC,AkCiJe,AuHlJgC,CvHkJhC,AuBzLG,AgGuCkB,CpDyF5B,CAA4B,A8BtDhB,CjL5GxB,GAAA,CuGkCY,CvByLO,AiG/GI,C1E1EQ,CrC3Db,AcoPC,AiG/Ga,E/GrI9B,EcoP+B,CuBzLrB,GvGlCZ,EiL4GuB,EAAmB,C9BsDQ,QAAQ,CAAC,OAAD,CAAlB,EAA6B,SAA7B,CAAuC,oBAAvC,CAA5B;AnJlKZ,AkEtBE,ApBiGC,AkCgJgB,AkB1LL,AKEF,ACqBT,A2C2GQ,A3E1GA,AkGJZ,ACZW,AMoEN,AexEF,AnIgPA,AyItOO,AC0BkD,A3J1F3D,AhCqB8D,AeX3D,AlBlBL,A2C8HgC,AxD0FxB,AJxKF,ANlBA,A2DfM,AmKUXgO,ADxBK1C,ECwBL0C,EhBqCG,Ae7DE1C,CvGoEF,ApDyDM,C6HQJ,ArKzG0D,AwC+FxD,EpDnGN,AkEtBM,AciPa,AkB1LL,AyEQJ,A9G4OJ,AjBtSA,AhDgNA,C2MtHS,A9LlGjB,A2CgIQ,C4IlEE,A9MhCA,A8NLD,ChBqCE,AOoCoD,A3LrEC,ApBmBrD,AuN/CE,C/HmPQ,AuBxLP,A1CkPF,AmJrRD,ADxBGC,C/MwBZ,AgF2NmB,A5BpHT,C6HME,ArKzGkD,CoEuN3C,AnB0DN,AjDjRiD,AmM5B1D,C/MwBJ,AgF2NmB,AnB0DjB,AkJ7Sc,C7GyDO,CAAC,A9CsET,C4BoHI,ChF3NnB,AgMqCE,AxMdE,C0E7Ce,A8H4Df,AvL/DN,A2CgIQ,CmDpEgB,CAAC,A3G4JF,AJxKA,C0E7CC,Ad+Hd,AxDsFc,C+KtJK,AqBHnB,AOmCO,CAAT,ChGtCM,A/GZR,C0E7CF,AciPiB,AuBxLS,CvBwLT,AkB1LI,C3BqJR,A2BrJD,ClB0LK,CAAA,A+HnPf,CxI8MY,A2BrJuB,CKE3B,C3G4JN,CwDxFA,C8CtEQ,CtG8JsB,AV1LjB,CkEsGX,CAbN,CxDiGI,YV1LE,CAAJ,EAAiC,O8MiCjC,CACE,MpJxDiC,IoJuDnC,CpJvDE,CoJ8DA,ApJ9DN,UoJ8DO,KAAD,EAAM;A9HlEV,AK4MM,AQ3EI,AGuMX,AgB9Qa,AKDH,AEJH,A0CoIC,A3E1GA,AmGhBA,AqBID,AO4BH,ACjCG,A5JzDT,AhCoBuF,AeVrF,AlBlDH,AbwPO,AY7LK,AtBGJ,A2DfI,AhE7BR,AmOsCO,ADvBLQ,CtMjCN,CAAqC,AD2DzB,CmB7BH,CoLGHA,EtGuDI,AuFcA,AerEF,CAACC,CxI8MC,C2BlJO,CnBuEH,AyHnEE,CtI9DL,ArFjBEpL,AmOsCI0K,C9NML,C2DfOlD,AhE7Bf,CmNoFc,C9HnEH,A1DwBH,C0FkCY,AOLJ,AjG7BR,A3BzCM,AkOeZ,C7G4DmB,AOLJ,AuFcA,CvLtGrB,AuMwDwB,CvMxDxB,AuMwDyB8F,ADvBJ,ChImIG,CR2ED,AQ3EE,AiH9Df,AQLiB,CjI+If,CyIxLK,CRyCa,AQzCA,CvGgCpB,AjG7BE,CAAA,E0FkCY,CnBuEV,AmBvEG,ArD9CkB,CqD8CG,ArD9CF1N,C0BgMb,AiI9Ic,CAAC,CjIgJ1B,C1BlMO,AmKSF,CnKTwB,AmKS9B,C9GqCK,A1FlCJ,C0DxBD,AsI8DmB,CtI9DJ,CsI8DhB,AhMtCR,AqCZiB,CqD8C6B,CrD9CDoI,GAA5B,C0BkMP,C1BlMwC,CAAjC,CqBZQ,ArBYf,CrCYW,C0FkCmC,A6G5DpD,C7G4DqD,OhC1DjC,CgC0DsB,A1FlC9C,C0DxBmC,CgC0DrB,A1FlCgC;ARF5C,AkEpBE,AK6MQ,AQ7ED,AjCjCT,AoDtCW,AMoBX,ACzBK,AjC0BA,AmGhBA,AMmEH,Ae/DI,AnIuON,AyItOM,AC2BL,A7J5HJ,AU6JG,AxDqFC,AY7LD,AhBoBE,ANjBI,A2DfD,AhE9BW,AmOsCT,ADtBL,IvGgFF,CCvCE,AjCdA,AmGKE,A4BmDJ,C9F3CA,AjCdA,AwH2CM,AMCA,CpGrCE,ClGVJ,A8C2EA,AoDlEE,ArC4QA,AT1KF,CAAC,A5CxGA,A3B1CgB/H,CqFmBb,A+GiIF,A/LvGA,C+LuGC,AzLtFA,AuN9CE,G7IGG,AK6MI,CyH3ID,A5I6Df,CkJ5DgB,AStEd,C7IGa,AoImEE,AlJ4DJ,A5DpFX,CQvBY,AgM8CI,AnIuOF,ArE9PF,E+EkKQ,A1FhON,CmBuCC,AiL6GX,ApHwKa,ArE9PjB,E+EkKuB,AyH3InB,AxL3CN,A3B1CmCd,CqFmBb,ArFnBN,CqFmBO,A+GiIF,AqB9Df,ApNzCe,CcNC,AwGyDA,AyEoDA,KzEpDK,A3C4NP,GKzSL,CAAkB,AsC6EjC,C1DkBe,Ae0MI,C7DrRnB,CiL6GE,ApHwK+B,CU5FH,AiChIK,CyEoDC,CnIlChC,CAAJ,EAAuB,CoB/FR,CAAb,IK6MuC,CAAC,CAAD,CAAhB,EAAqB,MiChIW,GjCgIhC,CAAf,AiChImD,CAA7D,GAII,UAAU,CAAC,GAAX,CACE,SAAS,CAAC,QAAV,CAAmB,YAAA;AjC4Hf,AQ7EH,AjCjCL,AkC8IkC,AE2FtC,AsBtPU,AC5BT,A0CmIO,A3EzGP,AyGiDK,Ae/DE,AnIuOJ,AyItOG,A1L3CL,AehEK,AyB0KH,A5DvFD,ANjBI,A2DfJ,AhE/BsC,AmOmCzB,ADlBd,CCkBJ,CrLvDS,C8EiDA,AjCHP,AuIbC,CtGgBD,C6FuBI,C9FkDM,A3CuNN,CkBzLE,AuH5CA,CvH2CF,AoE0EI,A8BxDF,Ae/DI,ApL1CJ,CsEgTC,AhGhTD,A6N3BE,C7N6BA,EkEwGE,CNnCC,AkC8I2B,ApErN3B,C2DqLK,C4EpBH,CAAC,A/FvDA,CoDhDO,AwFhBF,AMEZ,A1L5CQ,A1BEA,CAAP,C+LuGS,C9BwDT,AmDrHF,ApN1CY,CiK+JC,A6CvHI,ApL1CjB,CoL0CkB,AMEd,A3K5GH,CqDqRyC,AnB4D3B,AlCjVd,CqDqR0C,ClC9I1B,AlCvEA,AwC0Gb,CNnCc,Ae0MA,ATvKA,CmB2EK,AW4H1B,CF5FmC,AmEpDZ,CnEoD4B,CThCtB,A3DrLJ,CkCuEL,AqG0FM,A6CvHI,ClJ6B7B,AkJ7B8B,ChH2KwB,EThC9C,A3DrLW,CsEiTX,CF5FkD,CAAC,AmEpD3B,A6CvH5B,ArK1GD,CuDoXD,AiEnJ+B,CvIjKC,CehEb,EAAlB,CqDqR+C,AmEpDlB,A6CvHU,C7CuHpB,AvIjKpB,EoEqNkE,CmEpD1B,CvIjKC,EoEqNO,AE+FhD,A8G1Q+C,E7CuH7C,CnEoDuE,AgH3KvB,ApL1CJ,IoEqN+B,AgH3KvB,ChH2KwB,CAAD,AgH3K9B,A5IgEG,C4B2GlB,ApErNS,CoEqNT,AnB6DhC,CmIxO2D,C5IgEvD,CAAN,CxC1G4D,KAA9D,CiDiRsB,CjDjR+C,CiDmRjE,EmIzOwE,CAAC,KAAD,CAAtE,AnIuOgB,EAGlB,YAAA;A7DxRJ,AkEnBE,AK6MQ,AzB9GT,AkC6IoF,AE+F3E,AsBzPF,AC5BX,A0CmIQ,AwB5HD,AMoED,Ae/DE,AnI0OC,AyIxOA,AC0BN,ACnCM,A5LnCJ,AeZN,Ae1CM,AUgKD,AxDuFD,AYnMA,AhBqBD,ANjBO,A2DbT,AmKMD,ADtBMuL,GvNuCJ,CmLyBM,A4BiCJ,AQjGEA,C/H+OF,AgHrLE,ExF2BO,A2C2DL,A6C1EA,ChMhDA,AmJsKE,AtFmHA,AjEnFF,CItMC,A2BPT,Ae1CgB,AlCoDP,C0DtBC,AK6MI,ArFnLJ,CgGiTI,A6H9UD,CvGqFK,A5GuIN,AmN5NEC,CTuEG,AETc,A5LnClB,EuIiKI,AvIjKX,AhBiMS,AmN5NT,CxIgNc,ArFnLJ,A6N7BE,CxIgNG,AiIlJU,ChGuBnB,A2CuGF,CnJtKN,AgMgDI,A9MzCW,CiK+JG,AmDrHE,A9L9CpB,AtBIgB,CcPC,A2K0CI,A2BOA,C9FcG,CtClFtB,EAAmB,A8ImBX,CzI0LA,AgI/GY,AS3EXmC,CzI2LC,A+H1IC,E3KxDjB,Ae1CM,C4JkG4B,AETH,A9JzFS,A9CuPpC,C2EXgB,A+H1IV,AC0BqB,AQjGzB,CvGqFgC,AtHxDN,A8NPlB,CxG+DyB,A8FdF,AETN,A9JzFzB,CmB0U8B,AmJzRbO,CnJyRc,A0I9MjC,A7J5H4C,C8DgHpB,CAAe,E+FYJ,G/FZS,CwG/DlC,CAAd,EnJyRU,AmJzRyBJ,IxG+DQ,CtByPZ,AsBzP0B,GtByPvB,AsHhRH,ChGuBY,AwG/D3C,C9HwTc,A8HxT+B,CxG+DkB,CtByPzB,GqH7OuB,IAAI,ACnClC,CDmC3B,ACnC2B,CtHgRjB,CAAA,AsHhR4B,AQxCS,CzI2LnC,AgI5GR,ChI6GU,ErFrLC,GAAmC,CAAC,CAAC,EsHwDb,A+FgBzB,ChI4GF,AiC5HY,A+FgBT,C/FhBP,CjC8HM,CgI9GV,ACvCkC,AtNjCvB,CqNyET,ECxCgC,AtNjCuB,CAAC,CAAD,CAAvD,GqFsLS,CgI7GA,CAAC,GhI6GF,EAAM,AiIrJkB,CAAA,EDwChC,CAAmB,CCxCa,EAAhC,EAAgC,CAAA,MDwCb,SCxCa,CAAA,IAAhC,EAAgC,eAAA,GAAA,aAAA,CAAA,IAAA,EAAhC,EAAkC;AxMvCtC,AkEnBE,AKiNY,AWyH6B,AgBjTzC,AMyDG,A2CuGD,A3ExGR,AmGpBK,AqBMG,AnIyOA,AyIxOE,AC+BA,ACzCG,A5LlCV,AepEL,AegBE,AxDsDO,AL/CL9N,AmOwCHuL,ADtBKS,CpLzCN,C6C6HE,A7C7HwC,A9CuBtChM,AmOwCHuL,C9HoTa,AyFhTR,A9L5CD,C8L0CH,A9L1CIhL,AkOkBAyL,CvGkFI,CxG5DJ,AkF0TE,A8G1QE,AOgCE,AQtGJ,CvGqFK,AuGrFJC,C7IGD,AiFyLE,A3ExGF,A8HbI,CpHkQH,AgB7SI,A1BwDJ,A9B7GA,AsK+CD,C9HmTN,A8HnTOT,EzI8LW,C2BxLH,ArH9Cb,AmOwCH,CRuCoB,AQvCR,CViDM,CtMjDH,AgMgDI,AMCA,AzNzFFvL,AkOkBZ,CRsGiB,A1NxHJ,C0FsOO,AChIxB,CxE9DiB,AuE8LQ,A4ExBN,A3EvGjB,AwHfmB,AetEF,CxIoNK,A4ExBJ,CjFzLD,AKiND,A+H7IR,CEVe,A3N/EH,CsK8MH,A3EvGb,AwHfE,ChMhDc,AkEnBA,AKiNQ,A2BxLJ,AiDgKlB,AmDrHmB,CEVF,C3N/ET,CqH8Ca,A8GN9B,C9GMO,ChCzBA,AKiNY,AiClIV,A3C8NE,AyIzOA,AzNzFmBC,CqH8CG,AMqD1B,A8FV2B,CpG3CA,AMiD/B,C7EtHJ,C2KgHY,A3KhHZ,AoLyCM,CvGuFG,A3CyNS,C7D1RC,A6D0RA,AhFlUkB,CAACa,C6DPlB,C1C+CkB,EwMuCX,A9JtFJ,CwDqDsB,AsGiClB,CxMvCe,AkGMI,ArH9Cf,CAAcd,CAAd,C6DPR,A7DOL,C2N+EH,ChG0BO,CN3DY,CxDrDd,A7DO+BY,C2HyG1B,C3HzG4B,CqH8CG,ArH9CFN,C6DPlC,C8DsGhB,E9DtGmB,K8B8GnB,A9B9GmB,A7DO4B,C2FuGxB,C0BzDwC,CrH9CDN,CAAC,CqH8CG,AxDrD/C,A7DO6CM,C6DPhD,C1C+CkB,EAAhC,A0C/CiB,E8B8GnB,C0BzDyE,CAAC,A1ByDvC,C9B9GhB,A7DO4B,C6DP/B,C7DO2D,E6DP3D,CwDqDZ,CrH9C2EM,CqH8CG,AxDrD/D,C8B8GnB,A9B9GqB,A7DOsD,E2FuG7B,A3FvGhC,CAAd,M6DPK,CwDqDwF,AxDrD/F,EwDqDM,EAA2F,A1ByDjD;AxE9D5C,AkEdE,AaqGJ,AjCZA,AkC8IA,AEkGH,AsBzPG,A2CoGK,A3EtGH,AmGtBL,AMwEK,AelEI,AnI0OI,AyIzOH,AC+BC,ACzCA,A9JtFX,AU6JG,AxDuFA,AYlMA,AhB2BF,ANvBK,A2DdP,AhEjCC,AmOwCAuK,ADtBK,EvNoDJ,AwN9BDA,EhIyNG,AwBvJA,AhCFE,GQyJC,AuHzIM,CzJLL,AkC8IA,AgHzKI,AxL7CF,AwMHH,CjIuFE,AlC9FAtC,AmKODuC,ChNAI,AiLkHA,ApHwKE,A2InPF,CpJuED,AxDuFA,AmN3NE,C7IQD,AqI8FM,A/MlDhB,CuFyDW,AvFzDX,C0GzBe,A1B2DD,AyGkDA,ApHwKE,AmJ1RjB,ChIyNM,AwBvJQ,A5GmIX,AoNrMUC,ADtBR,C/H+OF,AgHzKgB,AnI0OF,CW1NC,AyGkDC,A7HJhB,AxDuFa,C2MrHL,ACzCM,CxMvCC,AwMuCA,CRSK,AnIyOL,ArDtRG,C0DjBH,AM8Eb,CxEhEgB,AuMgFM,A/MlD1B,AwN9BD,CRuCW,AhMpCa,AhB2BvB,C0E5CoB,AaqGE,AkG2BG,AuB3EH,A3J9CxB,CAAyBvC,AmKOD,EhNAG,A+EuFA,AkG2BG,ClG3B1B,AiHvCQ,AxL7CkB,C0DjBtB,AsIqDI,CzHgDkB,CvFzD5B,AqDrCF,CmJuDoC,AOgCE,AShFrC,CTgFsC,A1JvFN,CoIyHI,AzLpFnC,E+MkD0B,CvMhFN,AuMgFqB,EvMhFrC,AiLkH+B,ElG3BI,AiHvC7B,COgCoC,CtBkClB,AzK/GL,CuEoFmB,AvEpFE,CwL6CG,CAAC,AxMlBhD,CyLoF4B,GlG3B1B,AwHPuC,CAAc,CxHOL,EkG2Bf,AzK/GZ,CwL6CkC,AOgChB,A/L7EvC,CsCwEyB,AkJ3B+B,COgCG,EtBkC1B,EnIvC7B,CAAJ,AkJ3BM,CjHuCqD,CjCZ1B,AmIuCA,ClG3BjC,AkG2B0B,ElG3BmC,AiHvCM,CfkEzC,OAAA,EelEmD,CfkExC,AelEyC,COgCvC,CAAf,CAAhB,KPhC2D,CfkErB,CelExC,CfkEJ;AjLjHA,AkEZE,AKyMY,AzBlHd,AkC+IF,AkBtLK,AM+BL,A2CmGG,A3EtGD,AyGwDA,AexEG,AnI0OK,A0I1MH,ACzCA,A5LjCP,AwCwGD,AxD0FG,AShND,AbsCD,AqDrCA,AmKOH,ADtBG,CCmBJ,E5JyFE,CoBtBI,C2EiD8B,A6ChF9B,AO4CI,CvM7EJ,AiLwHA,AexFF,AnJvCIT,CsG+KF,AoDxFO,C/FbH,AhHrCF,EqE4PM,AjElFJ,CoFkBC,CdtOC,CpBuFC,AtD7CA,CuFwDA,E/EtFG,AuE6LQ,A0GrER,CjLxHC,AuE6LQ,AC7HN,AyGwDF,E9BgDX,AtFkHiB,C7D1RjB,AiLwHA,CjLvHE,AiLuHa,ApHkKE,CrE5PnB,CwF4LO,CdtOW,A1E0CE,AqDrCE,E7CQb,CkEbY,AtEoNE,C4GrIG,C+FUpB,A1JpFqBK,C0BoMX,AV2FD,A0I5MX,C/FTyB,A+FK7B,A3MgIE,CIvME,AkEbA,AKyMgC,CvE5LpB,AiLuHC,ArLgFY,C2MtHxB,CzJP0B,A0DRE,C1DQD,GlCrEf,EkCqEc,ADlF/B,C7CQI,A8C0EF,C9CzEI,A6CTmC,I7CS/B,CuMgFS,GAAG,C3L5EtB,CAA+B,E2LkE/B,A3LlEA,kB4F6D6B,CAC3B,UAD2B,CxGjEvB,CACE,AwGkEN,SxGnEI,CwGmEH,CxGjEK,IwGiEN,EAAS,GxGnEL,EAGE,YAAA;AACE,AkEbN,AKsMc,AQnFjB,AjChCA,AkC8IY,AmElDL,A3EvGP,AyGwDG,AetEL,AnIwOW,AyI1OJ,ACmCN,A3MqHI,AYrME,AHXP,AbsCG,ANvBQ,A2DdN,AhEjCD,AkOkBN,GvIkFG,AwHlEK,A3LVP,CmE2EA,AwHjEA,AOyFE,A1N3HO3H,EyNwFD,A9MlBJ,EQzBQ,AkEbN,A+GgIA,AzKrHE,EqDuRI,ArDvRJ,AtBII,EUiMF,AfhPO,CmB6CD,AgFoND,AmElDL,A3IpKiC,CRE1B,AuEyLG,AV4FJ,C0IvMH,A1N3HO,CoMgKN,ApHkKE,AyI1OE,CAAC,A9L7CX,EwEsNc,AmElDN,CjF/KE,AciOK,AmElDN,AjKhKK,CgFfH,CoIwDX,CtM3CI,AsM2Ca,ApNzCE,GgFfrB,AoIwDE,CpItDA,AKoMyB,AS2BX,AnGjQS,CmGiQhB,A9FlNgB,EqFuLK,A4EvBlB,C3JzIW,C0EtCvB,A1EsCwB,E0EpClB,AKoMQ,I4EvBH,AjKhKL,EiKgKc,oBjF7Kd,gB1EoCiB,EAAwB,IAAxB,CAAzB,G0EpCQ,EAAA,EAAA,mBAGC,IAHD,CAAA,CAAA,EAGK,CAEP,YAAA;AAAC,AKgMS,AQnFnB,AjChCA,AkC6I8B,AkBnLzB,AiDiIyB,A3ElG/B,AwHlBD,AnIoOkB,AyItOV,A1L3CL,AefJ,AyBqIS,AxD6EC,AYtMA,AhB4BL,AqDrCG,AhEjCJ,EuEmKK,C2BhDQ,CAAf,ApDrFF,CqDkOI,AsHjNE,A9MqBF,E8MqBI,C9L/CI,CgEkEH,AXkNS,CADR,CqChPK,AtFhCJ,ApByBA,AqDrCI2H,CgBkSH,EK7RC,AKgMS,AnBnEb,C+F2CwB,A/F3CxB,CxD6EO,C+BlNhB,E2K2DQ,C1L5CJ,AefJ,A/BkNoB,CsE1MP,AMsEJ,AXiNC,AjE7EW,AfhPjB3H,CgFmUkB,CqCtPP,AiDiI0B,AtG7Kd,CqBKd,AiFwK6B,AtG7Kd+H,COkInB,Cc7HI,C1DIkB,C4CyH7B,CvEnKU,C8C8BZ,AnBY+B,AqCTJ,CAAnB,CsG6KyB,AtF+GvB,AjE7EA,AYtMqB,A3B1ChB7I,C2B0CgB,C+D4LW,A4ExBT,ExHhLjC,EAAA,AyBqIuB,AvEnKF,CAACe,IuEmKpB,EAA6B,AvEnKhB,IAAiB,G2B0CtB,M3B1C+BD,QAAT,CAAkBE,CAAlB,EAAqB;AmB6CvC,AuE0LO,AQnFnB,AC6GC,AkBnLO,AMkCF,A2C8F4C,A3EjGhD,AyGuDI,ApHgKC,AyI1OC,ACwCN,A3LpFD,AehBmC,AyBsIlC,AxD6EK,AYvMC,AHTR,AbsCI,ANxBA,A2DbD,AhEjCG,AkOiBD,E1MeL,C2EuNO,ApEnNG,AiCPqB,CmC0N/B,AR3IE,A3B1EA,EqD2CM,AoGYA,CnDoHQ,AtF0GQ,C7D3QZ,AmJiKF,AoD5EF,A/LxFuB,CuE0GxB,AlBiLD,AjEtFA,AS9MN,AxBhCW,AkOiBGmL,CvG8FF,AnG/EZ,AnBcQ,CkEqHC,A5D7FA,CyL6FC,AqB1EI,ACwCF,CrGpDG,ArH7EAlL,CgFuTS,AhFvTb,CgFuTP,AyI9Na,ACwCF,AnJkCF,A5C1HyB,C0FoCpB,ArH7EAC,CmB4CC,AnB5CA,CmB4CC,AJoMJ,AYvMsB,C8LgD9B,AjMzDR,C4KmIkB,AzK1HoB,AHTtC,AbsCI,ANxBA,AL9CkB,AkOiBjB,CvG8FkB,AhGtEe,A3BzC3B,AkOiBekC,CvI2FN,AtF9DA,C6FqGC,AvF7EA,AXtEIjC,C2H+GC,A7ElFU,A9C7BV,CqH6EC,A+EsFJ,AsBlCP,AlMjGhB,CLYY,A+EuGY,AkGgBd,A8BlJL,CvI2Fe,A+HqBL,AnJkCN,A5D7FL,AXtEyBC,CqH6EC,A9CsFJ,A5C1HlB,AHTR,A0MfiCgL,CRgHoB,CtBkCzB,A8BlJvB,CvI2FH,AyGuD2B,A7HApB,C2BhBqB,AmBtEtB,A6G5D6BC,ChIkIN,A3BgBA,EoBvD7B,C3F5GoC,AkOiBjC,ChIkImB,AyBpCgB,A7ElFJ,A9C7BGhL,CkGmJH,AyBpCK,ApDoDhC,A/CnIH,A0MfqCiL,CpLYP,AyBsIlC,E6HAQ,A5KnIV,A0MfK,EvG8FqB,AnG/EZ,AxBhCR,AkOiB0CC,EvG8F1C,AyEoDqC,AtJtIP,A9C7BWrL,CoMmKH,ApMnKI,AkOiB3C,EAAgD,ClOjBFC,CAA7C,EAAgDD,C2F4GlC,A3F5GmC,EAAjD,EAAqD,C2F4GvC,AyGuDd,EAAoD,GzGvDtC,CAAlB,GAAkB,KAAA,CAAlB,GAAA,EOuCmD,cAAjB,CAAZ,CAAH,APvCD,EAAlB,COuCsE,MAAxE;A/EtGW,A+EuGZ,AjChCC,AkC6ID,AkBnLQ,AiD+H4C,A3EhGlD,AyGuDO,ApHkKL,AyI5OK,ACuCkD,AnJmCzD,AxD6EO,AShNN,AnBcI,AL9CID,AkOiBT,GvIyFD,ApBuDO,E8CtFD,AiD0E4B,AtFgKhC,CyI5NM,AzNzFEA,AkOiBHuL,C/MqBC,AmJwKJ,AtK9MO,CiEmHL,C9CtEI,AKbH,C4KmIC,ArL6EA,AfhPMpL,GyNyFC,ACuC2C,ArNlF/C,EgFVA,A6InBK,CTwEE,EnD4DgB,A4DpIfqL,C/M4BR,AkETA,ArFpCY,CsKmNnB,AmD1HI,A1MuJU,AfhPMvL,CqFoCb,AtE4MQ,AfhPI,CmB6Cb,AnB7CA,CwBgCR,AnBcI,CcDQ,AkETH,C+G+HY,CsBnCiD,ArNlFhD,A6N7BG,C7ImBhB,AqI4F8D,AQ/G7CwL,C9BkJF,C/G/Hf,ChFUL,EgFVK,AiF+KP,AoDnFsD,A3MgHlD,G2MhHyE,ItBmC5C,CAAC,C/G/H3B,A6InBQ,C7ImBR,AqI4F+C,AQ/Gf,CR+G8C,EAA/B,CAAA,IrI5F/C,EAAA,IAAiB,G+G+HS,EAAsB,A8BlJxC,CAAlB,QjKkGsC,KAAjC,CAAN,ImIgDqC,CAA7B;AjLrHI,AkEVD,AKkMO,AzBlHnB,AoDtCM,AiDqIK,A3EtGX,AyGuDQ,AqB1EA,ACsCqF,A3L9ErF,AenBP,A/BkNO,AYtML,AhB2BE,AuNpDH,EnMgCM,CsF5BH,CADG,CoGwBH,ACmFF,CDpFA,AS1BKC,C7G6DH,ClGjCQ,AQHJ,EuMzBG,CpLaX,AnCuCS,C0ElCE,A1DOC,CRGI,AmJqKN,AvIjKH,AmMhCOF,C/M4BG,AYIV,CJPQ,C+D2LO,CAAC,ELlMZ,AgCfX,AiD8LgB,CjF/KL,AiF+KM,A3J7Ib,CuNpDkB,C7IkBX,A1DOW,AuMzBCG,C/M4BX,AkEVD,AtDcJ,AJPgB,CIOhB,AenBP,CwHoLU,AxHnLE,CuCID,CiF+KD,C3IxKK,EAAb,CIOK,GAAP,AenBA,CuCKW,A6IlBG,C7IkBH,AvCHC,AoLfyB,CxIoNnB,CLlMP,CAAA,AKkMkC,AwIpN/B,CpLad,AoLbC,EpLgBW,EfgBG,GenBf,EfmBA,AehBkD,EfgBzB,KAAzB,EAAsC;A2DuLlB,ASgCtB,AkBzLC,AKZU,AC2CH,A2CoGkB,A8B9CnB,ApHkKH,AyI1OD,A1L1CC,AejBU,AyB+IL,AxDiEF,ASjNH,AbsCC,AqDrCD,AhEjCQ,AkOkBTD,E3J8JM,A2J9JNA,CTiBM,CzImSL,AyInSF,CnDiHkC,CAAhC,AtGnHI,AkKfD,C9ByID,ApI1HGvE,AkKfD2D,CnMgCA,AejBM,AtBDN,C2EwOC,A3ExOA,ExBhCQ,E2H8GY,A5F5DhB,AejBC,C4CuMQ,AnBxDb,A/ChJK,C+CgJL,AvEhLY3L,CAAT,AkOkBT,CvG4F0B,C7E7Ef,CfiBV,C/BlDsBa,C+BkDL,A/BlDT,E8CiCE,AtBDV,AxBhCyB,C0FwOG,A5CvMlB,C4CuMmB,AlExMR,AwCCE,ClBAb,AyB+IL,CvEhLwBjB,E0FwOX,AnBxDpB,A2J9JqBoD,CxIsNe,AiC1HT,A3CwNC,AhBrSEmF,EmCuOhC,CAAiC,AwB1JJ,A3CwNI,AhFtUM,CAAClI,AkOkBrC,K/HsPH,AnB8DuC,ATtJlB,CSsJmB,CmB9DM,C5BxF5C,CvEhL+B,C0FwOmB,AnBxDtB,AvEhLoBC,C0FwOG,IV8FpB,AhBrSxB,CmCuOT,AnB+DM,CU/FqD,CAAC,ASgCG,CnCvOR,C2D6E1B,A3CyNnB,AhBtS8C8H,G0BuMH,C1FxOpB,C0FwOmB,A1FxOa7H,C0FwO3C,G1FxOW,CAAqCU,C2H8GzC,A3H9GI,C2H8GJ,C3H9G4Cb,C2H8GjC,A3H9GP,CAAJ,EAAgDY,CgEiCrE,AhEjCsE,CAACZ,CAAD,CAAD,EgEiCEqI,ChEjCKxH,CAAC,CAACb,CAAD,CAAR,C2H8GrC,GAAA,G3D7EpC,EAAyF,CgBsSvF,CACE,M2C1NgC,CAAA,G3CyNlC,C2CzNkC,C3C2NhC,C2C3NA,EAAgC,CAAA,M3C2N/B,KAAD,EAAS,E2C3NuB,CAAA,IAAhC,EAAgC,eAAA,GAAA,aAAA,CAAA,IAAA,EAAhC,EAAkC;AxGhE5B,AuE2LO,AzBhHrB,AkCgJE,AuBrMO,AC0CI,A2CwGT,A8B9CE,ApHmKI,AyI9OT,ACwCG,A3LlFE,AelBQ,AyBgJV,A5CtIA,AHVE,AbsCH,ANzBK,A2DZAgI,AhEjCC,AkOkBNuE,EAAAA,CvN6CD,C2JsJE,AtGpLIvE,C0DDF,C0EuIA,ApHmKI,AlC1SI,AoLdP,CxGkDC,AwGlDAyE,C/M2BM,AuMuFJ,CzJZD,AkCgJA,AxE9NA,C2I2KC,A8B9CA,C9B8CC,A8B9CA,AtJvIG,AyBgJH,A/ChJA,EOkBE,AJRA,CgGmEM,A7E7EY,AnBUjB,C4CsIC,AlEnIgB,EcAV,AuMuFF,A3LlFF,AJRA,CRGK,AQHlB,CwE8NM,AuBpMF,AlGpCF,AnBayB,A6N3B5B,CvG2FsB,A2CwGrB,A8B9CE,AsBnCgB,A/L1FF,AuMxBC,C5DmMA,A8B9CA,AzK7HA,CIQR,APlBS,AwCCI,C7CYZ,AwGgEW,A3C6NE,AjDxRJ,AelBiB,C3BaZ,A2Bba,AnBUjB,AuMxBrB,ClKe0BpE,CkKfF2D,C/M2Bb,AoDmIH,A/ChJgB,CwD0SA,AT1JC,A5CtIA,AuMxBzB,C/HsPM,ArDxOsB,AnBUF,CsC8E7B,AyJYuB,CzJZW,AkCgJN,AiGjGtB,A7HSK,AlEnIoB,C2E6RrB,A0ItMY,C5KpG4B,AyBgJjB,CNxDjC,AyJY4D,A5KpG9C,AzCaiB,CsBHX,CsC8EsB,AekNhC,AxD1SY,CwCCd,C2D4EiB,CAAA,AhGnEc,AHVA,CGUC,E4CsI7B,C/ChJL,CmG6EO,A2CwGT,A/FrCwC,GAAjC,CAAP,E5CtI8C,CAAC,EqDgSxB,AjDxRd,CAAP,C1BLyB,EsBH3B,CqDgSuB,CrDhSgC,CAAC,GqDgSjC,CAAjB,ArDhSsD,CtBGjC,CAAA,C2E6RJ,C3E7Rc,I2E6Rd,CAAjB,GAAA,M3E7R+B,CsBH0C,EtBG1C,CsBH6C,CAAH,GAAO,CAAtF,EqDgSuB,ArDhSkE,CqDgShE,G3E7RY,CAAA,IAAA,EAAjC,C2E6RE,C3E7R+B,C2E6R/B,A3E7R+B,cAAA,CAAA,IAAjC,EAAiC,cAAA,GAAA,YAAA,CAAA,IAAA,EAAjC,EAAmC;AcC9B,AkEXC,AKsMK,AzBhHjB,AkC+I+B,AwBzJf,A3C4NR,A0ItMJ,A3LlFD,AenB+C,AyBiJjD,AxDgEG,AYtMA,AHVA,AnBYO,A2DXL,AkKfLO,EAAAA,C3J4JM,GS4JC,A0ItMJ,A3M4GA,AYtMA,AuMxBC,C/MiBG,A+MjBFE,E/M4BI,A8C0EH,CekNK,A0ItMJ,A3M4GA,C2EvBM,AS8CiB,AuHnItB,AlMpGA,AwCCIpE,E0BwMG,AzBjHL,AlDwHA,CsE9MK,AsC4EA,EhGpEF,AtBEG,CUoMF,AYtMA,CZsMC,CmN9Nf,CvG4FqB,AuG5FH,C/M4BT,AgFyNsB,AuHnItB,A/L1FN,CAAgB,AHVhB,CmG8EuB,A+FsBlB,A1JnGgB,CAACI,CqBCd,AKuMI,AgIrGI,AlMpGG,CGUC,AtBEC,A6N1BxB,C7IgB4B,A1DQJ,CwE6NM,AxE7NP,AHVpB,A0MduBwD,CvG4FM,A5GkI7B,AYtMA,AtBEqB,C8F2NmB,AwBzJX,A3D7ER,CAAnB,CkKfL,GjKsGM,CAAe,A0DVN,OtHlES,CAAA,E4D4EF,G5D5EZ,O4D4EW,EAA0B;A9C1EhC,AkERF,AKoMI,AzBjHhB,AkC8I+C,AwBxJzC,A2C4GN,A8BnDE,ApHoKI,AjE3FL,AYtMA,AHVS,AbsCZ,AqDrCG,AhElCG,AkOmBLM,EvNoDD,AuNpDCA,IlJyTO,AkJzTH,CAACE,CjKsGE,E0DVA,AyEyDA,A5KvII,CyCwFD,AmI+CF,ApMxKI7L,C0NoID,A/M7DZ,AXvEM,CmGuQ2C,AmE5CtC,A3JpJX,CsDkDc,C9C3EE,CkERI,AKoME,AiC3HR,A3C6NI,CUlGK,AzBjHN,A0DVF,A3C6NI,CfnND,AyJWA,CrI9FK,AciOgC,A3EtOlC,A0MdpB,C/M2BmB,AuE4LK,AS6B+B,A+HpPrC,C/M2BE,AwGiEb,AyEyDJ,ApHoKI,A0IxMU,CrI9FQ,AsCyEN,A3C6NK,AxD3SC,AbsC1B,CyLiGqB,AsBpCH,A/M7DlB,C+M6DkB,CQjHjB,CxIuNiB,CiC3HV,AnG9EsB,A0MdJsL,CxIuNO,CLpMA,ClEQjB,AkERkB,AciOqB,A+HpPtD,C/HoPgD,AnBqEf,C7D9RlB,AgFyNoD,EnBqE/B,ArErQrC,C0EjC0B,CiFqLxB,A9I1LU,C6DKE,AiFqLqB,A3JpJnC,EqEqQQ,CfnNS,AqGkGf,CrGlGY,AkC8ImC,CmE5CN,CrGlGzC,AkC8I6E,MxFhM/E,CwFgMiD,CAAA,GmE5C/C,EAAuE;AnJ7KzC,AuE+LZ,AS0BmE,AwBtJ/E,A2C2GJ,A8B9CE,ApHgKE,A0I1MiB,A3LhFvB,AexBF,AyB+JO,A5DnHL,AN3BM,AL5CL,AkOmBFK,E3JuKM,A2JvKNA,ClOzBC,EmG4Q6B,CnBuEvB,AkJ1TH,C/MeG,A+MfFE,C/McA,AiL4IA,AtJlJN,AnC4CM,CQvCF,AYmBG,ApBoBA,CgHyCC,A2C2GE,AtFkHG,GAAG,AlClThB,C4CiNoB,AViGZ,ATnJD,A5DnHK,C+M4Da,AnJuDlB,C+FiCS,AvIxKd,AenBA,AzCYU,CqNuFe,CtB0CX,ApHgKK,A0I1MO,CpDwFJ,AvIxKP,AmMhChB,CvNoDC,AuNpDiB,C9B0JA,CtJ7IjB,AnCuCkB,CgHyCC,A2C2GO,AxH3L1B,C4C4M4B,AgIzGH,A3LhFzB,C2DyL6B,A0G/DR,AsB1CE,AQhHxB,EvG6FwB,A7EhFvB,AoLbwBN,ClJ0TK,AlC7S7B,CkC6S8B,ATnJzB,C2JvKN,EpLaC,AyB0JF,CmBkDoB,AiC5HW,A3C6NA,C2C7NC,A3C6NxB,AlC7SA,M6EgFA,G7EhFN,C6EgFwC,ApD0E1C,C+FiCwB,AxH3LL,CwH2LuB,E3C3GI,CAAC,A7EhF7C,EsJ6IiB,CAAmB,EtJ7Id,C6EgFsB,CAAtC,A2C2GmC,ExHhM3C,awHgM0C,EAAgB;AjFrL5C,AKuMK,AzBpHjB,AkC6IqF,AuBjM/E,AC4CD,A2C2GD,A8B9CE,ApHgKD,A0I3M4B,AnJwDjC,AxDuDA,AYtMA,AHXE,AbuCA,AN3BM,A2DXR,AkKdDI,EAAAA,C/HkPD,CpFpBE,CiEkFE,ChBlSE,AkKdD,ClJ2TC,A0I5ME,AQ/GFE,CjKqGA,AqGmGA,AoDzFF,C/LvFG,CyKkIC,C7HaC,A5DnHA,E+GHoB,AlGpClB,C4K6IC,A/LjIF,EgFPQ,A+GwIJ,ApHsJV,C0C/PyB,C1C2QvB,CK1Se,AtE4MJ,AmN9NhB,CnN8NiB,AJ1Kd,AuNpDe,E1MaC,C6DKK,AdqJJ,A/C1JA,AbuCA,C4DmHC,EmDtHO,A0EyGd,A/LjIO,A6NzBrB,C7IkBa,AL8RV,ArE5PA,AN3BmB,C6NzBI,C7IkBI,AqC+BF,A1C4QvB,AxDhTF,E8I2LyB,A8B9Cf,A5K7Ie,C8I2LC,A3IhL5B,AuMxBD,C9B0JmB,AzKlIW,GsC6Ed,C5D5EK,CAAZ,C4D4EU,CAAC,CewNf,ErDrSJ,C2IgLI,A/FjCJ,IxDuDA,CkDzHI,CAAJ,AyDpD2B,C3G6KoB,CkDzHhB,IlDyH/B,C2G7K2B,CAAA,EAAO,WAAA,GAAA,SAAA,CAAA,IAAA,EAA5B,EAA4B,CAAA,WAAA,CAAA,IAA5B,EAA4B,WAAA,GAAA,SAAA,CAAA,IAAA,EAA5B,EAA8B;AvGnBlC,AkEXY,AKuMC,AzBpHb,AkC6IL,AuBlMc,A4CwJP,A8B/CmB,ApHoKjB,A0I9MJ,AC5DG,A5LpBL,AexBU,AyBgKX,AxDuDA,ASjNK,AnBYG,A2DXH,AhElCJ,AkOoBDF,EAAAA,C3JqKM,AxDmBC,C+BjLI,C6KmCR,CDqEA,AQ/GC,CPoDC,AOpDAG,CR+GA,A3LhFE,APlBF,CkMkGC,A5KxGK,A9C3BHhM,CmBiDD,A6DgSI,AlCtTA,C4C4LE,CADF,A4EMA,AtFqHC,CfxNF,AlCtEE,A1BRL,CgFLQ,AqC8BG,ArHvBT,E4D4EI,AlCtEE,AmM/Bf,CjKqGc,AzCxFA,AxBjCE,CwBiCD,AxBjCEQ,CoM6KO,AsB1CnB,AC3DA,A7K7CM,AoLPM,C/M6BA,AuGmBO,A4CwJL,AoDzFhB,CvMlFe,AkEXI,AtDaF,A1BNJ,A6NzBhB,C7IkBuB,AvCXZ,C4EyCa,A4CwJF,A8B/CM,A5K5IvB,AxBjCG,CoM6KqB,A/LhIpB,AL7Cc,EiEyHb,AzCxFc,AnBYH,CcIlB,AkEXY,ApBmFS,CoBnFK,A+GuIL,ApM7KhB,CmBiDkB,AiL4HQ,ApHoKL,AjD9Rd,CAAc,A/BnDAF,CqFsCd,AvCXJ,AtBMN,CAAyB,EkGmCN,A0EyGA,ApHoKK,C0C7QL,A4CwJU,A8B/CV,ArK1HT,APlBV,C8I2L8B,CrGnGzB,AlCtE0B,CkCsEjC,AewNS,ChFjVJ,C0HoEI,A1HpEX,EgFiVW,AjD9RG,CAAd,EuIyKqB,CAAuB,atFqHhB,EsFrHP,CAAjB,EtFqHwB,KAAA,CAAjB,GAAiB,KAAA,CAAjB,GAAA,iBAAiB,CAAE,MAApB,CAAJ,EAAgC;A7D/RlC,AkETU,AKuML,AzBtHR,AyDrDO,A4CwJJ,A8BhDmC,ApHqK/B,A0I9MN,AC1DI,A7K9CI,AnBiBV,AHXG,AbsCD,AN1BM,A2DXJ,AhElCP,AkOoBEoL,ClO7BI,CkO6BJA,EpLOW,E4KwGR,A/M5DA,EqE0QM,CUjIW,A5CrLT,C4EyCF,A5EzCE,C4CqNF,A0GrE4B,AzK/H7B,AqCVIpE,AkKdH,CvNmDN,AuNnDO2E,C/M6BA,AwMwBI,AhNFX,CmC5CQ,AzCkBF,CiK+KG,CoDzFC,CAAC,AC1DI,A7K9CP,G4EyCQ,ArHvBJ,CqFmKK,AgC5IA,A5EzCT,C4CqLJ,A/EzIJ,CgB3BF,AhB2BQ,AN1BS,A6NzBlB,C/M6BK,AwMwBoB,AOrDHJ,CxGgDb,A1C6QiB,A2IxQA,CjGLD,CvGnBD,AmJ2KZ,CoDzFT,AQ/GH,C7NyBwB,A2DXM,CgB+SJ,AhB/SK9D,C7Ce1B,AwMwBE,CjGLE,CiGKyB,C3IwQzB,ArE1QN,AN1BqB,CM0BJ,CqDrCU,CAAzB,CgB+SI,A3EpSS,CM0Bf,CAAiB,EN1BF,EM0Bf,IN1BqB,KAAA,E2EoSE,G3EpSF,CAAN,C2EoSQ,E3EpSR,G2EoSQ,CAAjB,E3EpSS,C2EoSQ,E3EpSE,EAAnB,C2EoSiB,CAAjB,GAAA,iBAAiB,CAAE,WAAnB,EAAA;A7D/RJ,AkETS,AcmOjB,AuBvMW,A4CwJD,A8BhDA,ApHqKC,A0I9MN,AC1DO,A5LvBR,AevBU,AyBkHG,AxDsGL,AYvMT,AHXE,AwCCA,AkKdJ,E3JyHgB,AxDsGL,CYxNA,AqCIR,ClBJU,AkBOR,C0J6FF,GvM9EI,AwMwBI,A5LvBJ,CoEyNC,ArDhPK,CwHiMJ,A8BhDA,AtJjJI,CkBODrH,CjDiND,AiDjNN,CjCgBF,AhBiMQ,CwDtGK,AP3GF,CoI0IA,AuBnGI,A5LvBJ,AevBD,AyBkHG,CoJpEG,CvBmGH,CjL3HC,AmJ2KA,AxHjMJ,CwHiMK,EnJ3KE,AwMwBT,C5M0KA,C+BxNE,A/BwNF,C4M1KiB,GvBmGX,G9BgDR,A8BhDO,EjG+FjB,AiG/FqB,AuBnGT,CxHkMqB,E5B9HhB,CxDsGL,EwDtG4B,C4B8HxC,ApFxBE,EoFwB0C,C5B9HA,MpD5FV,CJkMR,IIlMlB,AJkMN,CwDtGsC,CAAiB,AxDsGZ,GwDtGL,CAAvB;ApD3FV,AkETQ,ApBiFX,AkCkJF,AmE5CQ,A8BnDE,AuBnGD,A5LvBL,Ae7BM,AyBoKZ,AxD0DI,ASlND,AbqCG,AN1BM,A2DVJ,GxCXN,CsBFU,I/B8NJ,AiDjNI,CmCyOH,ArDtPG,AyBoKZ,CNhEU,AnBpGE,CnCiDD,C2JyJC,A8BnDA,CrK1HC,CkCuEC,EnBpGF,Ef6BN,A1BNU,CyCvBc,EyBoK9B,AlE7ImB,C+LgIG,AzLtGhB,CsDmDI,AnBpGE,CmBoGY,CmImDC,AzLtGA,IyLsGb,AzLtGN,IN1ByB,EiKmLI,CAAC,CnE4ChB,MAAM,CAAC,ImE5CjB,KAA2C,CAA3C,CnE4CD,GmE3CG,EnE2C+B,a9F/N/B,EAAwC,MiKoLjB,CAAC,MrGvG1B,AkCkJ4C,ClClJlD,KkCkJwD,CAAC,ImE5CnD,IAEE,MnE0C+B,CAAzC,gBmE1CiC,CAAC,WAAxB,EAFF;AnJ7KL,AuE2JG,AzBnFL,AkCkJF,AmE1CQ,A8BrDG,ApHsKF,A0I/MN,A3LjFC,AetBD,AyBrCJ,AxD4PM,AYvMI,AhB0BL,AN1BS,A2DVF,AkKdL,C3J7BP,C5CqDU,CsCsED,AM3HT,CN2HE,AyJiBE,A5KvGA,CfoBA,CiDkSM,GsFzHF,AxH7LA,AoLRQwL,CR+GN,A5KvGD,C4CgLI,AgIzEF,A3LjFA,CqK0HC,CrLuEC,E2EvCI,AVsIE,AjDhSJ,AetBX,AnBgBM,C+DgKQ,A/DhKR,AtBAI,E2EsSQ,AlCtTL,A/BuNC,C2EvCG,AwIxLd,CxIwLC,AgIzEJ,A3LjFgB,AmM9BOC,CRgHrB,ChIwEkB,AVsId,A3EtSU,CqFgKK,A0GhCF,C8BxJhB,CRgHG,A/LxFA,AtBAU,CqFgKQ,A/DhKlB,AuMxBuB,CnM8BlB,AetBW,CAAC,A/BuNd,CAAgB,G2EvCrB,A3D1JwB,CetBf,A/BuNJ,C2EvCuB,A3EuC9B,C2EvC+B,C5ChLF,C4CgL3B,A3D1JO,AJNL,E+DgK6B,C/DhKrC,CIMuC,AetBrC,KfsB0C,EAAL,G1BNrB,C0BMgC,AJNlD,IIMS,EAA+C,K2LkFpD,CACE,UADF,EAEE,CrN1FY,EAAA,EAAA,KqN0FX,KAAD,EAAS,OrN1FU,MAAP,CAAA,CAAA,EAAa,mBAAK,GAAG,CAAC,MAAT,CAAb,CAAN;AgFAA,ApB8Eb,AqGwGM,A8BrDK,ApHsKH,A0I3MC,AC/DA,A5LTJ,AhBoLD,AYvMK,AHXR,AbqCC,AN1BU,A2DVD,AhEpCL,AkOsBJ,E1MaD,Cb+BA,EqE8PI,AjE7EF,CiE4E6B,A0ItLvB,AC/DA,A5M2KJ,CuJ9BoB,AtFwGtB,CsFxGE,A3IzKI,CHXR,AxBnCc1L,CqF6CF,AqI4FA,A/L3FJ,AHXR,CkMsGa,A3LxEJ,CqK6GC,A8BxJN2L,CnM2CA,AhBoLO,AYvMiE,AqCV3D9E,E3DQP,AL5CL,C0F6MU,AiInIG,A5LTJ,AhBoLV,AfrPiBnH,CqF6CF,AsI6BA,AhM5BX,A3B9CH,CqF6Ce,AtEwMJ,CSlNhB,AxBnCwBO,CwBmCxB,AxBnCK,AkOsBO,CRmHE,A3LxEK,A1BnBF,A6NxBJN,C7IuBD,ArF7Ce,AkOsBf,C7IuBa,A6IvBrB,CAAYiM,CPoDR,EtI7BqB,A+GiIJ,AsBrCZ,ClMtGb,CkMsGoB,AQnHnB,C9BwJ2B,C5K3I5B,AwCCmC,CAAC5M,EqBSA,CAAC,AtDoBvB,CAAoB,AiC7BjB,CAAwB,IqBShB,A+GiIc,ArK7GA,AiC7BtB,CoI0IuB,C5K3IxC,AwCC+CsI,CqBSD,G+GiIP,EAAQ,ApI1I9B,CjC6BH,AiC7BJ,CqBSe,CtDoByB,AmM3ChBqE,E7IuBsB,GtDoBD,EAAzC,CmM3C4B,C7IuBqB,A+GiIxB,ArK7GoB,AmM3ChBhM,C7IuBqB,A6IvBtB,C7IuBqB,A+GiIF,A8BxJ3B,C7IuBtB,A6IvBkCuK,CnM2ChC,CqK6GyB,ArK7GnC,CqK6GM,A8BxJT;A/M6BC,AkEHU,AKgML,ASmCT,AmE/CM,A8BrDM,ApH6KR,A0IlNQ,AC/DH,A5LTJ,AepCF,A/B2NG,AY3MI,AHVN,AnBWU,A2DVL,AhEpCL,AkOsBH,IlJqUG,C2IjSE,A3JzBE,CsGkMF,AvJqBA,AiDpNI,AhEpCFzK,C2N2EA,A3N3EC,C0NyIG,A/L5FA,CwEqOH,A3E/OA,C6DYK,AtEyMJ,AfxPE,CmBkDD,AJsMA,CuJrBC,A8BrDA,ApM9KR,CsKmOS,AtG/LIQ,CgBuTH,A0IlNI,A1JrGR,CgBuTK,A0IlNI,CpD0Fb,A8BrDU,ArL0EV,AV1MQ,A2DVK,CoI0IF,ArL0EA,C4M9LX,CrDyKa,A3ItLI,CqD8SH,A2I/QZ,A5M4KF,CItMF,AuMuFQ,CrI1FY,AiFoLlB,A8BrDM,AsBrCc,A/L5FH,AtBCH,C+LgIG,A5K3InB,AnBWiB,C2E6SG,ArD9SD,C0DEI,A1DFJ,CyKiIX,AsBrCA,CAAmB,ArN3FjB,C2E6SC,A3E7SW,CgFCZ,EL4SkB,A3E7SlB,CqN2FF,AC7DJ,ExHsMR,CAAmC,CxErOzB,EqD8S6B,GmBzEvC,EAA8C,AnByEd,KAAiB,QAAjB,GAA4B,KAA5B,GAAoC,CAAC,KAAD,GAAS,SAAU,CAAC,GAAX,EAA9D,GAAkF,IAAnF,CAAV;A7DxSD,AuE6LI,AzB7GD,AkCgJJ,AmE/CI,A8BrDK,ApH6KR,A0IjNS,ACzDF,A5LhBP,AhBuLE,AY5MK,AhB4BE,AN1BC,A2DVD,ErDoCA,CQnDV,A6DsQO,AjDnPA,CiDmPP,CU/Fe,EAoDX,CgItGM,A/L9Fa,CsCsFT,AkCgJP,EiG3G+B,CzL/F5B,C2J2JC,AqDlJI,AhNTL,I+EoHK,AiI3GI,CjI2GjB,C4EuCE,EoDzFmB,CzJRnB,AtD1DM,CsD0DqB,AtD1DrB,CgNSgB,CDyDC,ACzDA,ChMrCc,C+L8FZ,CzJRzB,AtD1DM,CgB5B+B,CsCsFS,C0JjD1C,AhMrCiC,AhB4BzC,CgB5ByC,C+L8FN,ACzDA,CDyDC,GvHwIlB,CuHxIR,G/MlEM,C+MkE4B,CvHwIpB,CAAC,EAAlB,AxF1MP,EAAwB,EgB5BhB,CwEsOwB,EuHxIuB,CAAC,MAAD,CAA7C,kBvHwIiC,MAAM,CAAC,GAAlB,CAAhC;Ad9NY,AK8LX,AzB/GD,AkCgJD,AmE/CI,A8BrDK,ApH6KT,A0IjNU,ACzDC,A7KpDH,AyBkKH,AxDyDH,AY7MO,AHTN,AbsCA,AN1BO,A2DVC,AhErCR,E8C8BK,C4C2JP,A3EuDU,I2MzGE,A1NvIL,C0NuIC,ACrDE,AhMtCiC,AHTrC,CyCgGC,AM6DO,A/C7JP,AbsCA,CyLsGC,CpM/KGpB,CAAT,CiEmIS,CoB/EK,A7DjBJ,CmM+CK,A7KpDV,AnBc2C,CgMsChC,A7KpDX,A9C9BSa,CAAd,CoM+Kc,AzKnIkC,C3B5C/B,CoM+KD,AzKnIgC,AhB6BhD,CgNSQ,AhMtCwC,AhB6B/B,E0ErBP,A7DjBV,AxBnCqBjB,C2NkFI,CtI9BF,AvCtBlB,AtBKgB,AbsCrB,CmC3CK,AnC2CiB,E4DuHpB,A5CpJI,C4CoJ6B,AvEhMR,CAACK,CWyE5B,CyLsGgB,EtJjJX,CmBqGA,A0JjDG,C1JiDY,CnBrGtB,E9C9BuB,CAAiBC,CuEgMpC,EAA0E,GN7DvD,CnBrGP,IyBkKZ,CzBlKJ,CyBkK0G,CzBlK/E,A9C9BJ,CAAgCC,CiEmIjC,EAA0B,CnBrGhD,A9C9BuB,CAAqCU,C8C8BhB,A9C9BrB,EAAwCb,CAAxC,KAA8CoB,CAAC,CAACC,OAAF,CAAUrB,CAAV,IAAe,CAAjE,EACbY,CAAC,CAACZ,CAAD,CAAD,GAAOa,CAAC,CAACb,CAAD,CAAR;AmBuDN,AkEHc,AK8Lf,AzBtGG,AqGwFD,A8BrDS,AsBpCH,ACzDE,A5LhBC,AerCiB,AnBcnB,AHRJ,AbsCH,AN1BM,A2DVG,E7CkBV,AYWU,CuI4CH,A3JvCG,C2JuCV,CoDoBI,EAWE,C5KhHqB,AnBcyB,CsCiG7C,EzCzGE,C6DiBK,A+G2HJ,CnInCC,AlC1ED,AerCiB,AkBQVgI,CCuGL,AlC1EF,GkC0EK,CAAb,AnB/GyB,CuCuBN,AqIyFf,CrIzFgB,ApBwFJ,AzCzGd,CyCyGe,E9CrFnB,AYWU,AerCiB,AtBMN,CLoBrB,A8CqFsB,AmImCA,ArK7GZ,AerCiB,EAAA,CsJkJF,AzKpI8C,AHRnE,C6DiBU,CpBwFa,CAAC,AtCjG2C,CyKoI7D,ApI1IyB,CjC6BzB,AJvB6D,AqCNnC7H,C7CkBpC,AQZuE,CRYvE,CYWA,CkC0EkB,ADvGD,CAAwB,GCuGH,CAAC,ADvGtB,C7CkBjB,C6ClB+CsI,E7CkB/C,AYWmB,IiC7BF,CjC6BjB,AiC7BU,CCuGuC,CAAC,AlC1ErB,AJvBrB,KRYR,C8CqFE,AlC1EF,EkC0E0D,AlC1Ef,CkC0EgB,EAAzD,EAA6D;A9CpF7D,AkEHW,ApBwFT,AkC4IN,AmEpDC,A8BrDW,ApHkLZ,A0IrNc,AC1DL,A5LhBL,AetCyB,A/BwR3B,ASjRY,AwCEL,AhErCL,EeoTF,G4M7PI,C1JqFA,A0JtFF,A7K1ByB,A9C5BrB5H,CAAC,C+BkED,CoEsNC,AnByEA,CxD9TK,CLoBH,A2B3BkB,A9C5BhB,CoM+KD,ArLqIV,C2MxKY,A3MwKZ,C+BxR2B,CfsCd,AetCc,A9C5BrB,CiE4IQ,CAAC,ClC1EU,CP/BJ,AxBnCF,EiE4If,CAAgB,AkC4ItB,AuH5IuB,A3MwKrB,ASjR0B,C2EqPL,AiGzGA,AsBnCC,A3L1EpB,AhBkPF,GfpT0BjB,CiE4ID,AzCzGK,CyCyGJ,AeqN5B,CfrN2B,AkC4I3B,AnByE6B,CfrNvB,AlDwKJ,CoF5BgC,CnGxRA,CgFiWlC,A0IrNyB,A3MwKvB,AfpTiC0B,EgFiWgB,CxD9TrC,CLoBmB,IAAtB,AuMqFa,CvMrFpB,CuMqF6B,A3MwKvB,IAAR,EAAkC,KfpTf,KAAwC,CeoT3D,EAAsE,OfpTpE,EACI,KAAK,IAAIR,CAAC,GAAG,CAAR,EAAWd,CAAC,GAAGJ,MAAM,CAAC0B,qBAAP,CAA6BT,CAA7B,CAApB,EAAqDC,CAAC,GAAGd,CAAC,CAACiB,MAA3D,EAAmEH,CAAC,EAApE,EAAwE;AmBuD7E,AkEHU,AKkMb,AzB1GK,AkC4IH,AwB/KK,AyEsEK,ApHkLV,A0ItNoC,ACvDnC,A5LlBC,AevC0C,AyBmKtC,AxDqHN,AYrQE,AhB2BQ,AqDpCP,AhEpCO,EWwEA,CQpBV,AwMxCO,CAAP,ChG6E+B,CpDoGzB,CoDpFF,C3CuPE,AjD/RA,AwC4HA,AxDqHN,AYrQQ,A3B7CMM,CqFoBG,AKiOV,ASkCA,AnGvRQ,CqFiBH,ArFjBIC,CqFeV,Ad8KyB,C6HfrB,ApHkLA,ArExRA,CI0OV,AJ1OU,E+MkE0B,C3MwKpC,CflTc,C+BiEZ,A/BjEsBrB,C2HyGpB,A3HzGqB,CekTzB,AflT0Bc,CAAD,C0FqP3B,A/E7KY,AXxEI,C0FqPO,AgI3GuB,AnJmDtC,A5DrHI,CqEwRJ,A0ItNuC,C1IsNtB,CrDnTG,A3B7CM,CoM8KP,ApM9KX,EgFgWR,ArDnTuB,AhB2BnB,CyLsGkB,ApHkL5B,ArDnT8B,C3B7COlB,C0FqPvC,AgI3GsC,A/MlEpC,E+E6K2D,AgI3GvB,GvH6IlB,AnGvRyB,CAACK,G0FqP9C,A0GvEyC,CAAC,AzLtGvB,C+E6K+D,ASkCxD,CAAC,CxF/MzB,EyLsGuC,AzLtGd,AXxEY,CAAiBsB,CoM8KP,AzKjIE,GAAG,CAAH,E+DwMnD,C/DxM0D,C+DwMkD,A/DxM7E,GwE0OtB,CxE1OsD,GyKiItB,CjGyGO,AiGzGpC,GpM9K2B,CAAsCpB,G2B6CzE,C3B7CmC,CAA2CU,CAA3C,EAA8Cb,CAAC,CAACc,CAAD,CAA/C,CAA3B,EACIF,CAAC,CAACZ,CAAC,CAACc,CAAD,CAAF,CAAD,EmGsR2C,CnGtRjCD,CAAC,CAACb,CAAC,CAACc,CmGsRmC,AnGtRpC,CmGsRqC,AnGtRvC,CAAX,kBmGsRgC,CAA9C;ATjCA,ASkCD,AwB5KO,A2C6HR,A8B1DY,ApHkLX,A0IvNwD,ACtDxD,ApJyGO,A5C/IJ,AHZE,AbuCF,AqDjCH,AhEtCQ,IsKuOT,A3I3LI,E+DwME,AnBzDI,CmJnDa,CAAT,A/MjEN,E4DoHM,E6HdF,CzEnEG,ApDiFD,A/C3JD,EkEoNX,AnBzDY,A5C/IC,CyKiIC,A7HcF,CmByDG,A0GvEA,CzKjIC,E4C+IV,C+F4CR,C9IvMsB,CAAC,C8IuMvB,C8B1DY,CzEnEgB,AhG9DxB,GHZE,CGYwB,CgG8DF,AnG1EG,G8IuM/B,C3C7He,IAAA,C2C6Hf,EAAA,M3I3LgD,GAAG,CgG8DvB,KAAA,ChG9D8B,CAAC,GgG8D/B,CAAb,EhG9DX,CgG8DwB,GhG9DyC,EgG8DzC,CAAb,GAAA,ChG9D6D,CAAC,MAAR,CAAe,CAAf,EAAkB,CgG8D3D,CAAE,KhG9DgE,CgG8DtF,AhG9DuF,EgG8DzD,IhG9DiD,GAAiB,kBAAnC,CAAjE;ARSJ,AkEEQ,AK8LJ,AzB3GA,A0D/BM,A2C4HyB,A8BzDxB,AsBtC+C,A3LxEtD,AevCA,AyBkKI,AxDsHJ,AShRI,AbuCF,AXvEF,I0FoPA,AzB3GA,AlDuKA,C2MpLE,CnJ8DU,CmJjDR,C/F/BE,A5F3CF,AevCA,AtBQA,CLoBR,AnBpDWF,CAAP,CuE0LiB,A5DnHV,C0EjBC,EpBmFE,AnBjHA,AyBkKO,CNjDN,AnBjHA,A/BwRA,C2E5DC,AnB1DK,CmB0DJ,AgI3GR,AnJiDY,A/C1JJ,CmG0EG,A5GsMF,AShRA,CmG0EG,CjC0IjB,AgI3GI,ChI2Ga,CgI3GT,AnJiDJ,A5DnHF,CsDkEF,A0D/BM,A7ElFF,AtBQA,AbuCe,C0EjBf,AsCoDkB,A2C4HS,AxH9MX,EuC8BA,A7DtBG,EbuCrB,CmC/CE,AnC+CqB,CQnB7B,AuEgM8B,A5C5N1B,C4C4N2B,C5C5NC,A/BwRA,AJzO1B,CIyO2B,CShRzB,GmG0E+B,CAAC,CjC0InB,CAAmB,C4EdL,E3C5HT,A2C4HS,CvJ0EH,CAA5B,C4GtM6C,CjC0I5B,CAAjB,C4Ed+B,G3C5HzB;AxG9IV,AkE2FU,AK8LP,AzB3GA,A0D/BM,AyEqD+B,AsBvBvB,A3LzEX,AevCA,AyBiKE,AxDwHJ,AYnQA,AHdG,AbuCF,AqDlCL,AhErCC,CmBrCD,CAA8C,CuEuR5C,AzBvHO,CAAP,ADtFE8H,CrDgCA,C4DoHmB,E5C3If,C+DsMC,A0GrFY,AzKjHZ,AqCTA,CqBiBC,A+GyGF,AtJvIE,CfuCC,AevCA,AyBiKiB,AxDwHjB,CiD5QC,C0JmGK,CnJiDW,A5DlHd,AqDlCd,CjC0BM,AhBkPS,CgBlPC,AevCA,AyBiKY,CcnIX,AdmIW,CcnIV,AvC9BZ,EAAc,CfuCd,C2LyEoB,AnJiDlB,CmJjDmB,CvM7K3B,CAAA,CkE2FU,AtE2PC,CAAsB,CYnQ7B,EAA0B,G+L0FF,I3MyKM,I2MzKP,EAAS,C3MyKH,EAAU,MAAV,EAAgB;AsE1PxC,AK8LL,AzB3GH,AyDhFS,A4C2KV,A8BvDQ,AsBtCiC,A3LxEpC,AevCG,A/B2RF,AYrQA,AHdD,AbuCC,AqDlCN,I0B+MI,A1B/MAC,CjCwBA,C2FJM,A3FMJ,IhBoPI,AYrQE,C+DsMD,A4EhBX,A3J7JW,CqDlCC,CjC0BC,AJjBE,CIiBT,C2LwEmC,A5K/G1B,AkBaA,C0DoBK,A3FMJ,AJjBE,C+FWG,G1DpBrB,ClBbe,CAAA,A/B2RT,AJ5OA,C+MgE2C,CtBsCpC,AsBtCqC,ChG9ExC,G4C2KV,CoD7FyC,CtBsCjC,AsBtCgD,CpD6FxD,AxH5Me,CsJqJM,AtJrJA,C4K+GoB,CAAA,A/LzFL,CAAC,GAAnB,EmBtBH,AnBsBT,CyK+HE,AtJrJqB,CsJqJE,GtJrJhB,CAAc,IAAd,EsJqJP,AtJrJsB,KAAf,EAAsB,KAAtB,CAAP;A4C6NL,AgC3LM,ACgDD,A2C0HR,A8BtDO,AsBvCqD,A3LvEtD,AevCC,AyBgKL,AxD2HI,ASnRH,AbuCE,AqDlCL,AhErCO,GwBuBL,CwCcEC,C0DvBE,CC2FE,A5F1CF,AwCyHA,AxD2HA,C2GxPE,AgG2EkB,CpD6F1B,AoD7FiB,C1NtIDpH,IsKmOhB,AvIpKa,AwCyHA,GmD1KP,A4CqNN,AvIpKgB,AiC1BhB,COmJM,CmD5HE,A3GuPU,CfnTX,C+B+DD,A/B/DqBC,CemTN,CuJhFrB,A/F3CsB,IoD/EM,A5G0MH,CuJhFzB,AvJgF0B,G2GvPlB,AnD4HN,AvExLK,C2HyGqB,A2C0H5B,C/F3CgC,AvExLOC,G2HyG/B,A2C0HR,CvJgFqB,CACb,CfpTD,C2HyGC,C3HzGuCC,CsKmO/C,CAAA,CtKnOO,EAA6CC,EsKmOpD,AvJiFS,CuJjFT,CtKnOO,EAAmD,CsKmO1D,AvJiFQ,EuJjFR,AvJiFc,K4G3Mc,I2C0H5B,C3C1H4B,A2C0H5B,IAAA,C3C1H4B,CAApB,E2C0HR,C3C1H4B,KAAA,CAApB,GAAA,oBAAoB,CAAE,WAAtB,EAAA;AtChDA,AK4LP,AzB3GD,AyD5EU,AC4CF,AyEoEH,AsBxCwD,A3LtEvD,AwCyHF,AxD4HM,AYvQJ,AhB0BH,AqDlCH,AhErCI,GWiEQ,CqD5BRiH,CoIiFO,AsBEL,ChG3DI,AC4CF,A+FcJ,A3LxDE,A/B/DEhH,CoM6KD,ApM7KE,CqFwDD,CpBiFC,CM+CC,A5C3IA,A3B7CEb,EeoTE,C2GvPG,CnD2HH,A5C3IA,AqCRA,E0DwBM,AC4CF,A5F1CF,CsDPD,AsCiDI,AhG5DF,AqCRA,CrCQX,AqCRY,CjC0BE,AiC1BpB,AhErCqB,CqFwDH,ApBiFlB,AyD5EU,A0EyDC,ArKvDU,A/B/DCC,CiEyIE,AmInBpB,ArKvDkB,CAAF,CwCyHV,CchIF,AdgIgB,CoD/EhB,C5F1CmB,A/B/DvB,C+B+De,CkC0EnB,EAA+C,ClC1Ed,IAAI,KAAJ,CAAU,CAAV,CAA3B,mBwCyHI,CAAN;Ac/HG,ApBiFL,AyD5EO,AC4CD,A2C4HN,A8BxDC,AsBlCC,A3L5EC,AexCC,AyBiKH,AxD4HS,ASpRV,AxBjCE,EwBiCF,C4K0DA,C9B2IA,C5CzNI,CADF,AC8FI,A3H1GsBa,CAAC,EiE0ItB,AqG4FP,A9IrMA,C8IqMA,AvJ+EU,ASpRV,AxBjCgCD,C0N4IvB,A5KpHA,A9CxBwB,EiE0ItB,ClD2KG,AfrTsB,CeqTrB,AfrTiB,C2H0GhB,CAAC,A7ElFb,C9CxBoCH,CwBiCxC,CsBTkB,A/B6RJ,ASpRd,CToRU,CuJ/EV,CoD1FS,C1N5IuB,CsKsOjB,AxH9MX,CwH8MJ,CtKtOiDE,C2H0G3C,GnGzEN,AxBjCqD,GwBiCrD,CyCyGO,CAAe,AjE1IoC,IAAT,GAAgBA,GiE0I1C,AzCzGvB,CxBjCqE,GAAGhC,MiE0IlD,AjE1IwD,CAACmC,CiE0I/B,uBjE1IwB,CAAgCL,MAAhC,EAAwCC,GAAxC,CAAvB,GAAsEC,IAArH;AiE2IA,AyD1ED,AC0CI,A2C+HL,A8B3DD,AsBjCK,A5KjHA,A/ByRK,AYtQL,AHdF,AbuCQ,AqDlCZ,AhEvCI,EWyEQ,C+GjEH,CzDmIL,AyDnIF,A4CkOA,C3CxJ+B,C+F4D3B,A1N9IyHlC,C2H6GzH,A3H7GF,EsK0OF,AvJ0EQ,ASlRD,AwCKAoJ,CsGmMP,AxH7MU,A/ByRA,CkD3KD,AtC3FA,CsC4FJ,AtDnEK,CAAA,EgBzBG,CsC2FX,A0DzD6B,A7ErDf,AnBmBF,CsC6FR,AlDyKW,C4GvMb,AnG7EF,CkM4Ge,A5KjHE,AnBmBF,CZsQP,AYtQN,CHde,CkM4GC,A3MwKE,AYtQF,AhByBV,CmC5Ca,AnBmBF,AhByBX,CqDlCZ,E0JuGM,A/L9FoB,AHdA,CyC2GjB,AqG6FP,AtGnMyB,G2DwErB,A2C2HgB,ErG7Fd,AzC3Ga,AbuCT,CgBzBqB,CsC6FnB,AtC7FoB,C2I0LhC,A9IxMiC,AbuCjC,CmC5CmB,CAAkB,EtBKnC,CGckB,EmBnBsB,EnBmBC,GhByB3C,ImC5CmB,AnBmB+B,CAAC,CmBnBE,AnBmBH,CAAP,ImBnBe,AnBmBU,GAAhE,CmBnBe,CAAf,AnBmBqE,CAAC,IAAI,CAA1E,EAA6E;A0DY7E,ApBkFI,AyD5ET,AC6CW,A+FgCP,A3L9ED,AenCE,AyB4JJ,AxD6HU,AYtQJ,AHdJ,AbuCA,AqDlCA,AhEvCA,EuEyLF,GmJ9CE,CnJ8CE,APlJE,AhEvCA,CgEuCCH,CjCyBD,AJhBA,AhByBA,CavCC,CyC2GK,AlDyKF,CkDzKG,AnBhHJ,AyB4JA,C5CzIC,C0DWC,AsCmDA,A3H9GE3G,C8C6BT,AyB4JJ,CxCzHE,AenCW,AnBmBA,AqCTP,CjD+QU,AYtQV,C0DWF,AtDKW,AwCyHA,AxD6HE,CwD7HF,A/CvJb,CwCKiB,COkJJ,AxD6HC,AiD/QI4G,AhEvCd,CiE6IiB,AnBhHnB,A/ByRM,ASpRS,CyC2GK,CM4CT,E/CvJb,AxBlCuB,C2H8GD,E1D+BhB,C0D/BmB,C1D+BK,CM4CT,CAAC,APlJtB,C2DuEQ,A3H9GJ,CgEuC4B,EOkJnB,CvEzLsB,KuEyLT,EvEzLgB5G,EuEyL7B,IAAa,CvEzLuB,CuEyLvB,AvEzLwBC,KuEyLxB,GvEzLS,EuEyLT,CAAb,EvEzLkD,CuEyLrC,KAAA,CAAb,GAAa,AvEzL1B,EuEyL0B,AvEzLiDH,CuEyLjD,AvEzLkD,GAAGE,CuEyLrD,CAAb,KvEzLyE,CAACC,EuEyL7D,EAAG,IvEzLkD,CuEyLrD,AvEzLsER,CuEyLlG,GAAyC,IAAI,EvEzLoC,EAA6BC,CuEyL5D,GAAT,EvEzLwC,CuEyLzB,CAAA,AvEzL8DC,EuEyL9D,CvEzLyB,EuEyLzB,AvEzLmEC,IAA1C,CAAJ,CAA3E,EuEyL8D,CAAC,EvExL1D,GuEwLiD,EvExL5C,IuEwL0D,AvExLtDd,CAAC,GuEwLuC,AvExLpCW,IuEwLkD,EAAA,IvExLxC,CuEwLwC,AvExLvCR,KuEwLuC,CAAd,AvExLpC,GuEwLkD,AvExL9B,CAAjC,EAAoCH,CAAC,CuEwL0B,CAAd,EvExLR,CuEwLsB,AvExL/D,EuEwL+D,AvExLnBA,CuEwLmB,AvExLlB,EAA7C,EuEwL+D,AvExLd,CuEwLA,GvExLIpB,CAAC,GAAG+B,CuEwLM,EAAG,KAAH,CAA7B,CvExLiC,CAACX,CuEwLO,AvExLR,CuEwLQ,AvExL1B,EuEwL0B,AvExLHgB,CAAC,EuEwLE,CvExLC,CAACD,CAAC,GAAG,CAAJ,CuEwLM,CAAC,CvExLCnC,CAAC,CAACoC,CAAD,CAAT,GuEwLF,AvExLiBD,CAAC,GAAG,CAAJ,CuEwLA,EvExLQnC,CAAC,CuEwL1B,AvExL2BgC,IuEwLV,EAAA,AvExLS,EAASC,GuEwLlB,AvExLS,EAAcG,CAAd,CAAT,CuEwLA,CAAjB,CvExL6CpC,CAAC,CuEwL7B,AvExL8BgC,KuEwL9B,CAAjB,AvExL8C,EAASC,CuEwLtC,EAAA,AvExL6B,CuEwL7B,AvExLhB,IuEwLgB,CAAjB,AvExLgEG,CAAnE,OuEwLoB,CAAnG;Ac7HG,ApBkFO,A0DhCsB,A2CoIjC,A8BlED,AsBjCG,A3L9EG,AenCA,AyB4JL,AxD6HW,AYtQL,AHdJ,AbuCG,ANrCC,A2DGC,AhEtCJ,G0NiDK,AlMnBP,CkMmBA,CrI/DS,AsC6FsB,CtC7F7B,AsC6FA,E1D6DQ,CmIkCH,ApM9KED,CeqTC,AfrTA,C+B+DD,ApBSA,EmC5CE,A9C5BE,CAAJ,IiE4IW,AjE5IFC,CiE4IG,AnBhHJ,A9C5BR,CoM8KX,AtJlJoB,CsJmJlB,CrKhHI,AhBsPkB,AJ7OlB,CsDoEM,AtDpEW,AXxEElC,CiE4IG,EmIkC5B,CrLuIwB,CqLrItB,AtJpJW,CmBgHD,AnBhHiB,A9C5BE,CoM8K/B,ApM9KgCsC,CeqTpB,AJ7ON,CyLwG2C,EtJpJpC,C/ByRD,C+BzRwB,KAAvB,CAAP,E9C5BmB,CAAsBR,EeqTvB,IfrTC,CeqTD,CfrT+BC,GAA9B,CeqTD,CAAZ,AfrTgDG,CAAnC,CAAd,CeqTa,CfrTwCA,CAA5D,GeqToB,CAAZ,GAAA,YAAY,CAAE,WAAd,EAAA;AsE1PT,ApBkFS,A0D9BR,AyEkEF,AsBnCD,A3L9EK,AenCD,A/ByRM,AJ7ON,AqDlCA,AhEtCJ,GqFtBC,CsCoIE,C7E9FA,AnCsDA,CyL0GF,EnIpCU,E0D9BF,AyEkER,CzElES,A7ElFA,EsJoJT,ArKjHW,CpBSC,CyLwGZ,GnIpCoB,CAAC,C0D9BnB,CAAiB,E5F/Cf,IkC6EM,c0D9BR;AtCnDH,ApBkFU,A0D9BR,A2CyHD,AvIxKG,AejCC,A/BuRG,AYvQH,AHbJ,AbuCI,ANrCA,EiKoMJ,A9ItMA,CmGVO,CAAP,EhGuBI,CZ+Pe,CS5QnB,CTqRM,ASrRN,CGaQ,AtBXA,CMqCC,EmC1CE,CnBgBC,CZ+PO,CV1Qf,CUoRE,CVpRU,CiKoMhB,CAAA,C3IzLmB,CAAC,AhB0BhB,CavCJ,CT4QmB,AS5Qf,CT4QA,GY/PQ,C2IyLZ,A3IzL2B,C2IyL3B,A3IzLY,CHbR,CGa0B,AHb1B,IGa8B,GAAG,CmBhBb,AnBgBZ,C2IyLZ,A3IzLI,AHbJ,EAAI,C8IsMJ,CxHzMI,QtBGJ,EAAY,C8IsMZ;ArG1FO,A0D9BR,A2CyHG,AvIxKD,AejCE,A/B0RA,AY1QA,AhB0BA,ANrCG,A2DEJ6G,AhErCG,EgEqCHA,CjCaQ,EkCmFR,AlDmKO,CAAP,CkD3JI,AmIiCN,E9ByDO,A9IvMP,AxBhCcxG,CgEqCJ,CoIyIV,EAAA,ApIzIa,C3DFD,E+L2IZ,ApM9KK,CiE6IE,AjE7IeC,CKmCN,A2DEd,CoIyIF,CnIjCM,CmIiCN,A5K9IA,CyC6Ge,EmIiCf,E9ByDE,CtKvOG,EsKuOsB,AtKvOOC,IsKuOhC,A8BzDF,CAAA,IpM9KK,EAAwC,EoM8K7C,EAAA,IAAU,U/L3IE,CAAwB,MAAxB,CAAN;A4D0Gc,AqG8FlB,A8B7DF,AtJ/IC,A/B0RA,AY1QA,AhB0BA,ANrCI,ALnCH,G8CYK,A/BwRP,AY3QQ,AhByCE,CyL2GV,IAAA,C9B6DO,A8B7DP,ApM7KS,EoM6KT,EnIjCoB,CmIiCpB,CAAA,CAAA,GAAA,ApM7KmBX,EsK0OjB,ErG9F4B,CAAC,CjE5ItB,CsK0Oe,CAAtB,AtK1OyBC,CoM6K3B,CnIjCoB,AmIiCpB,CnIjCqC,AjE5I5B,CsK0OoB,A8B7D7B,CAAA,ApM7KgC,CiE4IZ,CAAA,GqG8FS,CAAA,SAAA,CAAM,WAAN,CAAiB,IAAjB,CAAiB,IAAjB,CAA3B;ArG9FuC,AqG+FxC,AvI3KD,A1B5BG,A2DCD,AhErCgCU,E+BgElC,CuIqKA,CtKrOkCA,CiEoIhC,CD/FIuG,CCyGD,IAVH,CAUQ,ClC9EV,A/BhE2C,C+BgE3C,A/BhE4ClH,EiEoI1C,EAUc,ADzGE,CAACT,ChErCwB,EAASU,C+BgEpD,CAAA,CiC3BE,AhErCyC,EgEqChB,AhErC8BS,Q+BgEzD,E/BhE2C,C+BgE3C,A/BhEkC,Y+BgElC,UkCoEE;AAWD,AlC9EC,AejCQ,A/B2RA,AY5QZ,AHfI,AbyCJ,ANpCG,A2DCKsG,AhEtCiE,E8CgC7D,A/B2RA,CkDxLH,A5D/IP,ALYE,CiEmIF,AD7FMA,IjC2BA,CAAC,AJlBT,AhB0BA,AqDnCa,GjDqRD,AiDrRIE,CjDqRJ,AS3RD,COiCG,APjCH,CsBAC,AtBAD,CsBAC,CtBAD,EbyCX,CoBRI,APjCO,EOiCW,AhB0PV,AY5QZ,CZ4QY,CiDrRgB,ClBNhB,AtBAI,AwCMalD,ClBNjB,KkBMI,CAAoBgD,CjDqRxB,CS3RD,ET2RT,CiDrRc,CAAR,ElBNI,AtBAa,GsBAvB,CtBAS,ET2RY,ES3RE,EAAA,GsBAE,EtBAF,CT2RvB,EAAgD,ES3RzB,CAAd,CsBAT,EAA0D,AtBAnC,EsBAvB,EAAoE,CtBA7C,CAAd,GsBAT,AtBAuB,EsBA8D,AtBA9D,CAAE,MAAhB,IAAyB,CAAhC;AyCgHH,AqG4FD,A8B7DE,ArK7GU,AelC0D,AnB1DtE,AH2DG,Ab5EH,AqDkFK,AhEtCJ,C2B3BD,AhBjBA,CgBiBsC,AhBjBH,CqDgF/B,ExCNU,C4KgJR,EAAE,AtJ/I8D,CwH4MtE,AtGrMW,CjC2BC,EAAA,CqK6GC,AtJ/IyD,EfkCtC,EqK6G9B,CtJ/IoE,AnB1DtE,CyKyMmB,ArK7GP,AJ5FZ,ImB0DsE,CAAA,EwH4MtE,AxH5MsE,EnC3EtE,CAAA;A2JsQA,A8B3CI,ArK9GQ,AelC0D,AzCyBpE,A2DjBMG,CsGmLR,CAAmC,AjKlKjC,E+LuHE,ApIxIIA,ElBR8D,GsJgJ7D,CrK9GK,CelCwD,CfkCtD,EelCsD,AzCyBpE,A2DjBgB,CjC0BF,AelCsD,AzCyBpE,E0BSc,AiC1BK,CjC0BL,AiC1BM,CAAd,CjC0BI,CPnCE,GnB0BZ,CAAA,GAAA,GAAA,SiKkKF,CAAA,AjKlKM,QAAJ,EAA2B;A4DyF7B,AmIgCI,ArKhHQ,AelC2E,A/B4RnF,AiDnRC,AhEtCE,SiE+IE,AjE/IOvG,C+B+DE,CqKgHP,ArL0IA,CAAA,EAAA,CqL1IP,ErL0IO,EgB1PgB,A/B/DpB,CAAoBC,CiE+I3B,CAAyB,AlChFE,AhB0PX,EgB1PW,CAAA,GhB0PhB,EkD1KX,CjE/IO,CiE+IuC,CjE/INC,C+B+D5B,AhB0PU,IAAX,IAAW,EAAA,EfzTf,EAAgD,CeyTjC,KAAA,CAAX,GAAW,KAAA,CAAX,GAAW,EAAA,CAAE,SAAF,CAAY,UAAZ,CAAlB;AkDzKF,AmIgCC,ArL0IA,AS9RW,AxB3BV,GeuTQ,AS5RV,GxB3BM,GiE+IC,IAAI,AjE/IER,OAAP,KAAmB,QAAnB,EiE+IC,CAAe,CjE/Ie,OAAOA,EiE+IrB,KjE/I4B,CAACS,IiE+I9B,EAA0B,EjE/IX,KAA4B,UAA/D,EAA2E,OAAOT,OAAO,CAACS,QAAR,CAAiBF,WAAjB,EAA8BC,aAA9B,CAAP;A+B+DjE,AelCV,AnC0CJ,ANfI,A2DlBA,AhErCH,IWsED,EqDjCQkG,E3DkBA,CyC3BC,CfkCK,CiCzBD,CAACzH,ElBTV,EzC2BY,C0BOK,AelCJ,CnC0CjB,AqDjCI,EjCyBsB,A1BPN,A2DlBE,CrDiCtB,KmC1C0B,CAAC,CzC2BC,C0BOO,CAAA,CpBQnC,CmC1CiB,CzC2BgB,EyC3BE,EfkCrB,ApBQd,ANfI,EMeJ,ANfuC,CyC3BnC;AsJoJF,ArKhHI,AenCM,A/BkSV,AShSU,AbuC2B,ANdjC,A2DlBE8H,EjDyRN,AShSU,EwCOJA,EoI0IF,EAAE,AtJnJI,CtBEA,CAAA,AnByBF,C0BQC,ChB+PT,CqL/IW,ArL+IX,CiDzRgB,CjC0BZ,AenCa,AzC2BJ,G+LwHb,ArKhHgB,AenCM,CtBEZ,C4KiJQ,A5KjJR,CnByBN,CUuQJ,CgB/PqB,AhB+PpB,AVvQoB,CMcgB,GmCzCN,CfmCf,AenCe,GfmCF,EPjCnB,EsBFA,CfmCwB,APjClC,EbuCqC,EAAA,KoBNR,AhB+P7B,CShSwB,AbuCa,EoBNS,ChB+P9C,GgB/PI,IPjCJ,EAAiD,GTgSjD;AqL9IE,ArKhHE,AenCF,A/BkSA,AShSA,AnB2BI,A2DpBH,AhErCE,I8C4BH,IzC6BI,CmB3BC,AxB9BOrG,EoM+KL,ArKhHA,AenCA,A/BkSA,C+BlSC,GsJmJR,ArL+IA,C+BlSA,CAAa,CfmCX,A/B/DC,CAAmBC,CKyDN,C0BMC,AenCjB,AzC6BiB,EmB3BjB,GOiCE,A/B/DC,EAA4BC,CKyDf,CAAZ,QLzDD,EAAwCC,CAAxC,EAA2CC,SAA3C,EAAsD;AiE6IzD,AmImCD,ArK/GG,AepCD,A/BkSF,AJ1PD,ANXK,A2DpBN,AhErCG,Ge4TF,C+BhSG,GzCyBC,I4DuFkB,AnBhHgB,AnCwCtC,AXpEWC,C8C4B4B,CzC6B5B,E4DmFW,CnBhHnB,A9C5BD,C8C4B0C,A9C5B3BC,KAAf,EAAsB,CiE4IF,AtDxEtB,CACE,EsDuEoB,EnBhHmC,CAAC,CfoC5C,OAAV,CpBIJ,CoBJuB,CepCpB,AnC0CD,GoBNE,EpBIJ,EsDwEsB,AtDrEpB,QsDqEoB,AtDxEtB,CsDwEsB,CtDrEU,CsDqEF,YAAA,GAAA,UAAA,CAAA,IAAA,EAA5B,EAA4B,CAAA,YAAA,CAAA,IAA5B,EAA4B,YAAA,GAAA,UAAA,CAAA,IAAA,EAA5B,EAA8B;AAAzB,AnB/GL,AtBCA,AbsCF,ANVM,AL1DoB,QWoE1B,GmCvCS,AtBCA,AxB9BwBA,CiE4IpB,A5DlFH,CMUV,EmCvCE,CnC4CA,AXzEoC,CiE4IpB,AzC9GT,CAAA,EyC8GS,A5DlFA,EMehB,CAAA,Ia3CO,Ab2CP,Ca3Ca,Ab2Cb,AXzEgDH,CAAjB,GiE4If,AtDnEhB,ANf4B,AL1DwBG,CiE4IpC,ItDnET,AXzEwB,CiE4I1B,EjE5IuD,CwB8BrD,AbsCT,CatC4B,EnB4BtB,AL1D4DH,CAAJ,CwB8BrD,AnB4BmC,AL1DwB,CwB8BxC,IAAnB,EAAoB,GxB9BiDI,OwB8BrE,AxB9B2D,CwB8BlE,CxB9BqF;AiE6InF,AmIoCJ,ArKhHI,AenCH,A/B4XD,AS3XC,AnB8BO,A2DtBV,AhEvC2FA,Ee0ZzF,C+BlYU,AtBIA,GxB5B+EA,EiE6IrF,CmIoCG,ApI1IA8F,CjC0BC,CqKgHC,CAAA,ArKhHC,AhByVV,CAAA,Af1ZgG,CK6DpF,AL7DqF/F,E+BiEnF,CqKgHP,CnIpCO,AmIoCL,CnIpCM,ADtGjB,AhEvCkG,C+BiE5F,A/BjEqF,E+BiErE,AhByVpB,AV7VoB,A2DtBA,CCsGhB,AmIoCK,ArLyOT,AV7VqB,C4DgFD,AmIoCb,EAAE,CrLyOT,EkD7QI,A5DhFQ,CU6VZ,GV7V+B,QAAQ,CU6VvC,AV7VwC,U+LoH/B,A/LpHsB,CAAoB,C+LoH1C,EAAA,C/LpHsB,CAAvB,EAAkD,e+LoH7C,IAAJ,CAAA,CAAF,EACJ,IADI,CACC,gBAAK,CAAL,CADD,EAEJ,SAFI,CAEM,YAAA;AAAM,ArKjHb,AhBwVD,AJ/UH,ANbQ,A2DtBR,AhExCwG,KAA5C,CgEwCxD2F,AhExCoB,Ee0ZrB,AJ/UC,GyLwGa,CzLxGjB,CoBTS,CiC1BT,CjC0BI,CqKiHkB,ApI3IR,EoI2IG,ArKjHH,AhBwVX,GAAA,EgBxVgB,AhBwVhB,cgBxVW,CAAoB,SAApB,EAA+B,EAA/B,EAAmC,IAAnC,CAAV;AkC4EF,AmIqCsB,ArKhHrB,AenCK,AtBEA,AnB6BD,A2DtBH,AhEzCwG,E8CgCpG,AtBEA,C4K+IH,CAAP,K5K/IU,CAAA,EyC4GF,GnB9GE,CAAA,GtBEA,CAAA,EyC4GQ,CAAC,EnB9GT,CAAA,GmB8GN,CzC5GM,CyC4GiB,EzC5G3B,OsBFU,GAAV,AtBEqB,UsBFI,AtBEzB,EAA8C,OsBF9C,EAA0D,EAA1D,EAAoE,KAApE,EAAqF;AmB+G/E,AmIqCP,AtJpJqE,AtBGlE,AbyCA,AqDlCC,QlBViE,AnC4C9D,CI8UD,ASvXE,IsBH6D,A/B0X/D,EAAA,G+B1X+D,A/B0X/D,GAAA,E+B1X+D,A/B0X/D,ASvXH,CsBHkE,EAAA,A/B0X/D,SAAA,CAAA,AJ9UY,QI8UZ,EAAA,IAA2C,AJ9U1C,CAAJ,EAAgC;AsDoE7B,AlC3ED,AerCgE,A/B0X/D,AJ3UD,ANfI,AL/DN,M8C+BkE,A/B0X/D,AJ3UD,GX9EK,CW8ED,ANfA,C0BKC,AerC2D,EnC+CzD,CmC/CyD,A9C/BtD9F,C8C+BsD,A9C/BrD,C+BoEX,AhBqVC,CAAA,CV1VW,C0BKC,AhBqVZ,AV1VY,CU0VZ,AfzZeA,CAAC,E+BoEjB,AhBqVC,CfzZmBK,GW8EpB,ENfI,CAAoB,CL/Db,CeyZV,AfzZI,CeyZJ,CV1VG,AL/D0B,CeyZ7B,CAAA,QfzZuCD,OAAV,EAAmBE,MAAnB,EAA2B;AiEgJ1D,AnBjHkF,AtBInF,Ab4CC,ANfI,A2DtBL,AhEzCI,KW0EJ,CqDjCI6F,GxCPC,Eb4CE,EqDrCI,AhEzCE5F,EW8EF,CqDrCGkF,MhEzCV,CAAmBtF,GgEyCC,CAAC8F,ChEzCrB,CW8EG,CX9EuB,CW8EH,Ca5C3B,CAA6B,SwCOL,CxCPxB,AwCOA;AjC2BE,ApBgBG,AqD1CLH,AhE1CgC,EgE0ChCA,IjC0BE,ApBgBG,IAAI,AqD1CD,AhE1C4B,E+BoElC,CAAA,ApBgB6B,AqD1CpB,IAAX,KjC0BE,CAAM,IpBgBqC,CAAA,IAAxC,EoBhBH,ApBgBS,CoBhBQ,IAAjB,ApBgBc,CoBhBG,EpBgBY,EoBhB7B,YpBgB2C,CAAA,KAAxC,EAAa,QAAQ,GAAK,cAAc,CAAA,QAA3C;AoBfD,AetCD,A/B0XA,AStXA,AbkDE,ANrBE,A2DpBJ,AhE5CsCtF,MgE4ClC4F,EhE5CkC5F,CKgEjC,A2DpBE,CrDyCD,CmCtDC,A/B0XA,AStXA,CwCSGqF,AhE5CgC,CAAC5F,CKgEjC,EmB7BE,CwCSG,CAAC7B,CrDyCd,CmCtDF,C/B0XiB,CAAC,AfzZkC,CAACqC,CKgEhD,A2DpBL,G3DoBuB,ALhEoB,CeyZpC,AVzVgB,ALhEmCN,EKgEnC,CUyVI,AStXpB,CAAqB,CnB6BL,ALhEoB,CAAD,CAAJ,GKgEV,ImB7BrB,CAAP,KnB6BuB,MAAe,EUyVG,EVzVlB,IAAe,EAAA,EUyVX,EAA0B,CVzVf,GUyVX,CAApB,CVzV+B,CAAf,CUyVsC,EVzVvB,EUyVtC,AVzVuB,GAAmB,EAAtC,EAA0C,IAA1C,CAA+C,QAA/C;A0BML,AetCA,A/B0XA,AStXA,AnB6BI,ALjEiE,G+BsDtE,AexBU,A/B0XV,ASxXU,IxBhCwB,CAAqC,OAAO5B,CAAP,EAAU;AWsF7E,ANpBD,A2DrBD,AhE7CiF+B,QAAAA,CgE6C3E8F,CrDyCA,EqDzCN,EAAW,AhE7C4E,CWsF7E,AXtF8E7H,CAAD,CAAN,EWsFnE,eAAO,wBAAnB,EAA6C;AoBfnD,AerCY,A/BqZV,AShZU,AbmDJ,ANvBL,A2DrBKwH,AhE9CyF,E8CkCrF,A/BqZV,AShZU,CnBQV,C2DDMA,IrD4CA,CoBnBR,APhCY,CAAA,ETgZV,CAAA,E+BrZU,CAAA,AkBYQ,CrD4CL,EanDH,AwCOWF,CjCyBvB,APhCY,AbmDM,EI6VhB,CAAA,CiDzYM,ClBZI,CAAA,AnCwDY,CAAC,KI6VvB,CJ7VgB,CmCxDN,AnCwDoB,CI6V9B,AShZU,EsBLV,CtBKA,OTgZU,E+BrZS,CtBKO,AbmDV,CAAV,GmCxDN,EAA6B,E/BqZ7B,EAA8C,AShZ9C,CsBLA,CtBKqD,CsBLX;AfnG5C,AeoGI,A/BoZF,AS/YQ,AwCOFA,AhE/C2F,C+BjEnG,CAAoC,EiCgH5BA,IlBZA,A/BoZN,AS/YQ,CwCOG,CxCPH,EwCOM,ClBZH,A/BoZX,AS/Y6C,CwCOvC,EjChHR,AhBwfE,CgBxfF,APyGU,EsBLF,C/BoZN,I+BpZsB,IAApB,EAA0B;AACxB,AtBII,AbmDF,ANjBE,EAAA,MmBlCE,AbmDJ,KmCvDK,CzCsCH,CAAA,CmBlCU,CbmDL,CAAC,CmCvDH,AtBIO,CsBJP,CtBIO,CAAA,EnBkCV,CAAA,IyCtCG,AnCuDL,CmCvDW,AtBIT,EbmDoB,GNjBpB,GyCtCG,AzCsCX,CyCtCyB,IAAd,CAAc,AnCuDG,ImCvDjB,AzCsCQ,EyCtCO,IzCsC1B,CyCtCW,CzCsC4B,CyCtCN,KAAtB,CAAP;AACD,A/BmZD,AShZM,AbmD0B,ANhBxB,A2D3BJ,AhE/CA,IeubJ,IShZkB,AnBmCV,G2D3BG,EAAEG,AhE/CAtF,EeubF,EShZgB,AbmDK,CI6VlB,AV7WI,EmBnCS,CnBmCJ,AL1EnB,CwBuCuB,AbmDS,AX1FdP,CwBuCK,AbmDU,AqD3C1B,G3D2BgB,A2D3BDiG,ChE/CtB,EgE+CA,AhE/CyB,EgE+CE,CjDwYH,AShZtB,CTgZuB,CJ7VG,EAAA,ANhBxB,QU6WoB,CAA5B;A+BlZD,A/BoZC,ASlZM,AbmD4C,ANflD,A2D3BQ,AhEhDuB,G8CiCvB,KtBMqB,CbmDzB,CqD1CQL,AhEhDuB,Ceyb5B,AV9WA,IU8WI,ESlZ2B,GAAA,CnBoCrB,CmBpCqB,AwCS9B,CxCT8B,CwCSZ,EjDyYnB,AV9We,CU8WC,KSlZjB,AnBoCC,IAA0B,CU8WT,IV9Wc,CAAC,EU8WhB,EAAU,GV9WA,CAAc,EU8WxB,EAAgB,MV9WN,KAA6B,UAAU,CAAC,QAAX,CAAoB,MAApB,CAA9D;AU+WE,AJ/VC,ANfJ,A2D3BaA,AhEjDyBvF,GKyE/B,IMYJ,CqDpCUuF,AhEjDyBvF,Ee0b/B,Ef1bmC,CW2FhC,AX3FiCP,Ee0bxC,KiDzYsB,CAAC+F,ChEjD0B,CAAC,OAAD,CgEiD3B,AhEjDkB,CgEiD9B,AhEjDiD7F,CgEiDxBkG,GAAzB,ChEjD8B,CAAD,CAAJ;A8CuCxB,AtBCb,AboDI,AqD1CK,AhElD8D,E8CuC1D,K9CvCkB,CW4F3B,AX5FoE,GwBwCjE,IsBDM,A9CvCkE9H,C8CuClE,A9CvC2D,CW4F7D,CX5FuE,CwBwCnE,CboDD,GapDK,IsBDN,GAAf,EtBCS,EboDH,CanDA,KsBFwB,CAA9B,EAAmD,CAAnD,EAAsE,qBtBC7D,IAEF,SAAS,CAAC,IAAV,CAAe,UAAf,GAA4B,IAAI,0BAAJ,CAAiB,YAAA;AsBFlD,A/BmZE,ASjZsD,AbmDrD,ANRG,A2DlCD,AhEnD+E+B,EKqF9E,IUsWJ,E+BnZE,A9CxCgFA,C8CwC/E,CAAC,C/BmZA,CAAC,CSjZiD,CnB2ClD,ALrFoF,C8CwCtF,AzC6CE,ALrFqF/B,CAAD,CAAN,G8CwCpE,CAAC,A/BmZf,C+BnZgB,A/BoZd,EVvWE,CAAA,EyC7CN,EAAyB,G/BoZpB,CAAD,EAAK,AVvWH,GAAR,CmB3CoE,SAAV,AnB2CvC,EmB3C4D,InB2C/E,EAAuC,ImB3CmB,CAAA;AyCqGxD,AnBtGE,A/BmZY,ASlZ0E,AnB4ChF,ALtFwF,IiE+IhG,CzCrGiC,CAF1B,CAAP,CnB8CQ,EyC7CF,CAAC,CAAC,EmBsGE,CAAC,AlD6SI,E+BnZT,CzC6CY,EUsWE,CVtWG,CyC7CL,CmBsGlB,AnBtGmB,A/BmZI,C+BnZH,A/BmZN,EVtWa,GyC7CzB,EAAyB,KzC6CnB;A4D0DT,AnBtGK,A/BkZqB,ASjZ1B,AbmDG,ANPF,A2DnCIyH,AhEpD8F,GiEwI7F,AzClGG,CyCkGV,ADpFMA,ErD0CF,CI6VA,EAEE,AVtWC,CMOC,GAAG,CqD1CK,ClBVH,CAAP,CnCoDS,AqD1CI,CAAC,CjDyYb,AVtWL,A2DnCI,GjDyYA,AJ/VS,ANPK,EUsWL,EJ/VJ,CNPc,CAAC,EMOf,IAAI,CNPK,CAAc,GMOnB,KAAA,CAAJ,CNPS,EMOL,GNPkC,EMOlC,CAAJ,GAAA,IAAI,ANP4C,CMO1C,ANP2C,IMOjD,ANPsC,CMO3B,ANP2C,MAAhB,GMOtC,ANP+D,CMOtE,SNPgB,IAAoE,UAAU,GAAG,CAAC,UAAD,EAAa,MAAb,CAAH,GAA0B,MAA1H;A4D0DH,AnBtGM,A/BkZe,AJ9VhB,ANPH,A2DnCKI,G3DgCE,C2DhCFA,ErD0CF,CmCtDA,AkBYK,GAAGP,CrD0CH,EmCpDE,CnCoDC,CI8VQ,AiDxYH,CAACzH,ClBVH,CAAC,CAAC,AnCoDA,EI8VS,CAAC,AiDxYrB,ElBVS,AnCoDE,CI8VS,CAAN,C+BlZK,CAAC,AnCoDd,CmCpDe,GnCoDf,EmCpDD,EAAuB,CnCoDjB,KAAA,KAAA,CAAL,GAAK,KAAA,CAAL,GAAA,KAAK,CAAE,IAAP,CAAY,SAAZ,CAAR;AmCnDE,A/BiZyB,AS/YrB,AbkDN,AqD1CD,AhErDG,EwB6CI,IbkDN,CI2VA,EAGE,AShZI,CAAA,GxB7CKoC,CW+FH,CmCpDC,CAAP,CnCoDS,AX/FT,CAAcG,CwB6CV,CAAA,CTgZJ,Gf7bA,CW+FiB,CX/FK,IW+FL,IAAR,IAAA,KalDL,GAAV,AbkDuB,KAAA,KalDW,AbkDX,CAAR,GAAQ,KAAA,CalDvB,AbkDe,EalD8C,CbkD9C,QAAQ,CAAE,IAAV,CAAe,SAAf,CAAX;AsDmDN,AnBtGO,A/BiZO,AS/YJ,AbkDL,ANHK,AL7FsBA,EK6FtB,IL7FsBA,C8C0CnB,CtBIH,CyCoGD,CzCpGC,ExB9C4B,C8C4CzB,AtBEoC,AxB9CVC,CK6F7B,CUgWI,AVhWJ,EmB/CA,AxB9CsB,GAAcR,Ee6bzB,CAAC,CVhWZ,CAAA,C4DqDV,CAA8B,AjElJuB,Ce6bhC,Af7biCO,Ce6bxC,Kf7b8C,CAACR,GK6FnD,E4DqDV,AjElJqD,CK6FnD,AL7F8B,CiEkJ6B,EjElJSD,KAAK,CAACS,CK6FpD,KL7F0D,CK6FhF,AL7FiFR,EK6FvC,GL7F+B,CAAL,CAAoBU,IAApB,CAAyBN,SAAzB,EAAoCG,QAApC,CAAtC;AiEmJ9B,AnBtGM,A/BgZoB,AS/YlB,AnBgDE,A2DxCRqF,AhEtDkH,EgEsDlHA,KjDoYE,CS5YM,AnBgDA,C4DqDH,IAAI,CD7FG,ClBTD,CAAC,AtBCI,CsBDZ,AkBSW,C3DwCG,CmBhDF,EAAA,AnBgDO,A2DxCvB,CxCRgB,InBgDW,ImBhDrB,KyCqGD,CAAe,A5DrDZ,U4DqDa,UAAD,EAA0B;AAC9C,AnBtGG,A/BiZF,ASjZK,AbsDN,AqD7CAD,EAAAA,EC6FA,AtDhDA,CIoVO,CAAP,ES1YkB,CbsDd,CAAC,AqD7CG,CC6FD,CAAC,CD7FG,KAAX,CxCT6B,EbsD7B,CatD6B,EAAA,AbsDV,CsDgDZ,AzCtGsB,EyCsGN,SzCtGjB,CyCsGC,CAAP,CAAmC,KAAnC,CAAyC,UAAC,GAAD,EAAI;AAAK,AnBrGjD,A/BiZF,ASlZO,AbuDJ,ANNF,A2DvCAH,AhEvDInF,EgEuDJmF,CjD6XF,CfpbMnF,C8CsCJ,CnC8DE,EavD6B,AnBiD3B,AL9FI,CAAC,CWoGH,AXpGIP,C8C8CH,CnCsDC,CsD+C0C,EnBrGvC,CAAC,AnCsDA,CmCtDC,AtBD2B,AwCUzB,C3DuCD,A2DvCEkG,CrD6CD,AXpGI,CwB6CqB,EsBC7B,AtBD6B,AxB7ClBlG,CiEmJsC,AzCtGpB,AnBiDrB,C4DqD0C,CnBrGxC,AkBSN,ClBTO,AkBStB,ClBTuB,EmBqG2B,A5DrDlD,C4DqDmE,C5DrDxC,AL9FI,C8C8CxB,AtBDD,AxB7C0B5B,CiEmJkB,CAAA,AnBrGpB,G9C9CR,CAAgByB,CWoGH,CAAC,IAAD,CXpGb,CWoGoB,CXpGKC,IWoGZ,CAAvB,GAAsC,EXpGO,IAAI,EAAvC,CAAb,CWmGU,CXnG+CU,IAAzD,EAAD,CAAJ;AiEmJmE,AnBpGrE,AnCsDA,ANNA,A2DvCL,AhEvDI,GALM,CAAP,CiEuJA,CtD9CE,KAAK,ANNA,EyChDE,AnCsDA,CmCtDP,OzCgDA,GAAkB,IAAlB,KMM2B,CAAC,KAAK,KAAA,IAAL,IAAA,KAAK,KAAA,KAAA,CAAL,GAAA,KAAA,GAAS,mBAAV,EAA+B,KAA/B,CAFV;AsDiDpB,AnBpGE,A/BtEI,ASoEL,AbwDE,ANND,AL9FJ,EexBQ,CkDwKA,CAAP,CnBpGS,AzCgDP,CMQE,EaxDE,GsBEG,AzCgDA,CUtHF,CAAA,CJ4HK,CNNC,CmBlDX,AbwDY,EaxDE,CTpET,CVsHW,CAAC,CUtHsB,EJ4HnB,GAAG,CNNZ,CAAc,GUtHkB,OVsHhC,CAAJ,CUtHgC,CVsHD,CUtH6D,IJ4HxD,CAAC,QAAD,EAAW,KAAX,CAAvB,GAA0C;AsD+CjE,AnBpGK,A/BtEF,ASoEE,AboDiB,ANFjB,A2DvCNsE,KrDyCI,CapDE,CwCWC,CAACuB,GjD/EG,E+BsEE,CAAC,CAAR,A/BtES,CSoEC,AwCWhB,CxCXiB,EwCWE,GxCXb,CAAiB,ETpEZ,CAAkB,GiD+EAZ,G3DuCb,A2DvCG,ExCXb,AwCW4B,CjD/EvB,CAAP,MVsHE,EAAsB,MAAtB;AyC/CD,A/BtEF,ASoEE,AnBkDA,A2DvCD,AhEvDG,Ge1BE,ESoEL,CwCaIa,GhEvDQzF,CgEuDJ,CxCXD,EwCWI,ExCXA,EwCWI5D,GhEvDZ,CAAqB4C,CgEuDb,CAAU3B,CxCXd,EAAe,ExB5CnB,EAA8B4C,EgEuDH,CAAC3C,ChEvD5B,EAAoC,GgEuDlB,GAAmB,CAA7B,CAAX;AC4FJ,AnBpGG,AtBFG,AbuDH,ANLA,AL9FC,G8CgCa,AzCuDP,GmB3CJ,AxB5CE4C,CAAC,EiEkJA,CjElJG,MwB4CI,CAAC,QAAX,MyCsGN,CAAmC,cAAnC,EAAwE;AACtE,AlDwSF,AS9YK,AwCUD,AhEvDUC,IAAAA,EgEuDN9C,GC4FC,AlDwST,Af3bmB,EAAE,CAAT,GgEuDK,CAACC,GjDoYlB,GiDpYQ,GAAmB,CC4FD,AD5FtB,CC4FuB,CD5FG,6DC4FgC,cAAnC,CAAD,CAAxB;AACD,AnBrGD,A/B7GA,AS4GG,AbsDH,ANUE,A2DtDM,AhExDgB8C,Ce9DxB,CV4KE,CU5KF,ASqGY,CxBvCYA,IAAI,C8C+C5B,AnCqDA,AqD5Ca,ChExDiB,GgEwDbjD,C3DsDf,A2DtDgB,C3DsDhB,E2DtDmB,CAAb,EAAgBA,CAAC,ClBTzB,A9C/CyC,CWoGzC,CNUE,A2DtD0BE,C3DsD1B,MAAA,E2DtDmC,C3DsDnC,A2DtDoCC,MAA9B,EAAsCH,CAAC,C3DsDtC,C2DtDD,EAA2C,K3DsDjD,EAA6C;AyChI/C,AnC2EA,ANsDY,A2DtDAsI,AhEzD+B,C8ClB3C,AnC2EA,CmC3EsC,AnC2EC,IqDA3BA,E3DsDA,E2DtDI,AhEzD+BxI,CgEyD9BE,AhEzD+B,CWyDhD,AqDAkB,AhEzD+B,CWyDjD,AXzDgD,CAAD,CgEyD1B,CAAL,CAAJ,AhEzD0C,CK+GhC,AL/GqB,EgEyDjBE,AhEzD+B,CK+G9B,KyCjI3B,AzCiI+B,AL/GgCJ,C8ClB/D,A9CkBgE,CAAC,CgEyD9B,AhEzD6B,CgEyD5BE,AhEzDqB,CgEyDtB,CAAvB,I3DsDA;A4DuCZ,AzChGE,AnB0DE,A2DtDK,AhE1D4D,EwBsDnE,EnB0DE,K4DsCW,AzChGb,CAAA,GxBtD0EF,CKgH9D,ALhH+D,CAAC,CiEsJ9E,AjEtJ6E,CiEsJnD,AjEtJ2C,CKgHnD,CmB1DhB,CAAA,UyCgGF,EAA2D,AzChGzD,GAAA,OyCgGF,EAAoF,A5DtCxD,GmB1D1B,OnB0DgB,EAAsB,QAAtB,CAAd;AmBzDA,AwCIC,AhE3D8E,KAAvE,GwBuDF,UAAU,GAAQ,IAAI,sBAAJ,EAAxB;AT6YJ,AS5YI,AnB0DA,ALlHiFoD,IwBwDjF,AxBxDiFA,IKkH7E,ALlHiF,CeochF,CfpckF,EAA/E,EwBwDE,CAAC,CnB0DC,KmB1DZ,ET4YJ,CAAwB,AS5YA,IAApB,AnB0DwB,OUkV5B,EAAuE,GVlVnE,EAAsC;AmBzDtC,AboDJ,ANMM,A2DvDF0E,AhE5D2FzE,EgE4D3FyE,EhE5D2FzE,EKmHzF,C2DvDG,AhE5DyF,CgE4DxFU,CrDiDD,AX7G2F,EwByDzF,CwCGP,CAAW,C3DuDD,CAAC,E2DvDI0E,IxCHf,AwCGW,CAASd,GAAT,EAAca,C3DuDvB,CMNN,ANM6B,CMNC,CqDjDf,CAAX,C3DuDE,IMNN,EAA4D,QAA5D,EAAyF;AanDtF,AboDD,ANMG,ALpHO,GwBsDV,AxBtDE,MW8GK,YAAA;AIuVP,AJvVQ,ANOP,A2DxDC,AhE7DA,GK8GF,G2DjDMV,AhE7DkGxE,CAAtG,CW8GM,CIuVD,CAAA,CiDxYI,CjDwYJ,AJvVC,AqDjDIjD,GjDwYL,AJvVC,EAAA,CqDjDF,KAAiB,CAAjB,EjDwYY,EiDxYU,CAAC0H,EjDwYX,IAAX,EiDxYL,EjDwYK,AiDxYgC,WjDwYrB,KAAA,KAAA,CAAX,GAAA,WAAA,GAAe,eAAO,OAAtB,MAA6B,IAA7B,IAA6B,EAAA,KAAA,KAAA,CAA7B,GAA6B,EAA7B,GAAiC,OAAxC;AACD,AStfQ,AwC8GDL,AhE9DJ,EwBhDK,EwC8GDA,EhE9DqGnE,CAAzG,EwBhDK,CAAA,IwC8GS,CAAC4E,CxC9GV,GAAkC,MwC8GzB,CAAV,GxC9GuC,WAAJ,EAA8B,MAA9B,EAAmD;AAC1F,AnBdY,A2D4HX,AhE/DD,EK7DY,IL6DgGnI,CAA5G,EW8GM,Ea7JC,Eb6JD,CN3KM,CmBcD,Ab6JL,AN3KM,GM2KN,EN3KM,CM2KN,EAAA,AN3Ke,GM2Kf,Ka7JC,CAAwB,Gb6JzB,AN3Ke,CM2Kf,Oa7JC,Cb6JD,Ca7JsC,Cb6JtC,IAAc,Ca7Jb,CAAP;ATufJ,AStfG,Ab4JO,AN1KN,A2D4HH,AhEhEG,CgEqDJ,ExCrGS,AwCkHT,GrD4CU,AX9GyGwD,CAA/G,CK5DM,CUogBD,CJ1VC,CAAA,EAAA,AN1KK,CM0KL,EN1KQ,CM0KR,EI0VV,CAAuB,AVpgBD,KUogBtB,CJ1VU,CI0VuB,AJ1VvB,EAAA,CAAA,EN1KQ,EAAd;AUqgBF,AVpgBE,AL4DA,IK5DA,KUogBK,AVpgBA,AL4DEA,CK5DD,AL4DE,GAAG,CewcD,EVpgBV,EUogBc,CVpgBC,IAAf,uBUogByB,KAAK,CAAC,IAAjB,CAAT,IAAmC,4BAAW,KAAK,CAAC,KAAjB,CAAnC,IAA8D,4BAAW,KAAK,CAAC,QAAjB,CAArE;AACD,AS/YD,AnBrHI,AL2Dad,IAAAA,IAAI,CwB0DrB,CxB1DuBe,CK3DZ,GL2DgB,CAAC,CwB0D5B,AnBrHI,AL2DuB,CAAZ;AwBlEf,AbgLI,ANxKD,A2D4HH,AhElEgC,CwBlEhC,CAAgC,CnBIR,EAAR,GM4KR,CqD5CCgF,IAAT,AhElEyChF,CgEkE3BkE,GAAd,AhElE6C,CAAC,CgEkE3Be,AhElE0B,CAA9B,IwBlEf,AwCoIA,CxCpIA,CwCoI0B;ACoFE,AlDqT5B,AJ5VM,AqD5CF,AhEnE8C,MW+G5C,CqD5CGf,EjDwYA,CkDrTmB,ADnFxB,GrD4CS,AqD5CEA,CrD4CF,AX/G+ClE,EgEmExD,EhEnE4D,CW+G1D,AX/G2D,CW+GpD,AX/GmD,Ce2chE,CAAyB,GkDrTG,AtDvCf,CAAP,CI4VN,CkDrT4B,AtDvCf,CI4VsB,yBkDrTP,AtDvCf,EAAA,EAAA,SsDuCe,CAAA,StDvCX,IAAJ,CAAA,CAAP;AI6VJ,AJ5VG,ANKL,A2DjDI,AhEpEW,GAAJ,EW8GP,AX9GmE,CWgHjE,CqD5CGiF,EjDwYC,AVvVV,G2DjDI,AhEpE0EhF,CWgHjE,CI4VE,CiDxYEgF,CrD4CX,EI4Va,AJ5VD,AXhHqD,EgEoEnE,C3DiDJ,EUuVwB,Af5ciE,UAAlB,Ee4cnC,Gf5coElF,CAAC,CAACE,MAAM,CAACC,QAAR,CAAD,Ce4c/F,Ef5coH,Ee4czE,UAAU,Af5c0E,Ce4czE,KAAD,CAAV,IAAqB,kCAAe,KAAf,CAAvE;AACD,AJ5VK,ANjLN,A2DqIC,AhErEyI,CKhE1I,EAAA,OMiLU,CXjHuI,IAAP,UWiHzH,qCAAX,EAAkD;AalDxD,AbsDQ,AXrHgJ,GAAjF,CwB+DvE,AxB/DW,EAAgJH,CAAvJ,KWqHS,QatDb,AbsD6B,CAAC,EatD9B,UAAA,MAAA,EAAA,QbsDQ,EAAoD;AatDnB,AbuD9B,AqDhDXiF,IAAI,CAACpJ,KrDgDM,IqDhDX,CAAeiJ,GrDgDY,AqDhD3B,CrDgD4B,EqDhDP,GxCPoB,MbuD9B,GAA+B,AqDhDT,GrDgDtB,IavD8B,EAAA,MAAA;AbwDhC,ANAF,A2DhDH,AhEtEA,IKsHS,G2DhDJX,ErD8CD,CqD9CJ,CAASrH,AhEtEAmD,IWsHE,AXtHX,CgEsEA,AhEtEctD,CgEsEC,AhEtEf,EAAiB,EgEsEjB,C3DgD2B,C2DhDN,E3DgDS,G2DhDJuI,KAA1B,I3DgD0C,CAAC,KAAxC;AmBvDL,Ab0DQ,AqDlDT,AhEvEsB,CgEqEvB,UxCNE,AxB/D4B,KWyHd,GAAN,EXzH8B9E,CAAV,EAAa,GwB+DzC,CAES,WAFT,EAGE,MAHF,EAGwB;AAHxB,Ab2DO,AX1HoC,QwB+D3C,KAAA,AxB/DkDnB,GwBoEhD,CxBpEoD,CAAC,CAACtC,CAAD,EwBoErD,AxBpEyDyD,CwBoEzD,AxBpEqD,CAAD,CAAX,EwBoEzC,CAAA,IAAA,KAAO,IALT;AyCsFiB,AtD1BZ,ANHD,A2DhDNoD,AhExEmE,KAA5C,EWgHjB,AqDxCC,CAAC2B,C3DgDQ,C4D6BG,GtD1BN,AqDnDb,EC6EwB,CD7ER,EC6EQ,K5D7BlB,CAAyB,C2DhD/B,I3DgDM,EAAmC,I4D6BjB,CAAA,KAAL;AACf,AzCrFO,Ab6DH,ANLN,A2D/CF3B,AhE1EsE,IwBiE3D,GwCSJ,CAAC4B,CxCTG,AnByDP,C4D4BA,AzCrFO,CwCSX,G3DgDS,A2DhDK,EAAd,IC4Ec,CAAC,AzCrFJ,GAAA,CyCqFP,CAAgB,A5D5BC,K4D4BjB,IzCrFO,GnByDP,IACC,KAAK,IAAI,KMGe,GAArB,INHkB,KAArB,IAA8B,4BAAW,KAAK,CAAC,MAAjB,CAA9B,IAA0D,4BAAW,KAAK,CAAC,GAAjB,CAA1D,IAAmF,4BAAW,KAAK,CAAC,WAAjB,CAFtF;AmBpDE,Ab0DG,ANFN,A2DlDD5B,IxCNI,GwCMG,CAAC6B,CxCNA,CAAC,EwCMT,GAAe,CxCNX,CwCMJ,ExCNkB,MAAd;AyCoFA,AtDzBC,AqDpDL7B,AhE3EI,OgE2EG,CAAC8B,GhE3EKrG,GiEwJL,CD7ER,AhE3EI,CAAcoB,EgE2EA,AhE3Ed,EgE2EJ,AhE3EsB,EgE2EA,EC6EJ,CAAC,MAAf,EAAuB;AACrB,AzCpFH,Ab2DA,ANFH,AL7HQ,GW0GN,KX1GUP,CK6HH,AL7HD,EAAO,MAAM,EiEwJf,CAAA,CAAA,A5D3BN,AL7HyB7D,CiEwJnB,A5D3BgB,QAAtB,AL7HqB,CAAc,CK6H0B,gCL7HxC,CAAN;AiEyJV,AtDzBJ,ANFC,A2DnDFuH,M3DmDM,C2DnDC,CAAC+B,QAAR,GAAmB,EAAnB,a3DmDiB,QAAX,CAAJ,EAA0B;AmBxD1B,AnByDE,AL9HI,EwBqEN,EnByDE,OL9HW9F,CK8HH,AL9HJ,EAAU,IwBqEhB,AxBrEoB,CwBqEpB,SAAA,CAAA,IAAA,GAAA,UAAK,KAAL,EAAa;AbiEf,ANPG,A2DnDH,AhE3EY,GK4HV,MMSO,ANPA,A2DnDA+F,ChE3EO1F,CAAC,EgE2EjB,ChE3EoB,CAAJ,CgE2EA,CAAE,AhE3EKC,CAAC,KAAKvD,CAAC,GAAG6D,CWqIjC,CAA6B,AXrIM,CAAC,CAAD,CWqInC,AXrIiC,EWqII,CXrII,CAAR,GAAYN,CAAC,CAAC,QAAD,CAAb,GAA0BM,EAAE,CAAC,CAAD,CAAF,GAAQN,CAAC,CAAC,OAAD,CAAD,KAAe,CAACvD,CAAC,GAAGuD,CAAC,CAAC,QAAD,CAAN,KAAqBvD,CAAC,CAACT,IAAF,CAAOgE,CAAP,CAArB,EAAgC,CAA/C,CAAR,GAA4DA,CAAC,CAACb,IAAjG,CAAD,IAA2G,CAAC,CAAC1C,CAAC,GAAGA,CAAC,CAACT,IAAF,CAAOgE,CAAP,EAAUM,EAAE,CAAC,CAAD,CAAZ,CAAL,EAAuBhB,IAA9I,EAAoJ,OAAO7C,CAAP;AWsI9J,ANPE,AL9HQ,IK8HR,IMOI,EXrIQuD,CWqId,AXrIe,CK8HL,CAAC,CL9HO,CAAJ,EAAOvD,CAAX,EAAc6D,EAAE,EK8HxB,CL9H2B,CAACA,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAT,EAAY7D,CAAC,CAACoC,KAAd,CAAL;AwBoEtB,AbkEH,ANPE,A2DnDH4E,KxCRI,EAAA,AwCQG,CAACiC,ExCRJ,AwCQJ,CxCRI,EAAA,AwCQSD,GxCRT,CwCQJ,IxCRS,WAAL,MAAgB,IAAhB,IAAgB,EAAA,KAAA,KAAA,CAAhB,GAAgB,KAAA,CAAhB,GAAgB,EAAA,CAAE,IAAlB,MAAsB,IAAtB,IAAsB,EAAA,KAAA,KAAA,CAAtB,GAAsB,KAAA,CAAtB,GAAsB,EAAA,CAAA,IAAA,CAAA,EAAA,EAAG,KAAH,CAAtB;AACD,AnB2DF,A2DnDDhC,AhE5EY,GwBkEV,IwCUK,CAACkC,MhE5EYrF,EAAE,CAAC,CAAD,CgE4EtB,AhE5EY,GgE4EUmF,IAAtB;ArDgEA,AqD/DAhC,AhE5EgB,OgE4ET,CAACmC,CrD+DC,GqD/DT,ChE5EqB,CAAL,CgE4EDH,IAAf,erD+DA,CAAmC,YAAnC,EAA8E,UAA9E,EAAyG;AatEvG,AbuEQ,AqD/DVhC,AhE7EwB,EwBqEtB,IbuEQ,CqD/DH,CAACoC,GAAR,EhE7E6B,CgE6EfJ,AhE7EU,IwBqEtB,AwCQF,CxCRE,QbuE6B,CavE7B,CAAA,CbuEkC,IavElC,GAAA,QbuEwC,EavElC,GAAN,EAAc,cbuEN;AACR,AqD/DFhC,AhE9EgChH,EW6I9B,KqD/DK,CAACqJ,EhE9EwBrJ,CAAC,GAAG6D,EAAJ,MgE8EhC,CrD+DuB,EqD/DEmF,ErD+DE,EqD/D3B,+BrD+D2C,UAAhB,CAA2B,YAAA;AAAM,AqD9D5DhC,AhE/EwC,OgE+EjC,CAACsC,GrD8DoD,eqD9D5D,GAA6BN,GrD8DoD,CAAC,AqD9DlF,YrD8DiF,EAAe,UAAf,CAArB;AavExD,AbuEuG,AqD7D3GhC,GrD6D2B,CAAzB,CavEE,EAAA,AwCUG,CAACuC,ExCVJ,CAAA,CwCUJ,CxCVI,EwCUWP,CxCVX,GwCUJ,ExCVS,WAAL,MAAgB,IAAhB,IAAgB,EAAA,KAAA,KAAA,CAAhB,GAAgB,KAAA,CAAhB,GAAgB,EAAA,CAAE,KAAlB,MAAuB,IAAvB,IAAuB,EAAA,KAAA,KAAA,CAAvB,GAAuB,KAAA,CAAvB,GAAuB,EAAA,CAAA,IAAA,CAAA,EAAA,EAAG,GAAH,CAAvB;AACD,AbuEF,AqD7DDhC,AhEhFgB,GwBoEd,IwCYK,CAACwC,KhEhFa,CAAL,SgEgFhB,GAA0BR,IAA1B;AACAhC,AhEjFwB/D,OgEiFjB,CAACwG,EhEjFgBxG,CAAC,CAACC,KAAF,UgEiFxB,GAA8B8F,IAA9B;AxCTE,Ab4EK,AXpJ4B,EwBwEjC,Eb4EW,aXpJ6B,CwBwExC,Ab4EyB,Ca5EzB,Eb4EwE,Oa5ExE,CAAA,QAAA,GAAA,YAAA;Ab6EA,AqDlEFhC,AhEnF4C5E,EWqJ1C,KqDlEK,CrDkEC,AqDlEAsH,ErDkEE,EXrJkCtH,EWoJ8B,GqDjE1E,AhEnFiD,EAAEyB,CgEmF/B,ChEnFiC,CAAC,CAAD,CAAX,MgEmFZ8F,IAAV,EAAgB;ArDmElC,AqDnEoC,AhEnFoB9G,EWsJxD,IAAI,EAAE,CqDnEqC,EAAP,ChEnFoBA,IAAI,EWoJY,AXpJV;AwByE5D,Ab8EF,AqDpE+C,AhEnFP,CgEmF1C,CrDoEE,Ga9EE,EAAA,Ab8EG,EAAE,Ca9EL,CAAA,AxBzE+B,EwByE/B,GAAA,KAAK,Ob2EiE,Ia3EtE,MAAgB,IAAhB,IAAgB,EAAA,KAAA,KAAA,CAAhB,GAAgB,KAAA,CAAhB,GAAgB,EAAA,CAAE,QAAlB,MAA0B,IAA1B,IAA0B,EAAA,KAAA,KAAA,CAA1B,GAA0B,KAAA,CAA1B,GAA0B,EAAA,CAAA,IAAA,CAAA,EAAA,CAA1B;AACD,Ab8ED,EAAA,CahFA,ObgFQ,EAAE;AAJ8D,AqD/D1EmE,AhEpFgB,CWmJT,MqD/DA,CAAC4C,KhEpFa,CAAL,CgEoFhB,GAAkB,UAAUD,IAAV,EAAgB;AxCRtB,AwCSR,AhErFoB1G,EwB4EZ,MwCSF,EhErFcA,CAAC,CgEqFXqE,AhErFYpE,KgEqFhB,AhErFc,CwB4EZ,AwCSQ,CxCTR,SAAA,CAAA,UAAA,GAAV,UAAqB,AwCSb,CAAN,SxCTF,EAA8C;AwCU/C,AhEtFkCK,CgEoFnC,ShEpFmCA,CAAC,GAAGM,EAAE,CAAC,CAAD,CAAN;AAAWA,UAAAA,EAAE,GAAG,CAAC,CAAD,CAAL;AwB6E1C,AwCWJmD,AhExFwD,OgEwFjD,CAAC6C,GxCXG,AwCWX,CxCXW,EAAA,AwCWG,GxCXH,CAAA,EAAA,GAAA,GwCWe,ExCXV,MAAL,MAAW,IAAX,IAAW,EAAA,KAAA,KAAA,CAAX,GAAW,KAAA,CAAX,GAAW,EAAA,CAAE,SAAF,CAAY,UAAZ,CAAX,MAAkC,IAAlC,IAAkC,EAAA,KAAA,KAAA,CAAlC,GAAkC,EAAlC,GAAsC,gCAA7C;AACD,AwCUyB,GxCZhB,MwCYuB,GAAP;AAAY,AhEvFxB,CgEuFhB,YhEvFqB,CAAL;AwB8EhB,AxB9EwBhG,SwB8ExB,CxB9EwBA,EAAE,GAAGZ,CAAC,CAACI,GAAF,CAAMS,GAAN,CwB8E7B,CxB9EwB;AwBoDxB,AwCoCAkD,CxCpCA,CAAyC,KwCoClC,CAAC8C,CxCpCR,CAAA,GwCoCA,GAAgB,UAAUC,GAAV,EAAe;AAC3B,AhEzFsC9G,QgEyFhC,EhEzFgCA,CAAC,CgEyF7BqE,AhEzF8BlE,IAAF,CgEyFhC,AhEzFuCU,CgEyF7B,EhEzFsB,8BgEyFhC,CAAN;AACH,CAFD;AhExFwD;AgE2FxDkD,OAAO,CAACgD,KAAR,GAAgB,YAAW;AAAE,AhE1Fb,SgE0FoB,CAAP;AAAW,AhEzFpB,CgEyFpB,ahEzFwB,EAAEhK,CAAC,GAAGiD,CAAC,CAACG,IAAN,EAAYpD,CAAC,GAAGA,CAAC,CAACK,MAAF,GAAW,CAAX,IAAgBL,CAAC,CAACA,CAAC,CAACK,MAAF,GAAW,CAAZ,CAAnC,MAAuDwD,EAAE,CAAC,CAAD,CAAF,KAAU,CAAV,IAAeA,EAAE,CAAC,CAAD,CAAF,KAAU,CAAhF,CAAJ,EAAwF;AAAEZ,YAAAA,CAAC,GAAG,CAAJ;AAAO;AAAW;;AAC5G,cAAIY,EAAE,CAAC,CAAD,CAAF,KAAU,CAAV,KAAgB,CAAC7D,CAAD,IAAO6D,EAAE,CAAC,CAAD,CAAF,GAAQ7D,CAAC,CAAC,CAAD,CAAT,IAAgB6D,EAAE,CAAC,CAAD,CAAF,GAAQ7D,CAAC,CAAC,CAAD,CAAhD,CAAJ,EAA2D;AAAEiD,YAAAA,CAAC,CAACC,KAAF,GAAUW,EAAE,CAAC,CAAD,CAAZ;AiEgJ/E,AjEhJgG,UiEgJhG,UAAU,CAAC,QAAX;AjEhJwG;;AACtF,cAAIA,EAAE,CAAC,CAAD,CAAF,KAAU,CAAV,IAAeZ,CAAC,CAACC,KAAF,GAAUlD,CAAC,CAAC,CAAD,CAA9B,EAAmC;AAAEiD,YAAAA,CAAC,CAACC,KAAF,GAAUlD,CAAC,CAAC,CAAD,CAAX;AiEgJxD,AjEhJwEA,YAAAA,CAAC,GAAG6D,EAAJ;AAAQ;AAAQ;;AACrE,cAAI7D,CAAC,IAAIiD,CAAC,CAACC,KAAF,GAAUlD,CAAC,CAAC,CAAD,CAApB,EAAyB;AAAEiD,YAAAA,CAAC,CAACC,KAAF,GAAUlD,CAAC,CAAC,CAAD,CAAX;;AAAgBiD,YAAAA,CAAC,CAACI,GAAF,CAAMU,IAAN,CAAWF,EAAX;;AAAgB;AAAQ;;AACnE,cAAI7D,CAAC,CAAC,CAAD,CAAL,EAAUiD,CAAC,CAACI,GAAF,CAAMS,GAAN;;AACVb,UAAAA,CAAC,CAACG,IAAF,CAAOU,GAAP;;AAAc;AAXtB;;AAaAD,MAAAA,EAAE,GAAGb,IAAI,CAACzD,IAAL,CAAUwC,OAAV,EAAmBkB,CAAnB,CAAL;AACH,KAjBS,CAiBR,OAAOzC,CAAP,EAAU;AAAEqD,MAAAA,EAAE,GAAG,CAAC,CAAD,EAAIrD,CAAJ,CAAL;AAAa+C,MAAAA,CAAC,GAAG,CAAJ;AAAQ,KAjBzB,SAiBkC;AAAED,MAAAA,CAAC,GAAGtD,CAAC,GAAG,CAAR;AAAY;;AAC1D,QAAI6D,EAAE,CAAC,CAAD,CAAF,GAAQ,CAAZ,EAAe,MAAMA,EAAE,CAAC,CAAD,CAAR;AAAa,WAAO;AAAEzB,MAAAA,KAAK,EAAEyB,EAAE,CAAC,CAAD,CAAF,GAAQA,EAAE,CAAC,CAAD,CAAV,GAAgB,KAAK,CAA9B;AAAiChB,MAAAA,IAAI,EAAE;AAAvC,KAAP;AAC/B;AACJ;;AAEM,IAAImB,eAAe,GAAGhF,MAAM,CAACa,MAAP,GAAiB,UAASoE,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,EAAlB,EAAsB;AAChE,MAAIA,EAAE,KAAKC,SAAX,EAAsBD,EAAE,GAAGD,CAAL;AACtBnF,EAAAA,MAAM,CAACsC,cAAP,CAAsB2C,CAAtB,EAAyBG,EAAzB,EAA6B;AAAEE,IAAAA,UAAU,EAAE,IAAd;AAAoBC,IAAAA,GAAG,EAAE,YAAW;AAAE,aAAOL,CAAC,CAACC,CAAD,CAAR;AAAc;AAApD,GAA7B;AACH,CAH4B,GAGvB,UAASF,CAAT,EAAYC,CAAZ,EAAeC,CAAf,EAAkBC,EAAlB,EAAsB;AACxB,MAAIA,EAAE,KAAKC,SAAX,EAAsBD,EAAE,GAAGD,CAAL;AACtBF,EAAAA,CAAC,CAACG,EAAD,CAAD,GAAQF,CAAC,CAACC,CAAD,CAAT;AACH,CANM;;;;AAQA,SAASK,YAAT,CAAsBN,CAAtB,EAAyBD,CAAzB,EAA4B;AAC/B,OAAK,IAAI7E,CAAT,IAAc8E,CAAd,EAAiB,IAAI9E,CAAC,KAAK,SAAN,IAAmB,CAACJ,MAAM,CAACK,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC0E,CAArC,EAAwC7E,CAAxC,CAAxB,EAAoE4E,eAAe,CAACC,CAAD,EAAIC,CAAJ,EAAO9E,CAAP,CAAf;AACxF;;AAEM,SAASqF,QAAT,CAAkBR,CAAlB,EAAqB;AACxB,MAAIhE,CAAC,GAAG,OAAOyD,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,CAACC,QAA/C;AAAA,MAAyDO,CAAC,GAAGjE,CAAC,IAAIgE,CAAC,CAAChE,CAAD,CAAnE;AAAA,MAAwEC,CAAC,GAAG,CAA5E;AACA,MAAIgE,CAAJ,EAAO,OAAOA,CAAC,CAAC3E,IAAF,CAAO0E,CAAP,CAAP;AACP,MAAIA,CAAC,IAAI,OAAOA,CAAC,CAAC5D,MAAT,KAAoB,QAA7B,EAAuC,OAAO;AAC1CqC,IAAAA,IAAI,EAAE,YAAY;AACd,UAAIuB,CAAC,IAAI/D,CAAC,IAAI+D,CAAC,CAAC5D,MAAhB,EAAwB4D,CAAC,GAAG,KAAK,CAAT;AACxB,aAAO;AAAE7B,QAAAA,KAAK,EAAE6B,CAAC,IAAIA,CAAC,CAAC/D,CAAC,EAAF,CAAf;AAAsB2C,QAAAA,IAAI,EAAE,CAACoB;AAA7B,OAAP;AACH;AAJyC,GAAP;AAMvC,QAAM,IAAIxE,SAAJ,CAAcQ,CAAC,GAAG,yBAAH,GAA+B,iCAA9C,CAAN;AACH;;AAEM,SAASyE,MAAT,CAAgBT,CAAhB,EAAmB9D,CAAnB,EAAsB;AACzB,MAAI+D,CAAC,GAAG,OAAOR,MAAP,KAAkB,UAAlB,IAAgCO,CAAC,CAACP,MAAM,CAACC,QAAR,CAAzC;AACA,MAAI,CAACO,CAAL,EAAQ,OAAOD,CAAP;AACR,MAAI/D,CAAC,GAAGgE,CAAC,CAAC3E,IAAF,CAAO0E,CAAP,CAAR;AAAA,MAAmB/C,CAAnB;AAAA,MAAsByD,EAAE,GAAG,EAA3B;AAAA,MAA+BnE,CAA/B;;AACA,MAAI;AACA,WAAO,CAACL,CAAC,KAAK,KAAK,CAAX,IAAgBA,CAAC,KAAK,CAAvB,KAA6B,CAAC,CAACe,CAAC,GAAGhB,CAAC,CAACwC,IAAF,EAAL,EAAeG,IAApD,EAA0D8B,EAAE,CAACZ,IAAH,CAAQ7C,CAAC,CAACkB,KAAV;AAC7D,GAFD,CAGA,OAAOwC,KAAP,EAAc;AAAEpE,IAAAA,CAAC,GAAG;AAAEoE,MAAAA,KAAK,EAAEA;AAAT,KAAJ;AAAuB,GAHvC,SAIQ;AACJ,QAAI;AACA,UAAI1D,CAAC,IAAI,CAACA,CAAC,CAAC2B,IAAR,KAAiBqB,CAAC,GAAGhE,CAAC,CAAC,QAAD,CAAtB,CAAJ,EAAuCgE,CAAC,CAAC3E,IAAF,CAAOW,CAAP;AAC1C,KAFD,SAGQ;AAAE,UAAIM,CAAJ,EAAO,MAAMA,CAAC,CAACoE,KAAR;AAAgB;AACpC;;AACD,SAAOD,EAAP;AACH;AAED;;;AACO,SAASE,QAAT,GAAoB;AACvB,OAAK,IAAIF,EAAE,GAAG,EAAT,EAAazE,CAAC,GAAG,CAAtB,EAAyBA,CAAC,GAAGE,SAAS,CAACC,MAAvC,EAA+CH,CAAC,EAAhD,EACIyE,EAAE,GAAGA,EAAE,CAACG,MAAH,CAAUJ,MAAM,CAACtE,SAAS,CAACF,CAAD,CAAV,CAAhB,CAAL;;AACJ,SAAOyE,EAAP;AACH;AAED;;;AACO,SAASI,cAAT,GAA0B;AAC7B,OAAK,IAAI9E,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,CAAf,EAAkB8E,EAAE,GAAG5E,SAAS,CAACC,MAAtC,EAA8CH,CAAC,GAAG8E,EAAlD,EAAsD9E,CAAC,EAAvD,EAA2DD,CAAC,IAAIG,SAAS,CAACF,CAAD,CAAT,CAAaG,MAAlB;;AAC3D,OAAK,IAAIa,CAAC,GAAG/B,KAAK,CAACc,CAAD,CAAb,EAAkBkE,CAAC,GAAG,CAAtB,EAAyBjE,CAAC,GAAG,CAAlC,EAAqCA,CAAC,GAAG8E,EAAzC,EAA6C9E,CAAC,EAA9C,EACI,KAAK,IAAI+E,CAAC,GAAG7E,SAAS,CAACF,CAAD,CAAjB,EAAsBgF,CAAC,GAAG,CAA1B,EAA6BC,EAAE,GAAGF,CAAC,CAAC5E,MAAzC,EAAiD6E,CAAC,GAAGC,EAArD,EAAyDD,CAAC,IAAIf,CAAC,EAA/D,EACIjD,CAAC,CAACiD,CAAD,CAAD,GAAOc,CAAC,CAACC,CAAD,CAAR;;AACR,SAAOhE,CAAP;AACH;;AAEM,SAASkE,aAAT,CAAuBC,EAAvB,EAA2BC,IAA3B,EAAiC;AACpC,OAAK,IAAIpF,CAAC,GAAG,CAAR,EAAW8E,EAAE,GAAGM,IAAI,CAACjF,MAArB,EAA6B6E,CAAC,GAAGG,EAAE,CAAChF,MAAzC,EAAiDH,CAAC,GAAG8E,EAArD,EAAyD9E,CAAC,IAAIgF,CAAC,EAA/D,EACIG,EAAE,CAACH,CAAD,CAAF,GAAQI,IAAI,CAACpF,CAAD,CAAZ;;AACJ,SAAOmF,EAAP;AACH;;AAEM,SAASE,OAAT,CAAiB3B,CAAjB,EAAoB;AACvB,SAAO,gBAAgB2B,OAAhB,IAA2B,KAAK3B,CAAL,GAASA,CAAT,EAAY,IAAvC,IAA+C,IAAI2B,OAAJ,CAAY3B,CAAZ,CAAtD;AACH;;AAEM,SAAS4B,gBAAT,CAA0BzD,OAA1B,EAAmCC,UAAnC,EAA+CE,SAA/C,EAA0D;AAC7D,MAAI,CAACwB,MAAM,CAAC+B,aAAZ,EAA2B,MAAM,IAAIhG,SAAJ,CAAc,sCAAd,CAAN;AAC3B,MAAI+D,CAAC,GAAGtB,SAAS,CAAC5B,KAAV,CAAgByB,OAAhB,EAAyBC,UAAU,IAAI,EAAvC,CAAR;AAAA,MAAoD9B,CAApD;AAAA,MAAuDwF,CAAC,GAAG,EAA3D;AACA,SAAOxF,CAAC,GAAG,EAAJ,EAAQuD,IAAI,CAAC,MAAD,CAAZ,EAAsBA,IAAI,CAAC,OAAD,CAA1B,EAAqCA,IAAI,CAAC,QAAD,CAAzC,EAAqDvD,CAAC,CAACwD,MAAM,CAAC+B,aAAR,CAAD,GAA0B,YAAY;AAAE,WAAO,IAAP;AAAc,GAA3G,EAA6GvF,CAApH;;AACA,WAASuD,IAAT,CAActD,CAAd,EAAiB;AAAE,QAAIqD,CAAC,CAACrD,CAAD,CAAL,EAAUD,CAAC,CAACC,CAAD,CAAD,GAAO,UAAUyD,CAAV,EAAa;AAAE,aAAO,IAAItB,OAAJ,CAAY,UAAU2C,CAAV,EAAalG,CAAb,EAAgB;AAAE2G,QAAAA,CAAC,CAAC3B,IAAF,CAAO,CAAC5D,CAAD,EAAIyD,CAAJ,EAAOqB,CAAP,EAAUlG,CAAV,CAAP,IAAuB,CAAvB,IAA4B4G,MAAM,CAACxF,CAAD,EAAIyD,CAAJ,CAAlC;AAA2C,OAAzE,CAAP;AAAoF,KAA1G;AAA6G;;AAC1I,WAAS+B,MAAT,CAAgBxF,CAAhB,EAAmByD,CAAnB,EAAsB;AAAE,QAAI;AAAEnB,MAAAA,IAAI,CAACe,CAAC,CAACrD,CAAD,CAAD,CAAKyD,CAAL,CAAD,CAAJ;AAAgB,KAAtB,CAAuB,OAAOpD,CAAP,EAAU;AAAEoF,MAAAA,MAAM,CAACF,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUlF,CAAV,CAAN;AAAqB;AAAE;;AAClF,WAASiC,IAAT,CAAcvB,CAAd,EAAiB;AAAEA,IAAAA,CAAC,CAACkB,KAAF,YAAmBmD,OAAnB,GAA6BjD,OAAO,CAACD,OAAR,CAAgBnB,CAAC,CAACkB,KAAF,CAAQwB,CAAxB,EAA2Bd,IAA3B,CAAgC+C,OAAhC,EAAyCtD,MAAzC,CAA7B,GAAgFqD,MAAM,CAACF,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUxE,CAAV,CAAtF;AAAqG;;AACxH,WAAS2E,OAAT,CAAiBzD,KAAjB,EAAwB;AAAEuD,IAAAA,MAAM,CAAC,MAAD,EAASvD,KAAT,CAAN;AAAwB;;AAClD,WAASG,MAAT,CAAgBH,KAAhB,EAAuB;AAAEuD,IAAAA,MAAM,CAAC,OAAD,EAAUvD,KAAV,CAAN;AAAyB;;AAClD,WAASwD,MAAT,CAAgBtC,CAAhB,EAAmBM,CAAnB,EAAsB;AAAE,QAAIN,CAAC,CAACM,CAAD,CAAD,EAAM8B,CAAC,CAACI,KAAF,EAAN,EAAiBJ,CAAC,CAACrF,MAAvB,EAA+BsF,MAAM,CAACD,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAD,EAAUA,CAAC,CAAC,CAAD,CAAD,CAAK,CAAL,CAAV,CAAN;AAA2B;AACrF;;AAEM,SAASK,gBAAT,CAA0B9B,CAA1B,EAA6B;AAChC,MAAI/D,CAAJ,EAAOd,CAAP;AACA,SAAOc,CAAC,GAAG,EAAJ,EAAQuD,IAAI,CAAC,MAAD,CAAZ,EAAsBA,IAAI,CAAC,OAAD,EAAU,UAAUjD,CAAV,EAAa;AAAE,UAAMA,CAAN;AAAU,GAAnC,CAA1B,EAAgEiD,IAAI,CAAC,QAAD,CAApE,EAAgFvD,CAAC,CAACwD,MAAM,CAACC,QAAR,CAAD,GAAqB,YAAY;AAAE,WAAO,IAAP;AAAc,GAAjI,EAAmIzD,CAA1I;;AACA,WAASuD,IAAT,CAActD,CAAd,EAAiBmD,CAAjB,EAAoB;AAAEpD,IAAAA,CAAC,CAACC,CAAD,CAAD,GAAO8D,CAAC,CAAC9D,CAAD,CAAD,GAAO,UAAUyD,CAAV,EAAa;AAAE,aAAO,CAACxE,CAAC,GAAG,CAACA,CAAN,IAAW;AAAEgD,QAAAA,KAAK,EAAEmD,OAAO,CAACtB,CAAC,CAAC9D,CAAD,CAAD,CAAKyD,CAAL,CAAD,CAAhB;AAA2Bf,QAAAA,IAAI,EAAE1C,CAAC,KAAK;AAAvC,OAAX,GAA+DmD,CAAC,GAAGA,CAAC,CAACM,CAAD,CAAJ,GAAUA,CAAjF;AAAqF,KAA3G,GAA8GN,CAArH;AAAyH;AAClJ;;AAEM,SAAS0C,aAAT,CAAuB/B,CAAvB,EAA0B;AAC7B,MAAI,CAACP,MAAM,CAAC+B,aAAZ,EAA2B,MAAM,IAAIhG,SAAJ,CAAc,sCAAd,CAAN;AAC3B,MAAIyE,CAAC,GAAGD,CAAC,CAACP,MAAM,CAAC+B,aAAR,CAAT;AAAA,MAAiCvF,CAAjC;AACA,SAAOgE,CAAC,GAAGA,CAAC,CAAC3E,IAAF,CAAO0E,CAAP,CAAH,IAAgBA,CAAC,GAAG,OAAOQ,QAAP,KAAoB,UAApB,GAAiCA,QAAQ,CAACR,CAAD,CAAzC,GAA+CA,CAAC,CAACP,MAAM,CAACC,QAAR,CAAD,EAAnD,EAAyEzD,CAAC,GAAG,EAA7E,EAAiFuD,IAAI,CAAC,MAAD,CAArF,EAA+FA,IAAI,CAAC,OAAD,CAAnG,EAA8GA,IAAI,CAAC,QAAD,CAAlH,EAA8HvD,CAAC,CAACwD,MAAM,CAAC+B,aAAR,CAAD,GAA0B,YAAY;AAAE,WAAO,IAAP;AAAc,GAApL,EAAsLvF,CAAtM,CAAR;;AACA,WAASuD,IAAT,CAActD,CAAd,EAAiB;AAAED,IAAAA,CAAC,CAACC,CAAD,CAAD,GAAO8D,CAAC,CAAC9D,CAAD,CAAD,IAAQ,UAAUyD,CAAV,EAAa;AAAE,aAAO,IAAItB,OAAJ,CAAY,UAAUD,OAAV,EAAmBE,MAAnB,EAA2B;AAAEqB,QAAAA,CAAC,GAAGK,CAAC,CAAC9D,CAAD,CAAD,CAAKyD,CAAL,CAAJ,EAAagC,MAAM,CAACvD,OAAD,EAAUE,MAAV,EAAkBqB,CAAC,CAACf,IAApB,EAA0Be,CAAC,CAACxB,KAA5B,CAAnB;AAAwD,OAAjG,CAAP;AAA4G,KAA1I;AAA6I;;AAChK,WAASwD,MAAT,CAAgBvD,OAAhB,EAAyBE,MAAzB,EAAiCzD,CAAjC,EAAoC8E,CAApC,EAAuC;AAAEtB,IAAAA,OAAO,CAACD,OAAR,CAAgBuB,CAAhB,EAAmBd,IAAnB,CAAwB,UAASc,CAAT,EAAY;AAAEvB,MAAAA,OAAO,CAAC;AAAED,QAAAA,KAAK,EAAEwB,CAAT;AAAYf,QAAAA,IAAI,EAAE/D;AAAlB,OAAD,CAAP;AAAiC,KAAvE,EAAyEyD,MAAzE;AAAmF;AAC/H;;AAEM,SAAS0D,oBAAT,CAA8BC,MAA9B,EAAsCC,GAAtC,EAA2C;AAC9C,MAAInH,MAAM,CAACsC,cAAX,EAA2B;AAAEtC,IAAAA,MAAM,CAACsC,cAAP,CAAsB4E,MAAtB,EAA8B,KAA9B,EAAqC;AAAE9D,MAAAA,KAAK,EAAE+D;AAAT,KAArC;AAAuD,GAApF,MAA0F;AAAED,IAAAA,MAAM,CAACC,GAAP,GAAaA,GAAb;AAAmB;;AAC/G,SAAOD,MAAP;AACH;;AAAA;;AAED,IAAIE,kBAAkB,GAAGpH,MAAM,CAACa,MAAP,GAAiB,UAASoE,CAAT,EAAYL,CAAZ,EAAe;AACrD5E,EAAAA,MAAM,CAACsC,cAAP,CAAsB2C,CAAtB,EAAyB,SAAzB,EAAoC;AAAEK,IAAAA,UAAU,EAAE,IAAd;AAAoBlC,IAAAA,KAAK,EAAEwB;AAA3B,GAApC;AACH,CAFwB,GAEpB,UAASK,CAAT,EAAYL,CAAZ,EAAe;AAChBK,EAAAA,CAAC,CAAC,SAAD,CAAD,GAAeL,CAAf;AACH,CAJD;;AAMO,SAASyC,YAAT,CAAsBC,GAAtB,EAA2B;AAC9B,MAAIA,GAAG,IAAIA,GAAG,CAACC,UAAf,EAA2B,OAAOD,GAAP;AAC3B,MAAI1D,MAAM,GAAG,EAAb;AACA,MAAI0D,GAAG,IAAI,IAAX,EAAiB,KAAK,IAAInC,CAAT,IAAcmC,GAAd,EAAmB,IAAInC,CAAC,KAAK,SAAN,IAAmBnF,MAAM,CAACK,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC+G,GAArC,EAA0CnC,CAA1C,CAAvB,EAAqEH,eAAe,CAACpB,MAAD,EAAS0D,GAAT,EAAcnC,CAAd,CAAf;;AACzGiC,EAAAA,kBAAkB,CAACxD,MAAD,EAAS0D,GAAT,CAAlB;;AACA,SAAO1D,MAAP;AACH;;AAEM,SAAS4D,eAAT,CAAyBF,GAAzB,EAA8B;AACjC,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAEG,IAAAA,OAAO,EAAEH;AAAX,GAAvC;AACH;;AAEM,SAASI,sBAAT,CAAgCC,QAAhC,EAA0CC,UAA1C,EAAsD;AACzD,MAAI,CAACA,UAAU,CAACC,GAAX,CAAeF,QAAf,CAAL,EAA+B;AsHjNnC,AtHkNQ,UAAM,IAAIlH,SAAJ,CAAc,gDAAd,CAAN;AACH;AsHlNL;AtHmNI,SAAOmH,UAAU,CAACrC,GAAX,CAAeoC,QAAf,CAAP;AsHhNJ,AtHiNC;;AsHhND,AtHkNO,SAASG,sBAAT,CAAgCH,QAAhC,EAA0CC,UAA1C,EAAsDxE,KAAtD,EAA6D;AAChE,MAAI,CAACwE,UAAU,CAACC,GAAX,CAAeF,QAAf,CAAL,EAA+B;AsHhNnC,AtHiNQ,UAAM,IAAIlH,SAAJ,CAAc,gDAAd,CAAN;AACH;AsHjNL;AtHkNImH,EAAAA,UAAU,CAACG,GAAX,CAAeJ,QAAf,EAAyBvE,KAAzB;AsHjNJ,AtHkNI,SAAOA,KAAP;AACH;AsHlND;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA;;AACA;;AAGA;;AAGA;;AACA;;AACA;;AACA;;AAGA;;AACA;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAGA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AAOA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;A2Glfile":"parcel.e31bb0bc.js","sourceRoot":"..","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    if (typeof b !== \"function\" && b !== null)\r\n        throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport var __createBinding = Object.create ? (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });\r\n}) : (function(o, m, k, k2) {\r\n    if (k2 === undefined) k2 = k;\r\n    o[k2] = m[k];\r\n});\r\n\r\nexport function __exportStar(m, o) {\r\n    for (var p in m) if (p !== \"default\" && !Object.prototype.hasOwnProperty.call(o, p)) __createBinding(o, m, p);\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\n/** @deprecated */\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n}\r\n\r\nexport function __spreadArray(to, from) {\r\n    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)\r\n        to[j] = from[i];\r\n    return to;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nvar __setModuleDefault = Object.create ? (function(o, v) {\r\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\r\n}) : function(o, v) {\r\n    o[\"default\"] = v;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\r\n    __setModuleDefault(result, mod);\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","/**\n * Returns true if the object is a function.\n * @param value The value to check\n */\nexport function isFunction(value: any): value is (...args: any[]) => any {\n  return typeof value === 'function';\n}\n","/**\n * Used to create Error subclasses until the community moves away from ES5.\n *\n * This is because compiling from TypeScript down to ES5 has issues with subclassing Errors\n * as well as other built-in types: https://github.com/Microsoft/TypeScript/issues/12123\n *\n * @param createImpl A factory function to create the actual constructor implementation. The returned\n * function should be a named function that calls `_super` internally.\n */\nexport function createErrorClass<T>(createImpl: (_super: any) => any): T {\n  const _super = (instance: any) => {\n    Error.call(instance);\n    instance.stack = new Error().stack;\n  };\n\n  const ctorFunc = createImpl(_super);\n  ctorFunc.prototype = Object.create(Error.prototype);\n  ctorFunc.prototype.constructor = ctorFunc;\n  return ctorFunc;\n}\n","import { createErrorClass } from './createErrorClass';\n\nexport interface UnsubscriptionError extends Error {\n  readonly errors: any[];\n}\n\nexport interface UnsubscriptionErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (errors: any[]): UnsubscriptionError;\n}\n\n/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport const UnsubscriptionError: UnsubscriptionErrorCtor = createErrorClass(\n  (_super) =>\n    function UnsubscriptionErrorImpl(this: any, errors: (Error | string)[]) {\n      _super(this);\n      this.message = errors\n        ? `${errors.length} errors occurred during unsubscription:\n${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}`\n        : '';\n      this.name = 'UnsubscriptionError';\n      this.errors = errors;\n    }\n);\n","/**\n * Removes an item from an array, mutating it.\n * @param arr The array to remove the item from\n * @param item The item to remove\n */\nexport function arrRemove<T>(arr: T[] | undefined | null, item: T) {\n  if (arr) {\n    const index = arr.indexOf(item);\n    0 <= index && arr.splice(index, 1);\n  }\n}\n","import { isFunction } from './util/isFunction';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\nimport { SubscriptionLike, TeardownLogic, Unsubscribable } from './types';\nimport { arrRemove } from './util/arrRemove';\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements SubscriptionLike {\n  /** @nocollapse */\n  public static EMPTY = (() => {\n    const empty = new Subscription();\n    empty.closed = true;\n    return empty;\n  })();\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   */\n  public closed = false;\n\n  private _parentage: Subscription[] | Subscription | null = null;\n\n  /**\n   * The list of registered teardowns to execute upon unsubscription. Adding and removing from this\n   * list occurs in the {@link #add} and {@link #remove} methods.\n   */\n  private _teardowns: Exclude<TeardownLogic, void>[] | null = null;\n\n  /**\n   * @param initialTeardown A function executed first as part of the teardown\n   * process that is kicked off when {@link #unsubscribe} is called.\n   */\n  constructor(private initialTeardown?: () => void) {}\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let errors: any[] | undefined;\n\n    if (!this.closed) {\n      this.closed = true;\n\n      // Remove this from it's parents.\n      const { _parentage } = this;\n      if (_parentage) {\n        this._parentage = null;\n        if (Array.isArray(_parentage)) {\n          for (const parent of _parentage) {\n            parent.remove(this);\n          }\n        } else {\n          _parentage.remove(this);\n        }\n      }\n\n      const { initialTeardown } = this;\n      if (isFunction(initialTeardown)) {\n        try {\n          initialTeardown();\n        } catch (e) {\n          errors = e instanceof UnsubscriptionError ? e.errors : [e];\n        }\n      }\n\n      const { _teardowns } = this;\n      if (_teardowns) {\n        this._teardowns = null;\n        for (const teardown of _teardowns) {\n          try {\n            execTeardown(teardown);\n          } catch (err) {\n            errors = errors ?? [];\n            if (err instanceof UnsubscriptionError) {\n              errors = [...errors, ...err.errors];\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n\n      if (errors) {\n        throw new UnsubscriptionError(errors);\n      }\n    }\n  }\n\n  /**\n   * Adds a teardown to this subscription, so that teardown will be unsubscribed/called\n   * when this subscription is unsubscribed. If this subscription is already {@link #closed},\n   * because it has already been unsubscribed, then whatever teardown is passed to it\n   * will automatically be executed (unless the teardown itself is also a closed subscription).\n   *\n   * Closed Subscriptions cannot be added as teardowns to any subscription. Adding a closed\n   * subscription to a any subscription will result in no operation. (A noop).\n   *\n   * Adding a subscription to itself, or adding `null` or `undefined` will not perform any\n   * operation at all. (A noop).\n   *\n   * `Subscription` instances that are added to this instance will automatically remove themselves\n   * if they are unsubscribed. Functions and {@link Unsubscribable} objects that you wish to remove\n   * will need to be removed manually with {@link #remove}\n   *\n   * @param teardown The teardown logic to add to this subscription.\n   */\n  add(teardown: TeardownLogic): void {\n    // Only add the teardown if it's not undefined\n    // and don't add a subscription to itself.\n    if (teardown && teardown !== this) {\n      if (this.closed) {\n        // If this subscription is already closed,\n        // execute whatever teardown is handed to it automatically.\n        execTeardown(teardown);\n      } else {\n        if (teardown instanceof Subscription) {\n          // We don't add closed subscriptions, and we don't add the same subscription\n          // twice. Subscription unsubscribe is idempotent.\n          if (teardown.closed || teardown._hasParent(this)) {\n            return;\n          }\n          teardown._addParent(this);\n        }\n        (this._teardowns = this._teardowns ?? []).push(teardown);\n      }\n    }\n  }\n\n  /**\n   * Checks to see if a this subscription already has a particular parent.\n   * This will signal that this subscription has already been added to the parent in question.\n   * @param parent the parent to check for\n   */\n  private _hasParent(parent: Subscription) {\n    const { _parentage } = this;\n    return _parentage === parent || (Array.isArray(_parentage) && _parentage.includes(parent));\n  }\n\n  /**\n   * Adds a parent to this subscription so it can be removed from the parent if it\n   * unsubscribes on it's own.\n   *\n   * NOTE: THIS ASSUMES THAT {@link _hasParent} HAS ALREADY BEEN CHECKED.\n   * @param parent The parent subscription to add\n   */\n  private _addParent(parent: Subscription) {\n    const { _parentage } = this;\n    this._parentage = Array.isArray(_parentage) ? (_parentage.push(parent), _parentage) : _parentage ? [_parentage, parent] : parent;\n  }\n\n  /**\n   * Called on a child when it is removed via {@link #remove}.\n   * @param parent The parent to remove\n   */\n  private _removeParent(parent: Subscription) {\n    const { _parentage } = this;\n    if (_parentage === parent) {\n      this._parentage = null;\n    } else if (Array.isArray(_parentage)) {\n      arrRemove(_parentage, parent);\n    }\n  }\n\n  /**\n   * Removes a teardown from this subscription that was previously added with the {@link #add} method.\n   *\n   * Note that `Subscription` instances, when unsubscribed, will automatically remove themselves\n   * from every other `Subscription` they have been added to. This means that using the `remove` method\n   * is not a common thing and should be used thoughtfully.\n   *\n   * If you add the same teardown instance of a function or an unsubscribable object to a `Subcription` instance\n   * more than once, you will need to call `remove` the same number of times to remove all instances.\n   *\n   * All teardown instances are removed to free up memory upon unsubscription.\n   *\n   * @param teardown The teardown to remove from this subscription\n   */\n  remove(teardown: Exclude<TeardownLogic, void>): void {\n    const { _teardowns } = this;\n    _teardowns && arrRemove(_teardowns, teardown);\n\n    if (teardown instanceof Subscription) {\n      teardown._removeParent(this);\n    }\n  }\n}\n\nexport const EMPTY_SUBSCRIPTION = Subscription.EMPTY;\n\nexport function isSubscription(value: any): value is Subscription {\n  return (\n    value instanceof Subscription ||\n    (value && 'closed' in value && isFunction(value.remove) && isFunction(value.add) && isFunction(value.unsubscribe))\n  );\n}\n\nfunction execTeardown(teardown: Unsubscribable | (() => void)) {\n  if (isFunction(teardown)) {\n    teardown();\n  } else {\n    teardown.unsubscribe();\n  }\n}\n","import { Subscriber } from './Subscriber';\nimport { ObservableNotification } from './types';\n\n/**\n * The {@link GlobalConfig} object for RxJS. It is used to configure things\n * like how to react on unhandled errors.\n */\nexport const config: GlobalConfig = {\n  onUnhandledError: null,\n  onStoppedNotification: null,\n  Promise: undefined,\n  useDeprecatedSynchronousErrorHandling: false,\n  useDeprecatedNextContext: false,\n};\n\n/**\n * The global configuration object for RxJS, used to configure things\n * like how to react on unhandled errors. Accessible via {@link config}\n * object.\n */\nexport interface GlobalConfig {\n  /**\n   * A registration point for unhandled errors from RxJS. These are errors that\n   * cannot were not handled by consuming code in the usual subscription path. For\n   * example, if you have this configured, and you subscribe to an observable without\n   * providing an error handler, errors from that subscription will end up here. This\n   * will _always_ be called asynchronously on another job in the runtime. This is because\n   * we do not want errors thrown in this user-configured handler to interfere with the\n   * behavior of the library.\n   */\n  onUnhandledError: ((err: any) => void) | null;\n\n  /**\n   * A registration point for notifications that cannot be sent to subscribers because they\n   * have completed, errored or have been explicitly unsubscribed. By default, next, complete\n   * and error notifications sent to stopped subscribers are noops. However, sometimes callers\n   * might want a different behavior. For example, with sources that attempt to report errors\n   * to stopped subscribers, a caller can configure RxJS to throw an unhandled error instead.\n   * This will _always_ be called asynchronously on another job in the runtime. This is because\n   * we do not want errors thrown in this user-configured handler to interfere with the\n   * behavior of the library.\n   */\n  onStoppedNotification: ((notification: ObservableNotification<any>, subscriber: Subscriber<any>) => void) | null;\n\n  /**\n   * The promise constructor used by default for {@link Observable#toPromise toPromise} and {@link Observable#forEach forEach}\n   * methods.\n   *\n   * @deprecated As of version 8, RxJS will no longer support this sort of injection of a\n   * Promise constructor. If you need a Promise implementation other than native promises,\n   * please polyfill/patch Promise as you see appropriate. Will be removed in v8.\n   */\n  Promise?: PromiseConstructorLike;\n\n  /**\n   * If true, turns on synchronous error rethrowing, which is a deprecated behavior\n   * in v6 and higher. This behavior enables bad patterns like wrapping a subscribe\n   * call in a try/catch block. It also enables producer interference, a nasty bug\n   * where a multicast can be broken for all observers by a downstream consumer with\n   * an unhandled error. DO NOT USE THIS FLAG UNLESS IT'S NEEDED TO BUY TIME\n   * FOR MIGRATION REASONS.\n   *\n   * @deprecated As of version 8, RxJS will no longer support synchronous throwing\n   * of unhandled errors. All errors will be thrown on a separate call stack to prevent bad\n   * behaviors described above. Will be removed in v8.\n   */\n  useDeprecatedSynchronousErrorHandling: boolean;\n\n  /**\n   * If true, enables an as-of-yet undocumented feature from v5: The ability to access\n   * `unsubscribe()` via `this` context in `next` functions created in observers passed\n   * to `subscribe`.\n   *\n   * This is being removed because the performance was severely problematic, and it could also cause\n   * issues when types other than POJOs are passed to subscribe as subscribers, as they will likely have\n   * their `this` context overwritten.\n   *\n   * @deprecated As of version 8, RxJS will no longer support altering the\n   * context of next functions provided as part of an observer to Subscribe. Instead,\n   * you will have access to a subscription or a signal or token that will allow you to do things like\n   * unsubscribe and test closed status. Will be removed in v8.\n   */\n  useDeprecatedNextContext: boolean;\n}\n","type SetTimeoutFunction = (handler: () => void, timeout?: number, ...args: any[]) => number;\ntype ClearTimeoutFunction = (handle: number) => void;\n\ninterface TimeoutProvider {\n  setTimeout: SetTimeoutFunction;\n  clearTimeout: ClearTimeoutFunction;\n  delegate:\n    | {\n        setTimeout: SetTimeoutFunction;\n        clearTimeout: ClearTimeoutFunction;\n      }\n    | undefined;\n}\n\nexport const timeoutProvider: TimeoutProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  setTimeout(...args) {\n    const { delegate } = timeoutProvider;\n    return (delegate?.setTimeout || setTimeout)(...args);\n  },\n  clearTimeout(handle) {\n    const { delegate } = timeoutProvider;\n    return (delegate?.clearTimeout || clearTimeout)(handle);\n  },\n  delegate: undefined,\n};\n","import { config } from '../config';\nimport { timeoutProvider } from '../scheduler/timeoutProvider';\n\n/**\n * Handles an error on another job either with the user-configured {@link onUnhandledError},\n * or by throwing it on that new job so it can be picked up by `window.onerror`, `process.on('error')`, etc.\n *\n * This should be called whenever there is an error that is out-of-band with the subscription\n * or when an error hits a terminal boundary of the subscription and no error handler was provided.\n *\n * @param err the error to report\n */\nexport function reportUnhandledError(err: any) {\n  timeoutProvider.setTimeout(() => {\n    const { onUnhandledError } = config;\n    if (onUnhandledError) {\n      // Execute the user-configured error handler.\n      onUnhandledError(err);\n    } else {\n      // Throw so it is picked up by the runtime's uncaught error mechanism.\n      throw err;\n    }\n  });\n}\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { CompleteNotification, NextNotification, ErrorNotification } from './types';\n\n/**\n * A completion object optimized for memory use and created to be the\n * same \"shape\" as other notifications in v8.\n * @internal\n */\nexport const COMPLETE_NOTIFICATION = (() => createNotification('C', undefined, undefined) as CompleteNotification)();\n\n/**\n * Internal use only. Creates an optimized error notification that is the same \"shape\"\n * as other notifications.\n * @internal\n */\nexport function errorNotification(error: any): ErrorNotification {\n  return createNotification('E', undefined, error) as any;\n}\n\n/**\n * Internal use only. Creates an optimized next notification that is the same \"shape\"\n * as other notifications.\n * @internal\n */\nexport function nextNotification<T>(value: T) {\n  return createNotification('N', value, undefined) as NextNotification<T>;\n}\n\n/**\n * Ensures that all notifications created internally have the same \"shape\" in v8.\n *\n * TODO: This is only exported to support a crazy legacy test in `groupBy`.\n * @internal\n */\nexport function createNotification(kind: 'N' | 'E' | 'C', value: any, error: any) {\n  return {\n    kind,\n    value,\n    error,\n  };\n}\n","import { isFunction } from './util/isFunction';\nimport { Observer, ObservableNotification } from './types';\nimport { isSubscription, Subscription } from './Subscription';\nimport { config } from './config';\nimport { reportUnhandledError } from './util/reportUnhandledError';\nimport { noop } from './util/noop';\nimport { nextNotification, errorNotification, COMPLETE_NOTIFICATION } from './NotificationFactories';\nimport { timeoutProvider } from './scheduler/timeoutProvider';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param next The `next` callback of an Observer.\n   * @param error The `error` callback of an\n   * Observer.\n   * @param complete The `complete` callback of an\n   * Observer.\n   * @return A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   * @nocollapse\n   * @deprecated Do not use. Will be removed in v8. There is no replacement for this\n   * method, and there is no reason to be creating instances of `Subscriber` directly.\n   * If you have a specific use case, please file an issue.\n   */\n  static create<T>(next?: (x?: T) => void, error?: (e?: any) => void, complete?: () => void): Subscriber<T> {\n    return new SafeSubscriber(next, error, complete);\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  protected isStopped: boolean = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  protected destination: Subscriber<any> | Observer<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   * There is no reason to directly create an instance of Subscriber. This type is exported for typings reasons.\n   */\n  constructor(destination?: Subscriber<any> | Observer<any>) {\n    super();\n    if (destination) {\n      this.destination = destination;\n      // Automatically chain subscriptions together here.\n      // if destination is a Subscription, then it is a Subscriber.\n      if (isSubscription(destination)) {\n        destination.add(this);\n      }\n    } else {\n      this.destination = EMPTY_OBSERVER;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (this.isStopped) {\n      handleStoppedNotification(nextNotification(value), this);\n    } else {\n      this._next(value!);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached `Error`. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (this.isStopped) {\n      handleStoppedNotification(errorNotification(err), this);\n    } else {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (this.isStopped) {\n      handleStoppedNotification(COMPLETE_NOTIFICATION, this);\n    } else {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (!this.closed) {\n      this.isStopped = true;\n      super.unsubscribe();\n      this.destination = null!;\n    }\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    try {\n      this.destination.error(err);\n    } finally {\n      this.unsubscribe();\n    }\n  }\n\n  protected _complete(): void {\n    try {\n      this.destination.complete();\n    } finally {\n      this.unsubscribe();\n    }\n  }\n}\n\nexport class SafeSubscriber<T> extends Subscriber<T> {\n  constructor(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((e?: any) => void) | null,\n    complete?: (() => void) | null\n  ) {\n    super();\n\n    let next: ((value: T) => void) | undefined;\n    if (isFunction(observerOrNext)) {\n      // The first argument is a function, not an observer. The next\n      // two arguments *could* be observers, or they could be empty.\n      next = observerOrNext;\n    } else if (observerOrNext) {\n      // The first argument is an observer object, we have to pull the handlers\n      // off and capture the owner object as the context. That is because we're\n      // going to put them all in a new destination with ensured methods\n      // for `next`, `error`, and `complete`. That's part of what makes this\n      // the \"Safe\" Subscriber.\n      ({ next, error, complete } = observerOrNext);\n      let context: any;\n      if (this && config.useDeprecatedNextContext) {\n        // This is a deprecated path that made `this.unsubscribe()` available in\n        // next handler functions passed to subscribe. This only exists behind a flag\n        // now, as it is *very* slow.\n        context = Object.create(observerOrNext);\n        context.unsubscribe = () => this.unsubscribe();\n      } else {\n        context = observerOrNext;\n      }\n      next = next?.bind(context);\n      error = error?.bind(context);\n      complete = complete?.bind(context);\n    }\n\n    // Once we set the destination, the superclass `Subscriber` will\n    // do it's magic in the `_next`, `_error`, and `_complete` methods.\n    this.destination = {\n      next: next ? wrapForErrorHandling(next, this) : noop,\n      error: wrapForErrorHandling(error ?? defaultErrorHandler, this),\n      complete: complete ? wrapForErrorHandling(complete, this) : noop,\n    };\n  }\n}\n\n/**\n * Wraps a user-provided handler (or our {@link defaultErrorHandler} in one case) to\n * ensure that any thrown errors are caught and handled appropriately.\n *\n * @param handler The handler to wrap\n * @param instance The SafeSubscriber instance we're going to mark if there's an error.\n */\nfunction wrapForErrorHandling(handler: (arg?: any) => void, instance: SafeSubscriber<any>) {\n  return (...args: any[]) => {\n    try {\n      handler(...args);\n    } catch (err) {\n      if (config.useDeprecatedSynchronousErrorHandling) {\n        // If the user has opted for \"super-gross\" mode, we need to check to see\n        // if we're currently subscribing. If we are, we need to mark the _syncError\n        // So that it can be rethrown in the `subscribe` call on `Observable`.\n        if ((instance as any)._syncErrorHack_isSubscribing) {\n          (instance as any).__syncError = err;\n        } else {\n          // We're not currently subscribing, but we're in super-gross mode,\n          // so throw it immediately.\n          throw err;\n        }\n      } else {\n        // Ideal path, we report this as an unhandled error,\n        // which is thrown on a new call stack.\n        reportUnhandledError(err);\n      }\n    }\n  };\n}\n/**\n * An error handler used when no error handler was supplied\n * to the SafeSubscriber -- meaning no error handler was supplied\n * do the `subscribe` call on our observable.\n * @param err The error to handle\n */\nfunction defaultErrorHandler(err: any) {\n  throw err;\n}\n\n/**\n * A handler for notifications that cannot be sent to a stopped subscriber.\n * @param notification The notification being sent\n * @param subscriber The stopped subscriber\n */\nfunction handleStoppedNotification(notification: ObservableNotification<any>, subscriber: Subscriber<any>) {\n  const { onStoppedNotification } = config;\n  onStoppedNotification && timeoutProvider.setTimeout(() => onStoppedNotification(notification, subscriber));\n}\n\n/**\n * The observer used as a stub for subscriptions where the user did not\n * pass any arguments to `subscribe`. Comes with the default error handling\n * behavior.\n */\nexport const EMPTY_OBSERVER: Readonly<Observer<any>> & { closed: true } = {\n  closed: true,\n  next: noop,\n  error: defaultErrorHandler,\n  complete: noop,\n};\n","/** Symbol.observable or a string \"@@observable\". Used for interop */\nexport const observable = (() => (typeof Symbol === 'function' && Symbol.observable) || '@@observable')();\n","export function identity<T>(x: T): T {\n  return x;\n}\n","import { identity } from './identity';\nimport { UnaryFunction } from '../types';\n\nexport function pipe(): typeof identity;\nexport function pipe<T, A>(fn1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(fn1: UnaryFunction<T, A>, fn2: UnaryFunction<A, B>, fn3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>\n): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>\n): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>\n): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>\n): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>\n): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>,\n  fn9: UnaryFunction<H, I>\n): UnaryFunction<T, I>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(\n  fn1: UnaryFunction<T, A>,\n  fn2: UnaryFunction<A, B>,\n  fn3: UnaryFunction<B, C>,\n  fn4: UnaryFunction<C, D>,\n  fn5: UnaryFunction<D, E>,\n  fn6: UnaryFunction<E, F>,\n  fn7: UnaryFunction<F, G>,\n  fn8: UnaryFunction<G, H>,\n  fn9: UnaryFunction<H, I>,\n  ...fns: UnaryFunction<any, any>[]\n): UnaryFunction<T, unknown>;\n\nexport function pipe(...fns: Array<UnaryFunction<any, any>>): UnaryFunction<any, any> {\n  return pipeFromArray(fns);\n}\n\n/** @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (fns.length === 0) {\n    return identity as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input as any);\n  };\n}\n","/**\n * @prettier\n */\nimport { Operator } from './Operator';\nimport { SafeSubscriber, Subscriber } from './Subscriber';\nimport { isSubscription, Subscription } from './Subscription';\nimport { TeardownLogic, OperatorFunction, Subscribable, Observer } from './types';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { pipeFromArray } from './util/pipe';\nimport { config } from './config';\nimport { isFunction } from './util/isFunction';\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  source: Observable<any> | undefined;\n\n  /**\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  operator: Operator<any, T> | undefined;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new Observable by calling the Observable constructor\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new observable\n   * @nocollapse\n   * @deprecated Use `new Observable()` instead. Will be removed in v8.\n   */\n  static create: (...args: any[]) => any = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  };\n\n  /**\n   * Creates a new Observable, with this Observable instance as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param operator the operator defining the operation to take on the observable\n   * @return a new observable with the Operator applied\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   * If you have implemented an operator using `lift`, it is recommended that you create an\n   * operator by simply returning `new Observable()` directly. See \"Creating new operators from\n   * scratch\" section here: https://rxjs.dev/guide/operators\n   */\n  lift<R>(operator?: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(observer?: Partial<Observer<T>>): Subscription;\n  subscribe(next: (value: T) => void): Subscription;\n  /** @deprecated Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments */\n  subscribe(next?: ((value: T) => void) | null, error?: ((error: any) => void) | null, complete?: (() => void) | null): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to Observable's constructor, but most of the time it is\n   * a library implementation, which defines what will be emitted by an Observable, and when it be will emitted. This means\n   * that calling `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * the thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * of the following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular, do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, if the `error` method is not provided and an error happens,\n   * it will be thrown asynchronously. Errors thrown asynchronously cannot be caught using `try`/`catch`. Instead,\n   * use the {@link onUnhandledError} configuration option or use a runtime handler (like `window.onerror` or\n   * `process.on('error)`) to be notified of unhandled errors. Because of this, it's recommended that you provide\n   * an `error` method to avoid missing thrown errors.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where the first function is equivalent\n   * of a `next` method, the second of an `error` method and the third of a `complete` method. Just as in case of an Observer,\n   * if you do not need to listen for something, you can omit a function by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to the `error` function, as with an Observer, if not provided, errors emitted by an Observable will be thrown asynchronously.\n   *\n   * You can, however, subscribe with no parameters at all. This may be the case where you're not interested in terminal events\n   * and you also handled emissions internally by using operators (e.g. using `tap`).\n   *\n   * Whichever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop the work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a `scheduler`.\n   *\n   * ## Example\n   * ### Subscribe with an Observer\n   * ```ts\n   * import { of } from 'rxjs';\n   *\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() {\n   *     // We actually could just remove this method,\n   *     // since we do not really care about errors right now.\n   *   },\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   *   .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Subscribe with functions\n   * ```ts\n   * import { of } from 'rxjs'\n   *\n   * let sum = 0;\n   *\n   * of(1, 2, 3).subscribe(\n   *   value => {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   () => console.log('Sum equals: ' + sum)\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   * ```\n   *\n   * ### Cancel a subscription\n   * ```ts\n   * import { interval } from 'rxjs';\n   *\n   * const subscription = interval(1000).subscribe({\n   *   next(num) {\n   *     console.log(num)\n   *   },\n   *   complete() {\n   *     // Will not be called, even when cancelling subscription.\n   *     console.log('completed!');\n   *   }\n   * });\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   * ```\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown asynchronously as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {Subscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(\n    observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n    error?: ((error: any) => void) | null,\n    complete?: (() => void) | null\n  ): Subscription {\n    const subscriber = isSubscriber(observerOrNext) ? observerOrNext : new SafeSubscriber(observerOrNext, error, complete);\n\n    if (config.useDeprecatedSynchronousErrorHandling) {\n      this._deprecatedSyncErrorSubscribe(subscriber);\n    } else {\n      const { operator, source } = this;\n      subscriber.add(\n        operator\n          ? // We're dealing with a subscription in the\n            // operator chain to one of our lifted operators.\n            operator.call(subscriber, source)\n          : source\n          ? // If `source` has a value, but `operator` does not, something that\n            // had intimate knowledge of our API, like our `Subject`, must have\n            // set it. We're going to just call `_subscribe` directly.\n            this._subscribe(subscriber)\n          : // In all other cases, we're likely wrapping a user-provided initializer\n            // function, so we need to catch errors and handle them appropriately.\n            this._trySubscribe(subscriber)\n      );\n    }\n    return subscriber;\n  }\n\n  /**\n   * REMOVE THIS ENTIRE METHOD IN VERSION 8.\n   */\n  private _deprecatedSyncErrorSubscribe(subscriber: Subscriber<unknown>) {\n    const localSubscriber: any = subscriber;\n    localSubscriber._syncErrorHack_isSubscribing = true;\n    const { operator } = this;\n    if (operator) {\n      // We don't need to try/catch on operators, as they\n      // are doing their own try/catching, and will\n      // properly decorate the subscriber with `__syncError`.\n      subscriber.add(operator.call(subscriber, this.source));\n    } else {\n      try {\n        subscriber.add(this._subscribe(subscriber));\n      } catch (err) {\n        localSubscriber.__syncError = err;\n      }\n    }\n\n    // In the case of the deprecated sync error handling,\n    // we need to crawl forward through our subscriber chain and\n    // look to see if there's any synchronously thrown errors.\n    // Does this suck for perf? Yes. So stop using the deprecated sync\n    // error handling already. We're removing this in v8.\n    let dest = localSubscriber;\n    while (dest) {\n      // Technically, someone could throw something falsy, like 0, or \"\",\n      // so we need to check to see if anything was thrown, and we know\n      // that by the mere existence of `__syncError`.\n      if ('__syncError' in dest) {\n        try {\n          throw dest.__syncError;\n        } finally {\n          subscriber.unsubscribe();\n        }\n      }\n      dest = dest.destination;\n    }\n\n    localSubscriber._syncErrorHack_isSubscribing = false;\n  }\n\n  /** @internal */\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      // We don't need to return anything in this case,\n      // because it's just going to try to `add()` to a subscription\n      // above.\n      sink.error(err);\n    }\n  }\n\n  /**\n   * Used as a NON-CANCELLABLE means of subscribing to an observable, for use with\n   * APIs that expect promises, like `async/await`. You cannot unsubscribe from this.\n   *\n   * **WARNING**: Only use this with observables you *know* will complete. If the source\n   * observable does not complete, you will end up with a promise that is hung up, and\n   * potentially all of the state of an async function hanging out in memory. To avoid\n   * this situation, look into adding something like {@link timeout}, {@link take},\n   * {@link takeWhile}, or {@link takeUntil} amongst others.\n   *\n   * ### Example:\n   *\n   * ```ts\n   * import { interval } from 'rxjs';\n   * import { take } from 'rxjs/operators';\n   *\n   * const source$ = interval(1000).pipe(take(4));\n   *\n   * async function getTotal() {\n   *    let total = 0;\n   *\n   *    await source$.forEach(value => {\n   *      total += value;\n   *      console.log('observable -> ', value);\n   *    });\n   *\n   *    return total;\n   * }\n   *\n   * getTotal().then(\n   *    total => console.log('Total:', total)\n   * )\n   *\n   * // Expected:\n   * // \"observable -> 0\"\n   * // \"observable -> 1\"\n   * // \"observable -> 2\"\n   * // \"observable -> 3\"\n   * // \"Total: 6\"\n   * ```\n   * @param next a handler for each value emitted by the observable\n   * @return a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void): Promise<void>;\n\n  /**\n   * @param next a handler for each value emitted by the observable\n   * @param promiseCtor a constructor function used to instantiate the Promise\n   * @return a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   * @deprecated Passing a Promise constructor will no longer be available\n   * in upcoming versions of RxJS. This is because it adds weight to the library, for very\n   * little benefit. If you need this functionality, it is recommended that you either\n   * polyfill Promise, or you create an adapter to convert the returned native promise\n   * to whatever promise implementation you wanted. Will be removed in v8.\n   */\n  forEach(next: (value: T) => void, promiseCtor: PromiseConstructorLike): Promise<void>;\n\n  forEach(next: (value: T) => void, promiseCtor?: PromiseConstructorLike): Promise<void> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a ReferenceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe(\n        (value) => {\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription?.unsubscribe();\n          }\n        },\n        reject,\n        resolve\n      );\n    }) as Promise<void>;\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source?.subscribe(subscriber);\n  }\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>;\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>;\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>;\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>;\n  pipe<A, B, C, D>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>\n  ): Observable<D>;\n  pipe<A, B, C, D, E>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>\n  ): Observable<E>;\n  pipe<A, B, C, D, E, F>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>\n  ): Observable<F>;\n  pipe<A, B, C, D, E, F, G>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>\n  ): Observable<G>;\n  pipe<A, B, C, D, E, F, G, H>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>\n  ): Observable<H>;\n  pipe<A, B, C, D, E, F, G, H, I>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>,\n    op9: OperatorFunction<H, I>\n  ): Observable<I>;\n  pipe<A, B, C, D, E, F, G, H, I>(\n    op1: OperatorFunction<T, A>,\n    op2: OperatorFunction<A, B>,\n    op3: OperatorFunction<B, C>,\n    op4: OperatorFunction<C, D>,\n    op5: OperatorFunction<D, E>,\n    op6: OperatorFunction<E, F>,\n    op7: OperatorFunction<F, G>,\n    op8: OperatorFunction<G, H>,\n    op9: OperatorFunction<H, I>,\n    ...operations: OperatorFunction<any, any>[]\n  ): Observable<unknown>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * ### Example\n   * ```ts\n   * import { interval } from 'rxjs';\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   * ```\n   */\n  pipe(...operations: OperatorFunction<any, any>[]): Observable<any> {\n    return operations.length ? pipeFromArray(operations)(this) : this;\n  }\n\n  /* tslint:disable:max-line-length */\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(): Promise<T | undefined>;\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(PromiseCtor: typeof Promise): Promise<T | undefined>;\n  /** @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise */\n  toPromise(PromiseCtor: PromiseConstructorLike): Promise<T | undefined>;\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Subscribe to this Observable and get a Promise resolving on\n   * `complete` with the last emission (if any).\n   *\n   * **WARNING**: Only use this with observables you *know* will complete. If the source\n   * observable does not complete, you will end up with a promise that is hung up, and\n   * potentially all of the state of an async function hanging out in memory. To avoid\n   * this situation, look into adding something like {@link timeout}, {@link take},\n   * {@link takeWhile}, or {@link takeUntil} amongst others.\n   *\n   * @method toPromise\n   * @param [promiseCtor] a constructor function used to instantiate\n   * the Promise\n   * @return A Promise that resolves with the last value emit, or\n   * rejects on an error. If there were no emissions, Promise\n   * resolves with undefined.\n   * @deprecated Replaced with {@link firstValueFrom} and {@link lastValueFrom}. Will be removed in v8. Details: https://rxjs.dev/deprecations/to-promise\n   */\n  toPromise(promiseCtor?: PromiseConstructorLike): Promise<T | undefined> {\n    promiseCtor = getPromiseCtor(promiseCtor);\n\n    return new promiseCtor((resolve, reject) => {\n      let value: T | undefined;\n      this.subscribe(\n        (x: T) => (value = x),\n        (err: any) => reject(err),\n        () => resolve(value)\n      );\n    }) as Promise<T | undefined>;\n  }\n}\n\n/**\n * Decides between a passed promise constructor from consuming code,\n * A default configured promise constructor, and the native promise\n * constructor and returns it. If nothing can be found, it will throw\n * an error.\n * @param promiseCtor The optional promise constructor to passed by consuming code\n */\nfunction getPromiseCtor(promiseCtor: PromiseConstructorLike | undefined) {\n  return promiseCtor ?? config.Promise ?? Promise;\n}\n\nfunction isObserver<T>(value: any): value is Observer<T> {\n  return value && isFunction(value.next) && isFunction(value.error) && isFunction(value.complete);\n}\n\nfunction isSubscriber<T>(value: any): value is Subscriber<T> {\n  return (value && value instanceof Subscriber) || (isObserver(value) && isSubscription(value));\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction } from '../types';\nimport { isFunction } from './isFunction';\n\n/**\n * Used to determine if an object is an Observable with a lift function.\n */\nexport function hasLift(source: any): source is { lift: InstanceType<typeof Observable>['lift'] } {\n  return isFunction(source?.lift);\n}\n\n/**\n * Creates an `OperatorFunction`. Used to define operators throughout the library in a concise way.\n * @param init The logic to connect the liftedSource to the subscriber at the moment of subscription.\n */\nexport function operate<T, R>(\n  init: (liftedSource: Observable<T>, subscriber: Subscriber<R>) => (() => void) | void\n): OperatorFunction<T, R> {\n  return (source: Observable<T>) => {\n    if (hasLift(source)) {\n      return source.lift(function (this: Subscriber<R>, liftedSource: Observable<T>) {\n        try {\n          return init(liftedSource, this);\n        } catch (err) {\n          this.error(err);\n        }\n      });\n    }\n    throw new TypeError('Unable to lift unknown Observable type');\n  };\n}\n","import { Subscriber } from '../Subscriber';\n\n/**\n * A generic helper for allowing operators to be created with a Subscriber and\n * use closures to capture neceessary state from the operator function itself.\n */\nexport class OperatorSubscriber<T> extends Subscriber<T> {\n  /**\n   * Creates an instance of an `OperatorSubscriber`.\n   * @param destination The downstream subscriber.\n   * @param onNext Handles next values, only called if this subscriber is not stopped or closed. Any\n   * error that occurs in this function is caught and sent to the `error` method of this subscriber.\n   * @param onError Handles errors from the subscription, any errors that occur in this handler are caught\n   * and send to the `destination` error handler.\n   * @param onComplete Handles completion notification from the subscription. Any errors that occur in\n   * this handler are sent to the `destination` error handler.\n   * @param onFinalize Additional teardown logic here. This will only be called on teardown if the\n   * subscriber itself is not already closed. This is called after all other teardown logic is executed.\n   */\n  constructor(\n    destination: Subscriber<any>,\n    onNext?: (value: T) => void,\n    onComplete?: () => void,\n    onError?: (err: any) => void,\n    private onFinalize?: () => void\n  ) {\n    // It's important - for performance reasons - that all of this class's\n    // members are initialized and that they are always initialized in the same\n    // order. This will ensure that all OperatorSubscriber instances have the\n    // same hidden class in V8. This, in turn, will help keep the number of\n    // hidden classes involved in property accesses within the base class as\n    // low as possible. If the number of hidden classes involved exceeds four,\n    // the property accesses will become megamorphic and performance penalties\n    // will be incurred - i.e. inline caches won't be used.\n    //\n    // The reasons for ensuring all instances have the same hidden class are\n    // further discussed in this blog post from Benedikt Meurer:\n    // https://benediktmeurer.de/2018/03/23/impact-of-polymorphism-on-component-based-frameworks-like-react/\n    super(destination);\n    this._next = onNext\n      ? function (this: OperatorSubscriber<T>, value: T) {\n          try {\n            onNext(value);\n          } catch (err) {\n            destination.error(err);\n          }\n        }\n      : super._next;\n    this._error = onError\n      ? function (this: OperatorSubscriber<T>, err: any) {\n          try {\n            onError(err);\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure teardown.\n            this.unsubscribe();\n          }\n        }\n      : super._error;\n    this._complete = onComplete\n      ? function (this: OperatorSubscriber<T>) {\n          try {\n            onComplete();\n          } catch (err) {\n            // Send any errors that occur down stream.\n            destination.error(err);\n          } finally {\n            // Ensure teardown.\n            this.unsubscribe();\n          }\n        }\n      : super._complete;\n  }\n\n  unsubscribe() {\n    const { closed } = this;\n    super.unsubscribe();\n    // Execute additional teardown if we have any and we didn't already do so.\n    !closed && this.onFinalize?.();\n  }\n}\n","import { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Make a {@link ConnectableObservable} behave like a ordinary observable and automates the way\n * you can connect to it.\n *\n * Internally it counts the subscriptions to the observable and subscribes (only once) to the source if\n * the number of subscriptions is larger than 0. If the number of subscriptions is smaller than 1, it\n * unsubscribes from the source. This way you can make sure that everything before the *published*\n * refCount has only a single subscription independently of the number of subscribers to the target\n * observable.\n *\n * Note that using the {@link share} operator is exactly the same as using the `multicast(() => new Subject())` operator\n * (making the observable hot) and the *refCount* operator in a sequence.\n *\n * ![](refCount.png)\n *\n * ## Example\n *\n * In the following example there are two intervals turned into connectable observables\n * by using the *publish* operator. The first one uses the *refCount* operator, the\n * second one does not use it. You will notice that a connectable observable does nothing\n * until you call its connect function.\n *\n * ```ts\n * import { interval } from 'rxjs';\n * import { tap, publish, refCount } from 'rxjs/operators';\n *\n * // Turn the interval observable into a ConnectableObservable (hot)\n * const refCountInterval = interval(400).pipe(\n *   tap((num) => console.log(`refCount ${num}`)),\n *   publish(),\n *   refCount()\n * );\n *\n * const publishedInterval = interval(400).pipe(\n *   tap((num) => console.log(`publish ${num}`)),\n *   publish()\n * );\n *\n * refCountInterval.subscribe();\n * refCountInterval.subscribe();\n * // 'refCount 0' -----> 'refCount 1' -----> etc\n * // All subscriptions will receive the same value and the tap (and\n * // every other operator) before the publish operator will be executed\n * // only once per event independently of the number of subscriptions.\n *\n * publishedInterval.subscribe();\n * // Nothing happens until you call .connect() on the observable.\n * ```\n *\n * @return A function that returns an Observable that automates the connection\n * to ConnectableObservable.\n * @see {@link ConnectableObservable}\n * @see {@link share}\n * @see {@link publish}\n * @deprecated Replaced with the {@link share} operator. How `share` is used\n * will depend on the connectable observable you created just prior to the\n * `refCount` operator.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function refCount<T>(): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let connection: Subscription | null = null;\n\n    (source as any)._refCount++;\n\n    const refCounter = new OperatorSubscriber(subscriber, undefined, undefined, undefined, () => {\n      if (!source || (source as any)._refCount <= 0 || 0 < --(source as any)._refCount) {\n        connection = null;\n        return;\n      }\n\n      ///\n      // Compare the local RefCountSubscriber's connection Subscription to the\n      // connection Subscription on the shared ConnectableObservable. In cases\n      // where the ConnectableObservable source synchronously emits values, and\n      // the RefCountSubscriber's downstream Observers synchronously unsubscribe,\n      // execution continues to here before the RefCountOperator has a chance to\n      // supply the RefCountSubscriber with the shared connection Subscription.\n      // For example:\n      // ```\n      // range(0, 10).pipe(\n      //   publish(),\n      //   refCount(),\n      //   take(5),\n      // )\n      // .subscribe();\n      // ```\n      // In order to account for this case, RefCountSubscriber should only dispose\n      // the ConnectableObservable's shared connection Subscription if the\n      // connection Subscription exists, *and* either:\n      //   a. RefCountSubscriber doesn't have a reference to the shared connection\n      //      Subscription yet, or,\n      //   b. RefCountSubscriber's connection Subscription reference is identical\n      //      to the shared connection Subscription\n      ///\n\n      const sharedConnection = (source as any)._connection;\n      const conn = connection;\n      connection = null;\n\n      if (sharedConnection && (!conn || sharedConnection === conn)) {\n        sharedConnection.unsubscribe();\n      }\n\n      subscriber.unsubscribe();\n    });\n\n    source.subscribe(refCounter);\n\n    if (!refCounter.closed) {\n      connection = (source as ConnectableObservable<T>).connect();\n    }\n  });\n}\n","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { refCount as higherOrderRefCount } from '../operators/refCount';\nimport { OperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { hasLift } from '../util/lift';\n\n/**\n * @class ConnectableObservable<T>\n * @deprecated Will be removed in v8. Use {@link connectable} to create a connectable observable.\n * If you are using the `refCount` method of `ConnectableObservable`, use the {@link share} operator\n * instead.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport class ConnectableObservable<T> extends Observable<T> {\n  protected _subject: Subject<T> | null = null;\n  protected _refCount: number = 0;\n  protected _connection: Subscription | null = null;\n\n  /**\n   * @param source The source observable\n   * @param subjectFactory The factory that creates the subject used internally.\n   * @deprecated Will be removed in v8. Use {@link connectable} to create a connectable observable.\n   * `new ConnectableObservable(source, factory)` is equivalent to\n   * `connectable(source, { connector: factory })`.\n   * When the `refCount()` method is needed, the {@link share} operator should be used instead:\n   * `new ConnectableObservable(source, factory).refCount()` is equivalent to\n   * `source.pipe(share({ connector: factory }))`.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  constructor(public source: Observable<T>, protected subjectFactory: () => Subject<T>) {\n    super();\n    // If we have lift, monkey patch that here. This is done so custom observable\n    // types will compose through multicast. Otherwise the resulting observable would\n    // simply be an instance of `ConnectableObservable`.\n    if (hasLift(source)) {\n      this.lift = source.lift;\n    }\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>) {\n    return this.getSubject().subscribe(subscriber);\n  }\n\n  protected getSubject(): Subject<T> {\n    const subject = this._subject;\n    if (!subject || subject.isStopped) {\n      this._subject = this.subjectFactory();\n    }\n    return this._subject!;\n  }\n\n  protected _teardown() {\n    this._refCount = 0;\n    const { _connection } = this;\n    this._subject = this._connection = null;\n    _connection?.unsubscribe();\n  }\n\n  /**\n   * @deprecated {@link ConnectableObservable} will be removed in v8. Use {@link connectable} instead.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  connect(): Subscription {\n    let connection = this._connection;\n    if (!connection) {\n      connection = this._connection = new Subscription();\n      const subject = this.getSubject();\n      connection.add(\n        this.source.subscribe(\n          new OperatorSubscriber(\n            subject as any,\n            undefined,\n            () => {\n              this._teardown();\n              subject.complete();\n            },\n            (err) => {\n              this._teardown();\n              subject.error(err);\n            },\n            () => this._teardown()\n          )\n        )\n      );\n\n      if (connection.closed) {\n        this._connection = null;\n        connection = Subscription.EMPTY;\n      }\n    }\n    return connection;\n  }\n\n  /**\n   * @deprecated {@link ConnectableObservable} will be removed in v8. Use the {@link share} operator instead.\n   * Details: https://rxjs.dev/deprecations/multicasting\n   */\n  refCount(): Observable<T> {\n    return higherOrderRefCount()(this) as Observable<T>;\n  }\n}\n","import { TimestampProvider } from '../types';\n\ninterface PerformanceTimestampProvider extends TimestampProvider {\n  delegate: TimestampProvider | undefined;\n}\n\nexport const performanceTimestampProvider: PerformanceTimestampProvider = {\n  now() {\n    // Use the variable rather than `this` so that the function can be called\n    // without being bound to the provider.\n    return (performanceTimestampProvider.delegate || performance).now();\n  },\n  delegate: undefined,\n};\n","import { Subscription } from '../Subscription';\n\ninterface AnimationFrameProvider {\n  schedule(callback: FrameRequestCallback): Subscription;\n  requestAnimationFrame: typeof requestAnimationFrame;\n  cancelAnimationFrame: typeof cancelAnimationFrame;\n  delegate:\n    | {\n        requestAnimationFrame: typeof requestAnimationFrame;\n        cancelAnimationFrame: typeof cancelAnimationFrame;\n      }\n    | undefined;\n}\n\nexport const animationFrameProvider: AnimationFrameProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  schedule(callback) {\n    let request = requestAnimationFrame;\n    let cancel: typeof cancelAnimationFrame | undefined = cancelAnimationFrame;\n    const { delegate } = animationFrameProvider;\n    if (delegate) {\n      request = delegate.requestAnimationFrame;\n      cancel = delegate.cancelAnimationFrame;\n    }\n    const handle = request((timestamp) => {\n      // Clear the cancel function. The request has been fulfilled, so\n      // attempting to cancel the request upon unsubscription would be\n      // pointless.\n      cancel = undefined;\n      callback(timestamp);\n    });\n    return new Subscription(() => cancel?.(handle));\n  },\n  requestAnimationFrame(...args) {\n    const { delegate } = animationFrameProvider;\n    return (delegate?.requestAnimationFrame || requestAnimationFrame)(...args);\n  },\n  cancelAnimationFrame(...args) {\n    const { delegate } = animationFrameProvider;\n    return (delegate?.cancelAnimationFrame || cancelAnimationFrame)(...args);\n  },\n  delegate: undefined,\n};\n","import { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nimport { TimestampProvider } from \"../../types\";\nimport { performanceTimestampProvider } from '../../scheduler/performanceTimestampProvider';\nimport { animationFrameProvider } from '../../scheduler/animationFrameProvider';\n\n/**\n * An observable of animation frames\n *\n * Emits the the amount of time elapsed since subscription and the timestamp on each animation frame.\n * Defaults to milliseconds provided to the requestAnimationFrame's callback. Does not end on its own.\n *\n * Every subscription will start a separate animation loop. Since animation frames are always scheduled\n * by the browser to occur directly before a repaint, scheduling more than one animation frame synchronously\n * should not be much different or have more overhead than looping over an array of events during\n * a single animation frame. However, if for some reason the developer would like to ensure the\n * execution of animation-related handlers are all executed during the same task by the engine,\n * the `share` operator can be used.\n *\n * This is useful for setting up animations with RxJS.\n *\n * ### Example\n *\n * Tweening a div to move it on the screen\n *\n * ```ts\n * import { animationFrames } from 'rxjs';\n * import { map, takeWhile, endWith } from 'rxjs/operators';\n *\n * function tween(start: number, end: number, duration: number) {\n *   const diff = end - start;\n *   return animationFrames().pipe(\n *     // Figure out what percentage of time has passed\n *     map(({elapsed}) => elapsed / duration),\n *     // Take the vector while less than 100%\n *     takeWhile(v => v < 1),\n *     // Finish with 100%\n *     endWith(1),\n *     // Calculate the distance traveled between start and end\n *     map(v => v * diff + start)\n *   );\n * }\n *\n * // Setup a div for us to move around\n * const div = document.createElement('div');\n * document.body.appendChild(div);\n * div.style.position = 'absolute';\n * div.style.width = '40px';\n * div.style.height = '40px';\n * div.style.backgroundColor = 'lime';\n * div.style.transform = 'translate3d(10px, 0, 0)';\n *\n * tween(10, 200, 4000).subscribe(x => {\n *   div.style.transform = `translate3d(${x}px, 0, 0)`;\n * });\n * ```\n *\n * ### Example\n *\n * Providing a custom timestamp provider\n *\n * ```ts\n * import { animationFrames, TimestampProvider } from 'rxjs';\n *\n * // A custom timestamp provider\n * let now = 0;\n * const customTSProvider: TimestampProvider = {\n *   now() { return now++; }\n * };\n *\n * const source$ = animationFrames(customTSProvider);\n *\n * // Log increasing numbers 0...1...2... on every animation frame.\n * source$.subscribe(({ elapsed }) => console.log(elapsed));\n * ```\n *\n * @param timestampProvider An object with a `now` method that provides a numeric timestamp\n */\nexport function animationFrames(timestampProvider?: TimestampProvider) {\n  return timestampProvider ? animationFramesFactory(timestampProvider) : DEFAULT_ANIMATION_FRAMES;\n}\n\n/**\n * Does the work of creating the observable for `animationFrames`.\n * @param timestampProvider The timestamp provider to use to create the observable\n */\nfunction animationFramesFactory(timestampProvider?: TimestampProvider) {\n  const { schedule } = animationFrameProvider;\n  return new Observable<{ timestamp: number, elapsed: number }>(subscriber => {\n    const subscription = new Subscription();\n    // If no timestamp provider is specified, use performance.now() - as it\n    // will return timestamps 'compatible' with those passed to the run\n    // callback and won't be affected by NTP adjustments, etc.\n    const provider = timestampProvider || performanceTimestampProvider;\n    // Capture the start time upon subscription, as the run callback can remain\n    // queued for a considerable period of time and the elapsed time should\n    // represent the time elapsed since subscription - not the time since the\n    // first rendered animation frame.\n    const start = provider.now();\n    const run = (timestamp: DOMHighResTimeStamp | number) => {\n      // Use the provider's timestamp to calculate the elapsed time. Note that\n      // this means - if the caller hasn't passed a provider - that\n      // performance.now() will be used instead of the timestamp that was\n      // passed to the run callback. The reason for this is that the timestamp\n      // passed to the callback can be earlier than the start time, as it\n      // represents the time at which the browser decided it would render any\n      // queued frames - and that time can be earlier the captured start time.\n      const now = provider.now();\n      subscriber.next({\n        timestamp: timestampProvider ? now : timestamp,\n        elapsed: now - start\n      });\n      if (!subscriber.closed) {\n        subscription.add(schedule(run));\n      }\n    };\n    subscription.add(schedule(run));\n    return subscription;\n  });\n}\n\n/**\n * In the common case, where the timestamp provided by the rAF API is used,\n * we use this shared observable to reduce overhead.\n */\nconst DEFAULT_ANIMATION_FRAMES = animationFramesFactory();\n","import { createErrorClass } from './createErrorClass';\n\nexport interface ObjectUnsubscribedError extends Error {}\n\nexport interface ObjectUnsubscribedErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (): ObjectUnsubscribedError;\n}\n\n/**\n * An error thrown when an action is invalid because the object has been\n * unsubscribed.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n *\n * @class ObjectUnsubscribedError\n */\nexport const ObjectUnsubscribedError: ObjectUnsubscribedErrorCtor = createErrorClass(\n  (_super) =>\n    function ObjectUnsubscribedErrorImpl(this: any) {\n      _super(this);\n      this.name = 'ObjectUnsubscribedError';\n      this.message = 'object unsubscribed';\n    }\n);\n","import { Operator } from './Operator';\nimport { Observable } from './Observable';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, EMPTY_SUBSCRIPTION } from './Subscription';\nimport { Observer, SubscriptionLike, TeardownLogic } from './types';\nimport { ObjectUnsubscribedError } from './util/ObjectUnsubscribedError';\nimport { arrRemove } from './util/arrRemove';\n\n/**\n * A Subject is a special type of Observable that allows values to be\n * multicasted to many Observers. Subjects are like EventEmitters.\n *\n * Every Subject is an Observable and an Observer. You can subscribe to a\n * Subject, and you can call next to feed values as well as error and complete.\n */\nexport class Subject<T> extends Observable<T> implements SubscriptionLike {\n  closed = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  observers: Observer<T>[] = [];\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  isStopped = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  hasError = false;\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  thrownError: any = null;\n\n  /**\n   * Creates a \"subject\" by basically gluing an observer to an observable.\n   *\n   * @nocollapse\n   * @deprecated Recommended you do not use. Will be removed at some point in the future. Plans for replacement still under discussion.\n   */\n  static create: (...args: any[]) => any = <T>(destination: Observer<T>, source: Observable<T>): AnonymousSubject<T> => {\n    return new AnonymousSubject<T>(destination, source);\n  };\n\n  constructor() {\n    // NOTE: This must be here to obscure Observable's constructor.\n    super();\n  }\n\n  /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const subject = new AnonymousSubject(this, this);\n    subject.operator = operator as any;\n    return subject as any;\n  }\n\n  /** @internal */\n  protected _throwIfClosed() {\n    if (this.closed) {\n      throw new ObjectUnsubscribedError();\n    }\n  }\n\n  next(value: T) {\n    this._throwIfClosed();\n    if (!this.isStopped) {\n      const copy = this.observers.slice();\n      for (const observer of copy) {\n        observer.next(value);\n      }\n    }\n  }\n\n  error(err: any) {\n    this._throwIfClosed();\n    if (!this.isStopped) {\n      this.hasError = this.isStopped = true;\n      this.thrownError = err;\n      const { observers } = this;\n      while (observers.length) {\n        observers.shift()!.error(err);\n      }\n    }\n  }\n\n  complete() {\n    this._throwIfClosed();\n    if (!this.isStopped) {\n      this.isStopped = true;\n      const { observers } = this;\n      while (observers.length) {\n        observers.shift()!.complete();\n      }\n    }\n  }\n\n  unsubscribe() {\n    this.isStopped = this.closed = true;\n    this.observers = null!;\n  }\n\n  get observed() {\n    return this.observers?.length > 0;\n  }\n\n  /** @internal */\n  protected _trySubscribe(subscriber: Subscriber<T>): TeardownLogic {\n    this._throwIfClosed();\n    return super._trySubscribe(subscriber);\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    this._throwIfClosed();\n    this._checkFinalizedStatuses(subscriber);\n    return this._innerSubscribe(subscriber);\n  }\n\n  /** @internal */\n  protected _innerSubscribe(subscriber: Subscriber<any>) {\n    const { hasError, isStopped, observers } = this;\n    return hasError || isStopped\n      ? EMPTY_SUBSCRIPTION\n      : (observers.push(subscriber), new Subscription(() => arrRemove(observers, subscriber)));\n  }\n\n  /** @internal */\n  protected _checkFinalizedStatuses(subscriber: Subscriber<any>) {\n    const { hasError, thrownError, isStopped } = this;\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped) {\n      subscriber.complete();\n    }\n  }\n\n  /**\n   * Creates a new Observable with this Subject as the source. You can do this\n   * to create customize Observer-side logic of the Subject and conceal it from\n   * code that uses the Observable.\n   * @return {Observable} Observable that the Subject casts to\n   */\n  asObservable(): Observable<T> {\n    const observable: any = new Observable<T>();\n    observable.source = this;\n    return observable;\n  }\n}\n\n/**\n * @class AnonymousSubject<T>\n */\nexport class AnonymousSubject<T> extends Subject<T> {\n  constructor(\n    /** @deprecated Internal implementation detail, do not use directly. Will be made internal in v8. */\n    public destination?: Observer<T>,\n    source?: Observable<T>\n  ) {\n    super();\n    this.source = source;\n  }\n\n  next(value: T) {\n    this.destination?.next?.(value);\n  }\n\n  error(err: any) {\n    this.destination?.error?.(err);\n  }\n\n  complete() {\n    this.destination?.complete?.();\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    return this.source?.subscribe(subscriber) ?? EMPTY_SUBSCRIPTION;\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\n\n/**\n * A variant of Subject that requires an initial value and emits its current\n * value whenever it is subscribed to.\n *\n * @class BehaviorSubject<T>\n */\nexport class BehaviorSubject<T> extends Subject<T> {\n  constructor(private _value: T) {\n    super();\n  }\n\n  get value(): T {\n    return this.getValue();\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    const subscription = super._subscribe(subscriber);\n    !subscription.closed && subscriber.next(this._value);\n    return subscription;\n  }\n\n  getValue(): T {\n    const { hasError, thrownError, _value } = this;\n    if (hasError) {\n      throw thrownError;\n    }\n    this._throwIfClosed();\n    return _value;\n  }\n\n  next(value: T): void {\n    super.next((this._value = value));\n  }\n}\n","import { TimestampProvider } from '../types';\n\ninterface DateTimestampProvider extends TimestampProvider {\n  delegate: TimestampProvider | undefined;\n}\n\nexport const dateTimestampProvider: DateTimestampProvider = {\n  now() {\n    // Use the variable rather than `this` so that the function can be called\n    // without being bound to the provider.\n    return (dateTimestampProvider.delegate || Date).now();\n  },\n  delegate: undefined,\n};\n","import { Subject } from './Subject';\nimport { TimestampProvider } from './types';\nimport { Subscriber } from './Subscriber';\nimport { Subscription } from './Subscription';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\n\n/**\n * A variant of {@link Subject} that \"replays\" old values to new subscribers by emitting them when they first subscribe.\n *\n * `ReplaySubject` has an internal buffer that will store a specified number of values that it has observed. Like `Subject`,\n * `ReplaySubject` \"observes\" values by having them passed to its `next` method. When it observes a value, it will store that\n * value for a time determined by the configuration of the `ReplaySubject`, as passed to its constructor.\n *\n * When a new subscriber subscribes to the `ReplaySubject` instance, it will synchronously emit all values in its buffer in\n * a First-In-First-Out (FIFO) manner. The `ReplaySubject` will also complete, if it has observed completion; and it will\n * error if it has observed an error.\n *\n * There are two main configuration items to be concerned with:\n *\n * 1. `bufferSize` - This will determine how many items are stored in the buffer, defaults to infinite.\n * 2. `windowTime` - The amount of time to hold a value in the buffer before removing it from the buffer.\n *\n * Both configurations may exist simultaneously. So if you would like to buffer a maximum of 3 values, as long as the values\n * are less than 2 seconds old, you could do so with a `new ReplaySubject(3, 2000)`.\n *\n * ### Differences with BehaviorSubject\n *\n * `BehaviorSubject` is similar to `new ReplaySubject(1)`, with a couple fo exceptions:\n *\n * 1. `BehaviorSubject` comes \"primed\" with a single value upon construction.\n * 2. `ReplaySubject` will replay values, even after observing an error, where `BehaviorSubject` will not.\n *\n * @see {@link Subject}\n * @see {@link BehaviorSubject}\n * @see {@link shareReplay}\n */\nexport class ReplaySubject<T> extends Subject<T> {\n  private _buffer: (T | number)[] = [];\n  private _infiniteTimeWindow = true;\n\n  /**\n   * @param bufferSize The size of the buffer to replay on subscription\n   * @param windowTime The amount of time the buffered items will say buffered\n   * @param timestampProvider An object with a `now()` method that provides the current timestamp. This is used to\n   * calculate the amount of time something has been buffered.\n   */\n  constructor(\n    private _bufferSize = Infinity,\n    private _windowTime = Infinity,\n    private _timestampProvider: TimestampProvider = dateTimestampProvider\n  ) {\n    super();\n    this._infiniteTimeWindow = _windowTime === Infinity;\n    this._bufferSize = Math.max(1, _bufferSize);\n    this._windowTime = Math.max(1, _windowTime);\n  }\n\n  next(value: T): void {\n    const { isStopped, _buffer, _infiniteTimeWindow, _timestampProvider, _windowTime } = this;\n    if (!isStopped) {\n      _buffer.push(value);\n      !_infiniteTimeWindow && _buffer.push(_timestampProvider.now() + _windowTime);\n    }\n    this._trimBuffer();\n    super.next(value);\n  }\n\n  /** @internal */\n  protected _subscribe(subscriber: Subscriber<T>): Subscription {\n    this._throwIfClosed();\n    this._trimBuffer();\n\n    const subscription = this._innerSubscribe(subscriber);\n\n    const { _infiniteTimeWindow, _buffer } = this;\n    // We use a copy here, so reentrant code does not mutate our array while we're\n    // emitting it to a new subscriber.\n    const copy = _buffer.slice();\n    for (let i = 0; i < copy.length && !subscriber.closed; i += _infiniteTimeWindow ? 1 : 2) {\n      subscriber.next(copy[i] as T);\n    }\n\n    this._checkFinalizedStatuses(subscriber);\n\n    return subscription;\n  }\n\n  private _trimBuffer() {\n    const { _bufferSize, _timestampProvider, _buffer, _infiniteTimeWindow } = this;\n    // If we don't have an infinite buffer size, and we're over the length,\n    // use splice to truncate the old buffer values off. Note that we have to\n    // double the size for instances where we're not using an infinite time window\n    // because we're storing the values and the timestamps in the same array.\n    const adjustedBufferSize = (_infiniteTimeWindow ? 1 : 2) * _bufferSize;\n    _bufferSize < Infinity && adjustedBufferSize < _buffer.length && _buffer.splice(0, _buffer.length - adjustedBufferSize);\n\n    // Now, if we're not in an infinite time window, remove all values where the time is\n    // older than what is allowed.\n    if (!_infiniteTimeWindow) {\n      const now = _timestampProvider.now();\n      let last = 0;\n      // Search the array for the first timestamp that isn't expired and\n      // truncate the buffer up to that point.\n      for (let i = 1; i < _buffer.length && (_buffer[i] as number) <= now; i += 2) {\n        last = i;\n      }\n      last && _buffer.splice(0, last + 1);\n    }\n  }\n}\n","import { Subject } from './Subject';\nimport { Subscriber } from './Subscriber';\n\n/**\n * A variant of Subject that only emits a value when it completes. It will emit\n * its latest value to all its observers on completion.\n *\n * @class AsyncSubject<T>\n */\nexport class AsyncSubject<T> extends Subject<T> {\n  private _value: T | null = null;\n  private _hasValue = false;\n  private _isComplete = false;\n\n  /** @internal */\n  protected _checkFinalizedStatuses(subscriber: Subscriber<T>) {\n    const { hasError, _hasValue, _value, thrownError, isStopped } = this;\n    if (hasError) {\n      subscriber.error(thrownError);\n    } else if (isStopped) {\n      _hasValue && subscriber.next(_value!);\n      subscriber.complete();\n    }\n  }\n\n  next(value: T): void {\n    if (!this.isStopped) {\n      this._value = value;\n      this._hasValue = true;\n    }\n  }\n\n  complete(): void {\n    const { _hasValue, _value, _isComplete } = this;\n    if (!_isComplete) {\n      this._isComplete = true;\n      _hasValue && super.next(_value!);\n      super.complete();\n    }\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Subscription } from '../Subscription';\nimport { SchedulerAction } from '../types';\n\n/**\n * A unit of work to be executed in a `scheduler`. An action is typically\n * created from within a {@link SchedulerLike} and an RxJS user does not need to concern\n * themselves about creating and manipulating an Action.\n *\n * ```ts\n * class Action<T> extends Subscription {\n *   new (scheduler: Scheduler, work: (state?: T) => void);\n *   schedule(state?: T, delay: number = 0): Subscription;\n * }\n * ```\n *\n * @class Action<T>\n */\nexport class Action<T> extends Subscription {\n  constructor(scheduler: Scheduler, work: (this: SchedulerAction<T>, state?: T) => void) {\n    super();\n  }\n  /**\n   * Schedules this action on its parent {@link SchedulerLike} for execution. May be passed\n   * some context object, `state`. May happen at some point in the future,\n   * according to the `delay` parameter, if specified.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler.\n   * @return {void}\n   */\n  public schedule(state?: T, delay: number = 0): Subscription {\n    return this;\n  }\n}\n","type SetIntervalFunction = (handler: () => void, timeout?: number, ...args: any[]) => number;\ntype ClearIntervalFunction = (handle: number) => void;\n\ninterface IntervalProvider {\n  setInterval: SetIntervalFunction;\n  clearInterval: ClearIntervalFunction;\n  delegate:\n    | {\n        setInterval: SetIntervalFunction;\n        clearInterval: ClearIntervalFunction;\n      }\n    | undefined;\n}\n\nexport const intervalProvider: IntervalProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  setInterval(...args) {\n    const { delegate } = intervalProvider;\n    return (delegate?.setInterval || setInterval)(...args);\n  },\n  clearInterval(handle) {\n    const { delegate } = intervalProvider;\n    return (delegate?.clearInterval || clearInterval)(handle);\n  },\n  delegate: undefined,\n};\n","import { Action } from './Action';\nimport { SchedulerAction } from '../types';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\nimport { intervalProvider } from './intervalProvider';\nimport { arrRemove } from '../util/arrRemove';\n\nexport class AsyncAction<T> extends Action<T> {\n  public id: any;\n  public state?: T;\n  // @ts-ignore: Property has no initializer and is not definitely assigned\n  public delay: number;\n  protected pending: boolean = false;\n\n  constructor(protected scheduler: AsyncScheduler, protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (this.closed) {\n      return this;\n    }\n\n    // Always replace the current state with the new state.\n    this.state = state;\n\n    const id = this.id;\n    const scheduler = this.scheduler;\n\n    //\n    // Important implementation note:\n    //\n    // Actions only execute once by default, unless rescheduled from within the\n    // scheduled callback. This allows us to implement single and repeat\n    // actions via the same code path, without adding API surface area, as well\n    // as mimic traditional recursion but across asynchronous boundaries.\n    //\n    // However, JS runtimes and timers distinguish between intervals achieved by\n    // serial `setTimeout` calls vs. a single `setInterval` call. An interval of\n    // serial `setTimeout` calls can be individually delayed, which delays\n    // scheduling the next `setTimeout`, and so on. `setInterval` attempts to\n    // guarantee the interval callback will be invoked more precisely to the\n    // interval period, regardless of load.\n    //\n    // Therefore, we use `setInterval` to schedule single and repeat actions.\n    // If the action reschedules itself with the same delay, the interval is not\n    // canceled. If the action doesn't reschedule, or reschedules with a\n    // different delay, the interval will be canceled after scheduled callback\n    // execution.\n    //\n    if (id != null) {\n      this.id = this.recycleAsyncId(scheduler, id, delay);\n    }\n\n    // Set the pending flag indicating that this action has been scheduled, or\n    // has recursively rescheduled itself.\n    this.pending = true;\n\n    this.delay = delay;\n    // If this action has already an async Id, don't request a new one.\n    this.id = this.id || this.requestAsyncId(scheduler, this.id, delay);\n\n    return this;\n  }\n\n  protected requestAsyncId(scheduler: AsyncScheduler, _id?: any, delay: number = 0): any {\n    return intervalProvider.setInterval(scheduler.flush.bind(scheduler, this), delay);\n  }\n\n  protected recycleAsyncId(_scheduler: AsyncScheduler, id: any, delay: number | null = 0): any {\n    // If this action is rescheduled with the same delay time, don't clear the interval id.\n    if (delay != null && this.delay === delay && this.pending === false) {\n      return id;\n    }\n    // Otherwise, if the action's delay time is different from the current delay,\n    // or the action has been rescheduled before it's executed, clear the interval id\n    intervalProvider.clearInterval(id);\n    return undefined;\n  }\n\n  /**\n   * Immediately executes this action and the `work` it contains.\n   * @return {any}\n   */\n  public execute(state: T, delay: number): any {\n    if (this.closed) {\n      return new Error('executing a cancelled action');\n    }\n\n    this.pending = false;\n    const error = this._execute(state, delay);\n    if (error) {\n      return error;\n    } else if (this.pending === false && this.id != null) {\n      // Dequeue if the action didn't reschedule itself. Don't call\n      // unsubscribe(), because the action could reschedule later.\n      // For example:\n      // ```\n      // scheduler.schedule(function doWork(counter) {\n      //   /* ... I'm a busy worker bee ... */\n      //   var originalAction = this;\n      //   /* wait 100ms before rescheduling the action */\n      //   setTimeout(function () {\n      //     originalAction.schedule(counter + 1);\n      //   }, 100);\n      // }, 1000);\n      // ```\n      this.id = this.recycleAsyncId(this.scheduler, this.id, null);\n    }\n  }\n\n  protected _execute(state: T, _delay: number): any {\n    let errored: boolean = false;\n    let errorValue: any;\n    try {\n      this.work(state);\n    } catch (e) {\n      errored = true;\n      errorValue = (!!e && e) || new Error(e);\n    }\n    if (errored) {\n      this.unsubscribe();\n      return errorValue;\n    }\n  }\n\n  unsubscribe() {\n    if (!this.closed) {\n      const { id, scheduler } = this;\n      const { actions } = scheduler;\n\n      this.work = this.state = this.scheduler = null!;\n      this.pending = false;\n\n      arrRemove(actions, this);\n      if (id != null) {\n        this.id = this.recycleAsyncId(scheduler, id, null);\n      }\n\n      this.delay = null!;\n      super.unsubscribe();\n    }\n  }\n}\n","let nextHandle = 1;\n// The promise needs to be created lazily otherwise it won't be patched by Zones\nlet resolved: Promise<any>;\nconst activeHandles: { [key: number]: any } = {};\n\n/**\n * Finds the handle in the list of active handles, and removes it.\n * Returns `true` if found, `false` otherwise. Used both to clear\n * Immediate scheduled tasks, and to identify if a task should be scheduled.\n */\nfunction findAndClearHandle(handle: number): boolean {\n  if (handle in activeHandles) {\n    delete activeHandles[handle];\n    return true;\n  }\n  return false;\n}\n\n/**\n * Helper functions to schedule and unschedule microtasks.\n */\nexport const Immediate = {\n  setImmediate(cb: () => void): number {\n    const handle = nextHandle++;\n    activeHandles[handle] = true;\n    if (!resolved) {\n      resolved = Promise.resolve();\n    }\n    resolved.then(() => findAndClearHandle(handle) && cb());\n    return handle;\n  },\n\n  clearImmediate(handle: number): void {\n    findAndClearHandle(handle);\n  },\n};\n\n/**\n * Used for internal testing purposes only. Do not export from library.\n */\nexport const TestTools = {\n  pending() {\n    return Object.keys(activeHandles).length;\n  }\n};\n","import { Immediate } from '../util/Immediate';\nconst { setImmediate, clearImmediate } = Immediate;\n\ntype SetImmediateFunction = (handler: () => void, ...args: any[]) => number;\ntype ClearImmediateFunction = (handle: number) => void;\n\ninterface ImmediateProvider {\n  setImmediate: SetImmediateFunction;\n  clearImmediate: ClearImmediateFunction;\n  delegate:\n    | {\n        setImmediate: SetImmediateFunction;\n        clearImmediate: ClearImmediateFunction;\n      }\n    | undefined;\n}\n\nexport const immediateProvider: ImmediateProvider = {\n  // When accessing the delegate, use the variable rather than `this` so that\n  // the functions can be called without being bound to the provider.\n  setImmediate(...args) {\n    const { delegate } = immediateProvider;\n    return (delegate?.setImmediate || setImmediate)(...args);\n  },\n  clearImmediate(handle) {\n    const { delegate } = immediateProvider;\n    return (delegate?.clearImmediate || clearImmediate)(handle);\n  },\n  delegate: undefined,\n};\n","import { AsyncAction } from './AsyncAction';\nimport { AsapScheduler } from './AsapScheduler';\nimport { SchedulerAction } from '../types';\nimport { immediateProvider } from './immediateProvider';\n\nexport class AsapAction<T> extends AsyncAction<T> {\n  constructor(protected scheduler: AsapScheduler, protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If a microtask has already been scheduled, don't schedule another\n    // one. If a microtask hasn't been scheduled yet, schedule one now. Return\n    // the current scheduled microtask id.\n    return scheduler._scheduled || (scheduler._scheduled = immediateProvider.setImmediate(scheduler.flush.bind(scheduler, undefined)));\n  }\n  protected recycleAsyncId(scheduler: AsapScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested microtask and\n    // set the scheduled flag to undefined so the next AsapAction will schedule\n    // its own.\n    if (scheduler.actions.length === 0) {\n      immediateProvider.clearImmediate(id);\n      scheduler._scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { Action } from './scheduler/Action';\nimport { Subscription } from './Subscription';\nimport { SchedulerLike, SchedulerAction } from './types';\nimport { dateTimestampProvider } from './scheduler/dateTimestampProvider';\n\n/**\n * An execution context and a data structure to order tasks and schedule their\n * execution. Provides a notion of (potentially virtual) time, through the\n * `now()` getter method.\n *\n * Each unit of work in a Scheduler is called an `Action`.\n *\n * ```ts\n * class Scheduler {\n *   now(): number;\n *   schedule(work, delay?, state?): Subscription;\n * }\n * ```\n *\n * @class Scheduler\n * @deprecated Scheduler is an internal implementation detail of RxJS, and\n * should not be used directly. Rather, create your own class and implement\n * {@link SchedulerLike}. Will be made internal in v8.\n */\nexport class Scheduler implements SchedulerLike {\n  public static now: () => number = dateTimestampProvider.now;\n\n  constructor(private schedulerActionCtor: typeof Action, now: () => number = Scheduler.now) {\n    this.now = now;\n  }\n\n  /**\n   * A getter method that returns a number representing the current time\n   * (at the time this function was called) according to the scheduler's own\n   * internal clock.\n   * @return {number} A number that represents the current time. May or may not\n   * have a relation to wall-clock time. May or may not refer to a time unit\n   * (e.g. milliseconds).\n   */\n  public now: () => number;\n\n  /**\n   * Schedules a function, `work`, for execution. May happen at some point in\n   * the future, according to the `delay` parameter, if specified. May be passed\n   * some context object, `state`, which will be passed to the `work` function.\n   *\n   * The given arguments will be processed an stored as an Action object in a\n   * queue of actions.\n   *\n   * @param {function(state: ?T): ?Subscription} work A function representing a\n   * task, or some unit of work to be executed by the Scheduler.\n   * @param {number} [delay] Time to wait before executing the work, where the\n   * time unit is implicit and defined by the Scheduler itself.\n   * @param {T} [state] Some contextual data that the `work` function uses when\n   * called by the Scheduler.\n   * @return {Subscription} A subscription in order to be able to unsubscribe\n   * the scheduled work.\n   */\n  public schedule<T>(work: (this: SchedulerAction<T>, state?: T) => void, delay: number = 0, state?: T): Subscription {\n    return new this.schedulerActionCtor<T>(this, work).schedule(state, delay);\n  }\n}\n","import { Scheduler } from '../Scheduler';\nimport { Action } from './Action';\nimport { AsyncAction } from './AsyncAction';\n\nexport class AsyncScheduler extends Scheduler {\n  public actions: Array<AsyncAction<any>> = [];\n  /**\n   * A flag to indicate whether the Scheduler is currently executing a batch of\n   * queued actions.\n   * @type {boolean}\n   * @internal\n   */\n  public _active: boolean = false;\n  /**\n   * An internal ID used to track the latest asynchronous task such as those\n   * coming from `setTimeout`, `setInterval`, `requestAnimationFrame`, and\n   * others.\n   * @type {any}\n   * @internal\n   */\n  public _scheduled: any = undefined;\n\n  constructor(SchedulerAction: typeof Action, now: () => number = Scheduler.now) {\n    super(SchedulerAction, now);\n  }\n\n  public flush(action: AsyncAction<any>): void {\n    const { actions } = this;\n\n    if (this._active) {\n      actions.push(action);\n      return;\n    }\n\n    let error: any;\n    this._active = true;\n\n    do {\n      if ((error = action.execute(action.state, action.delay))) {\n        break;\n      }\n    } while ((action = actions.shift()!)); // exhaust the scheduler queue\n\n    this._active = false;\n\n    if (error) {\n      while ((action = actions.shift()!)) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AsapScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n    this._active = true;\n    this._scheduled = undefined;\n\n    const { actions } = this;\n    let error: any;\n    let index = -1;\n    action = action || actions.shift()!;\n    const count = actions.length;\n\n    do {\n      if ((error = action.execute(action.state, action.delay))) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this._active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AsapAction } from './AsapAction';\nimport { AsapScheduler } from './AsapScheduler';\n\n/**\n *\n * Asap Scheduler\n *\n * <span class=\"informal\">Perform task as fast as it can be performed asynchronously</span>\n *\n * `asap` scheduler behaves the same as {@link asyncScheduler} scheduler when you use it to delay task\n * in time. If however you set delay to `0`, `asap` will wait for current synchronously executing\n * code to end and then it will try to execute given task as fast as possible.\n *\n * `asap` scheduler will do its best to minimize time between end of currently executing code\n * and start of scheduled task. This makes it best candidate for performing so called \"deferring\".\n * Traditionally this was achieved by calling `setTimeout(deferredTask, 0)`, but that technique involves\n * some (although minimal) unwanted delay.\n *\n * Note that using `asap` scheduler does not necessarily mean that your task will be first to process\n * after currently executing code. In particular, if some task was also scheduled with `asap` before,\n * that task will execute first. That being said, if you need to schedule task asynchronously, but\n * as soon as possible, `asap` scheduler is your best bet.\n *\n * ## Example\n * Compare async and asap scheduler<\n * ```ts\n * import { asapScheduler, asyncScheduler } from 'rxjs';\n *\n * asyncScheduler.schedule(() => console.log('async')); // scheduling 'async' first...\n * asapScheduler.schedule(() => console.log('asap'));\n *\n * // Logs:\n * // \"asap\"\n * // \"async\"\n * // ... but 'asap' goes first!\n * ```\n */\n\nexport const asapScheduler = new AsapScheduler(AsapAction);\n\n/**\n * @deprecated Renamed to {@link asapScheduler}. Will be removed in v8.\n */\nexport const asap = asapScheduler;\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\n/**\n *\n * Async Scheduler\n *\n * <span class=\"informal\">Schedule task as if you used setTimeout(task, duration)</span>\n *\n * `async` scheduler schedules tasks asynchronously, by putting them on the JavaScript\n * event loop queue. It is best used to delay tasks in time or to schedule tasks repeating\n * in intervals.\n *\n * If you just want to \"defer\" task, that is to perform it right after currently\n * executing synchronous code ends (commonly achieved by `setTimeout(deferredTask, 0)`),\n * better choice will be the {@link asapScheduler} scheduler.\n *\n * ## Examples\n * Use async scheduler to delay task\n * ```ts\n * import { asyncScheduler } from 'rxjs';\n *\n * const task = () => console.log('it works!');\n *\n * asyncScheduler.schedule(task, 2000);\n *\n * // After 2 seconds logs:\n * // \"it works!\"\n * ```\n *\n * Use async scheduler to repeat task in intervals\n * ```ts\n * import { asyncScheduler } from 'rxjs';\n *\n * function task(state) {\n *   console.log(state);\n *   this.schedule(state + 1, 1000); // `this` references currently executing Action,\n *                                   // which we reschedule with new state and delay\n * }\n *\n * asyncScheduler.schedule(task, 3000, 0);\n *\n * // Logs:\n * // 0 after 3s\n * // 1 after 4s\n * // 2 after 5s\n * // 3 after 6s\n * ```\n */\n\nexport const asyncScheduler = new AsyncScheduler(AsyncAction);\n\n/**\n * @deprecated Renamed to {@link asyncScheduler}. Will be removed in v8.\n */\nexport const async = asyncScheduler;\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { QueueScheduler } from './QueueScheduler';\nimport { SchedulerAction } from '../types';\n\nexport class QueueAction<T> extends AsyncAction<T> {\n\n  constructor(protected scheduler: QueueScheduler,\n              protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (delay > 0) {\n      return super.schedule(state, delay);\n    }\n    this.delay = delay;\n    this.state = state;\n    this.scheduler.flush(this);\n    return this;\n  }\n\n  public execute(state: T, delay: number): any {\n    return (delay > 0 || this.closed) ?\n      super.execute(state, delay) :\n      this._execute(state, delay) ;\n  }\n\n  protected requestAsyncId(scheduler: QueueScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n\n    if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Otherwise flush the scheduler starting with this action.\n    return scheduler.flush(this);\n  }\n}\n","import { AsyncScheduler } from './AsyncScheduler';\n\nexport class QueueScheduler extends AsyncScheduler {\n}\n","import { QueueAction } from './QueueAction';\nimport { QueueScheduler } from './QueueScheduler';\n\n/**\n *\n * Queue Scheduler\n *\n * <span class=\"informal\">Put every next task on a queue, instead of executing it immediately</span>\n *\n * `queue` scheduler, when used with delay, behaves the same as {@link asyncScheduler} scheduler.\n *\n * When used without delay, it schedules given task synchronously - executes it right when\n * it is scheduled. However when called recursively, that is when inside the scheduled task,\n * another task is scheduled with queue scheduler, instead of executing immediately as well,\n * that task will be put on a queue and wait for current one to finish.\n *\n * This means that when you execute task with `queue` scheduler, you are sure it will end\n * before any other task scheduled with that scheduler will start.\n *\n * ## Examples\n * Schedule recursively first, then do something\n * ```ts\n * import { queueScheduler } from 'rxjs';\n *\n * queueScheduler.schedule(() => {\n *   queueScheduler.schedule(() => console.log('second')); // will not happen now, but will be put on a queue\n *\n *   console.log('first');\n * });\n *\n * // Logs:\n * // \"first\"\n * // \"second\"\n * ```\n *\n * Reschedule itself recursively\n * ```ts\n * import { queueScheduler } from 'rxjs';\n *\n * queueScheduler.schedule(function(state) {\n *   if (state !== 0) {\n *     console.log('before', state);\n *     this.schedule(state - 1); // `this` references currently executing Action,\n *                               // which we reschedule with new state\n *     console.log('after', state);\n *   }\n * }, 0, 3);\n *\n * // In scheduler that runs recursively, you would expect:\n * // \"before\", 3\n * // \"before\", 2\n * // \"before\", 1\n * // \"after\", 1\n * // \"after\", 2\n * // \"after\", 3\n *\n * // But with queue it logs:\n * // \"before\", 3\n * // \"after\", 3\n * // \"before\", 2\n * // \"after\", 2\n * // \"before\", 1\n * // \"after\", 1\n * ```\n */\n\nexport const queueScheduler = new QueueScheduler(QueueAction);\n\n/**\n * @deprecated Renamed to {@link queueScheduler}. Will be removed in v8.\n */\nexport const queue = queueScheduler;\n","import { AsyncAction } from './AsyncAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\nimport { SchedulerAction } from '../types';\nimport { animationFrameProvider } from './animationFrameProvider';\n\nexport class AnimationFrameAction<T> extends AsyncAction<T> {\n  constructor(protected scheduler: AnimationFrameScheduler, protected work: (this: SchedulerAction<T>, state?: T) => void) {\n    super(scheduler, work);\n  }\n\n  protected requestAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay is greater than 0, request as an async action.\n    if (delay !== null && delay > 0) {\n      return super.requestAsyncId(scheduler, id, delay);\n    }\n    // Push the action to the end of the scheduler queue.\n    scheduler.actions.push(this);\n    // If an animation frame has already been requested, don't request another\n    // one. If an animation frame hasn't been requested yet, request one. Return\n    // the current animation frame request id.\n    return scheduler._scheduled || (scheduler._scheduled = animationFrameProvider.requestAnimationFrame(() => scheduler.flush(undefined)));\n  }\n  protected recycleAsyncId(scheduler: AnimationFrameScheduler, id?: any, delay: number = 0): any {\n    // If delay exists and is greater than 0, or if the delay is null (the\n    // action wasn't rescheduled) but was originally scheduled as an async\n    // action, then recycle as an async action.\n    if ((delay != null && delay > 0) || (delay == null && this.delay > 0)) {\n      return super.recycleAsyncId(scheduler, id, delay);\n    }\n    // If the scheduler queue is empty, cancel the requested animation frame and\n    // set the scheduled flag to undefined so the next AnimationFrameAction will\n    // request its own.\n    if (scheduler.actions.length === 0) {\n      animationFrameProvider.cancelAnimationFrame(id);\n      scheduler._scheduled = undefined;\n    }\n    // Return undefined so the action knows to request a new async id if it's rescheduled.\n    return undefined;\n  }\n}\n","import { AsyncAction } from './AsyncAction';\nimport { AsyncScheduler } from './AsyncScheduler';\n\nexport class AnimationFrameScheduler extends AsyncScheduler {\n  public flush(action?: AsyncAction<any>): void {\n    this._active = true;\n    this._scheduled = undefined;\n\n    const { actions } = this;\n    let error: any;\n    let index = -1;\n    action = action || actions.shift()!;\n    const count = actions.length;\n\n    do {\n      if ((error = action.execute(action.state, action.delay))) {\n        break;\n      }\n    } while (++index < count && (action = actions.shift()));\n\n    this._active = false;\n\n    if (error) {\n      while (++index < count && (action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n","import { AnimationFrameAction } from './AnimationFrameAction';\nimport { AnimationFrameScheduler } from './AnimationFrameScheduler';\n\n/**\n *\n * Animation Frame Scheduler\n *\n * <span class=\"informal\">Perform task when `window.requestAnimationFrame` would fire</span>\n *\n * When `animationFrame` scheduler is used with delay, it will fall back to {@link asyncScheduler} scheduler\n * behaviour.\n *\n * Without delay, `animationFrame` scheduler can be used to create smooth browser animations.\n * It makes sure scheduled task will happen just before next browser content repaint,\n * thus performing animations as efficiently as possible.\n *\n * ## Example\n * Schedule div height animation\n * ```ts\n * // html: <div style=\"background: #0ff;\"></div>\n * import { animationFrameScheduler } from 'rxjs';\n *\n * const div = document.querySelector('div');\n *\n * animationFrameScheduler.schedule(function(height) {\n *   div.style.height = height + \"px\";\n *\n *   this.schedule(height + 1);  // `this` references currently executing Action,\n *                               // which we reschedule with new state\n * }, 0, 0);\n *\n * // You will see a div element growing in height\n * ```\n */\n\nexport const animationFrameScheduler = new AnimationFrameScheduler(AnimationFrameAction);\n\n/**\n * @deprecated Renamed to {@link animationFrameScheduler}. Will be removed in v8.\n */\nexport const animationFrame = animationFrameScheduler;\n","import { AsyncAction } from './AsyncAction';\nimport { Subscription } from '../Subscription';\nimport { AsyncScheduler } from './AsyncScheduler';\nimport { SchedulerAction } from '../types';\n\nexport class VirtualTimeScheduler extends AsyncScheduler {\n  /** @deprecated Not used in VirtualTimeScheduler directly. Will be removed in v8. */\n  static frameTimeFactor = 10;\n\n  /**\n   * The current frame for the state of the virtual scheduler instance. The the difference\n   * between two \"frames\" is synonymous with the passage of \"virtual time units\". So if\n   * you record `scheduler.frame` to be `1`, then later, observe `scheduler.frame` to be at `11`,\n   * that means `10` virtual time units have passed.\n   */\n  public frame: number = 0;\n\n  /**\n   * Used internally to examine the current virtual action index being processed.\n   * @deprecated Internal implementation detail, do not use directly. Will be made internal in v8.\n   */\n  public index: number = -1;\n\n  /**\n   * This creates an instance of a `VirtualTimeScheduler`. Experts only. The signature of\n   * this constructor is likely to change in the long run.\n   *\n   * @param schedulerActionCtor The type of Action to initialize when initializing actions during scheduling.\n   * @param maxFrames The maximum number of frames to process before stopping. Used to prevent endless flush cycles.\n   */\n  constructor(schedulerActionCtor: typeof AsyncAction = VirtualAction as any, public maxFrames: number = Infinity) {\n    super(schedulerActionCtor, () => this.frame);\n  }\n\n  /**\n   * Prompt the Scheduler to execute all of its queued actions, therefore\n   * clearing its queue.\n   * @return {void}\n   */\n  public flush(): void {\n    const { actions, maxFrames } = this;\n    let error: any;\n    let action: AsyncAction<any> | undefined;\n\n    while ((action = actions[0]) && action.delay <= maxFrames) {\n      actions.shift();\n      this.frame = action.delay;\n\n      if ((error = action.execute(action.state, action.delay))) {\n        break;\n      }\n    }\n\n    if (error) {\n      while ((action = actions.shift())) {\n        action.unsubscribe();\n      }\n      throw error;\n    }\n  }\n}\n\nexport class VirtualAction<T> extends AsyncAction<T> {\n  protected active: boolean = true;\n\n  constructor(\n    protected scheduler: VirtualTimeScheduler,\n    protected work: (this: SchedulerAction<T>, state?: T) => void,\n    protected index: number = (scheduler.index += 1)\n  ) {\n    super(scheduler, work);\n    this.index = scheduler.index = index;\n  }\n\n  public schedule(state?: T, delay: number = 0): Subscription {\n    if (Number.isFinite(delay)) {\n      if (!this.id) {\n        return super.schedule(state, delay);\n      }\n      this.active = false;\n      // If an action is rescheduled, we save allocations by mutating its state,\n      // pushing it to the end of the scheduler queue, and recycling the action.\n      // But since the VirtualTimeScheduler is used for testing, VirtualActions\n      // must be immutable so they can be inspected later.\n      const action = new VirtualAction(this.scheduler, this.work);\n      this.add(action);\n      return action.schedule(state, delay);\n    } else {\n      // If someone schedules something with Infinity, it'll never happen. So we\n      // don't even schedule it.\n      return Subscription.EMPTY;\n    }\n  }\n\n  protected requestAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    this.delay = scheduler.frame + delay;\n    const { actions } = scheduler;\n    actions.push(this);\n    (actions as Array<VirtualAction<T>>).sort(VirtualAction.sortActions);\n    return true;\n  }\n\n  protected recycleAsyncId(scheduler: VirtualTimeScheduler, id?: any, delay: number = 0): any {\n    return undefined;\n  }\n\n  protected _execute(state: T, delay: number): any {\n    if (this.active === true) {\n      return super._execute(state, delay);\n    }\n  }\n\n  private static sortActions<T>(a: VirtualAction<T>, b: VirtualAction<T>) {\n    if (a.delay === b.delay) {\n      if (a.index === b.index) {\n        return 0;\n      } else if (a.index > b.index) {\n        return 1;\n      } else {\n        return -1;\n      }\n    } else if (a.delay > b.delay) {\n      return 1;\n    } else {\n      return -1;\n    }\n  }\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\n/**\n * The same Observable instance returned by any call to {@link empty} without a\n * `scheduler`. It is preferable to use this over `empty()`.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.</span>\n *\n * ![](empty.png)\n *\n * ## Examples\n *\n * ### Log complete notification\n *\n * ```ts\n * import { EMPTY } from 'rxjs';\n *\n * EMPTY.subscribe({\n *   next: () => console.log('Next'),\n *   complete: () => console.log('Complete!')\n * });\n *\n * // Outputs\n * // Complete!\n * ```\n */\nexport const EMPTY = new Observable<never>((subscriber) => subscriber.complete());\n\n/**\n * Creates an Observable that emits no items to the Observer and immediately\n * emits a complete notification.\n *\n * <span class=\"informal\">Just emits 'complete', and nothing else.</span>\n *\n * ![](empty.png)\n *\n * This static operator is useful for creating a simple Observable that only\n * emits the complete notification. It can be used for composing with other\n * Observables, such as in a {@link mergeMap}.\n *\n * ## Examples\n *\n * ### Emit the number 7, then complete\n *\n * ```ts\n * import { empty } from 'rxjs';\n * import { startWith } from 'rxjs/operators';\n *\n * const result = empty().pipe(startWith(7));\n * result.subscribe(x => console.log(x));\n *\n * // Outputs\n * // 7\n * ```\n *\n * ### Map and flatten only odd numbers to the sequence 'a', 'b', 'c'\n *\n * ```ts\n * import { empty, interval, of } from 'rxjs';\n * import { mergeMap } from 'rxjs/operators';\n *\n * const interval$ = interval(1000);\n * const result = interval$.pipe(\n *   mergeMap(x => x % 2 === 1 ? of('a', 'b', 'c') : empty()),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following to the console:\n * // x is equal to the count on the interval, e.g. (0, 1, 2, 3, ...)\n * // x will occur every 1000ms\n * // if x % 2 is equal to 1, print a, b, c (each on its own)\n * // if x % 2 is not equal to 1, nothing will be output\n * ```\n *\n * @see {@link Observable}\n * @see {@link never}\n * @see {@link of}\n * @see {@link throwError}\n *\n * @param scheduler A {@link SchedulerLike} to use for scheduling\n * the emission of the complete notification.\n * @return An \"empty\" Observable: emits only the complete\n * notification.\n * @deprecated Replaced with the {@link EMPTY} constant or {@link scheduled} (e.g. `scheduled([], scheduler)`). Will be removed in v8.\n */\nexport function empty(scheduler?: SchedulerLike) {\n  return scheduler ? emptyScheduled(scheduler) : EMPTY;\n}\n\nfunction emptyScheduled(scheduler: SchedulerLike) {\n  return new Observable<never>((subscriber) => scheduler.schedule(() => subscriber.complete()));\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\nexport function scheduleArray<T>(input: ArrayLike<T>, scheduler: SchedulerLike) {\n  return new Observable<T>((subscriber) => {\n    // The current array index.\n    let i = 0;\n    // Start iterating over the array like on a schedule.\n    return scheduler.schedule(function () {\n      if (i === input.length) {\n        // If we have hit the end of the array like in the\n        // previous job, we can complete.\n        subscriber.complete();\n      } else {\n        // Otherwise let's next the value at the current index,\n        // then increment our index.\n        subscriber.next(input[i++]);\n        // If the last emission didn't cause us to close the subscriber\n        // (via take or some side effect), reschedule the job and we'll\n        // make another pass.\n        if (!subscriber.closed) {\n          this.schedule();\n        }\n      }\n    });\n  });\n}\n","export const isArrayLike = (<T>(x: any): x is ArrayLike<T> => x && typeof x.length === 'number' && typeof x !== 'function');","import { isFunction } from \"./isFunction\";\n\n/**\n * Tests to see if the object is \"thennable\".\n * @param value the object to test\n */\nexport function isPromise(value: any): value is PromiseLike<any> {\n  return isFunction(value?.then);\n}\n","import { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { InteropObservable, SchedulerLike, Subscribable } from '../types';\n\nexport function scheduleObservable<T>(input: InteropObservable<T>, scheduler: SchedulerLike) {\n  return new Observable<T>(subscriber => {\n    const sub = new Subscription();\n    sub.add(scheduler.schedule(() => {\n      const observable: Subscribable<T> = (input as any)[Symbol_observable]();\n      sub.add(observable.subscribe({\n        next(value) { sub.add(scheduler.schedule(() => subscriber.next(value))); },\n        error(err) { sub.add(scheduler.schedule(() => subscriber.error(err))); },\n        complete() { sub.add(scheduler.schedule(() => subscriber.complete())); },\n      }));\n    }));\n    return sub;\n  });\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\n\nexport function schedulePromise<T>(input: PromiseLike<T>, scheduler: SchedulerLike) {\n  return new Observable<T>((subscriber) => {\n    return scheduler.schedule(() =>\n      input.then(\n        (value) => {\n          subscriber.add(\n            scheduler.schedule(() => {\n              subscriber.next(value);\n              subscriber.add(scheduler.schedule(() => subscriber.complete()));\n            })\n          );\n        },\n        (err) => {\n          subscriber.add(scheduler.schedule(() => subscriber.error(err)));\n        }\n      )\n    );\n  });\n}\n","export function getSymbolIterator(): symbol {\n  if (typeof Symbol !== 'function' || !Symbol.iterator) {\n    return '@@iterator' as any;\n  }\n\n  return Symbol.iterator;\n}\n\nexport const iterator = getSymbolIterator();\n","import { Subscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { SchedulerAction, SchedulerLike } from '../types';\n\nexport function caughtSchedule(\n  subscriber: Subscriber<any>,\n  scheduler: SchedulerLike,\n  execute: (this: SchedulerAction<any>) => void,\n  delay = 0\n): Subscription {\n  const subscription = scheduler.schedule(function () {\n    try {\n      execute.call(this);\n    } catch (err) {\n      subscriber.error(err);\n    }\n  }, delay);\n  subscriber.add(subscription);\n  return subscription;\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from '../util/isFunction';\nimport { caughtSchedule } from '../util/caughtSchedule';\n\n/**\n * Used in {@link scheduled} to create an observable from an Iterable.\n * @param input The iterable to create an observable from\n * @param scheduler The scheduler to use\n */\nexport function scheduleIterable<T>(input: Iterable<T>, scheduler: SchedulerLike) {\n  return new Observable<T>((subscriber) => {\n    let iterator: Iterator<T, T>;\n\n    // Schedule the initial creation of the iterator from\n    // the iterable. This is so the code in the iterable is\n    // not called until the scheduled job fires.\n    subscriber.add(\n      scheduler.schedule(() => {\n        // Create the iterator.\n        iterator = (input as any)[Symbol_iterator]();\n\n        // Schedule the first iteration and emission.\n        caughtSchedule(subscriber, scheduler, function () {\n          // Pull the value out of the iterator\n          const { value, done } = iterator.next();\n          if (done) {\n            // If it is \"done\" we just complete. This mimics the\n            // behavior of JavaScript's `for..of` consumption of\n            // iterables, which will not emit the value from an iterator\n            // result of `{ done: true: value: 'here' }`.\n            subscriber.complete();\n          } else {\n            // The iterable is not done, emit the value.\n            subscriber.next(value);\n            // Reschedule. This will cause this function to be\n            // called again on the same scheduled delay.\n            this.schedule();\n          }\n        });\n      })\n    );\n\n    // During teardown, if we see this iterator has a `return` method,\n    // then we know it is a Generator, and not just an Iterator. So we call\n    // the `return()` function. This will ensure that any `finally { }` blocks\n    // inside of the generator we can hit will be hit properly.\n    return () => isFunction(iterator?.return) && iterator.return();\n  });\n}\n","import { SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\n\nexport function scheduleAsyncIterable<T>(input: AsyncIterable<T>, scheduler: SchedulerLike) {\n  if (!input) {\n    throw new Error('Iterable cannot be null');\n  }\n  return new Observable<T>(subscriber => {\n    const sub = new Subscription();\n    sub.add(\n      scheduler.schedule(() => {\n        const iterator = input[Symbol.asyncIterator]();\n        sub.add(scheduler.schedule(function () {\n          iterator.next().then(result => {\n            if (result.done) {\n              subscriber.complete();\n            } else {\n              subscriber.next(result.value);\n              this.schedule();\n            }\n          });\n        }));\n      })\n    );\n    return sub;\n  });\n}\n","import { InteropObservable } from '../types';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { isFunction } from './isFunction';\n\n/** Identifies an input as being Observable (but not necessary an Rx Observable) */\nexport function isInteropObservable(input: any): input is InteropObservable<any> {\n  return isFunction(input[Symbol_observable]);\n}\n","import { iterator as Symbol_iterator } from '../symbol/iterator';\nimport { isFunction } from './isFunction';\n\n/** Identifies an input as being an Iterable */\nexport function isIterable(input: any): input is Iterable<any> {\n  return isFunction(input?.[Symbol_iterator]);\n}\n","import { isFunction } from './isFunction';\n\nexport function isAsyncIterable<T>(obj: any): obj is AsyncIterable<T> {\n  return Symbol.asyncIterator && isFunction(obj?.[Symbol.asyncIterator]);\n}\n","/**\n * Creates the TypeError to throw if an invalid object is passed to `from` or `scheduled`.\n * @param input The object that was passed.\n */\nexport function createInvalidObservableTypeError(input: any) {\n  // TODO: We should create error codes that can be looked up, so this can be less verbose.\n  return new TypeError(\n    `You provided ${\n      input !== null && typeof input === 'object' ? 'an invalid object' : `'${input}'`\n    } where a stream was expected. You can provide an Observable, Promise, ReadableStream, Array, AsyncIterable, or Iterable.`\n  );\n}\n","import { ReadableStreamLike } from '../types';\nimport { isFunction } from './isFunction';\n\nexport async function* readableStreamLikeToAsyncGenerator<T>(readableStream: ReadableStreamLike<T>): AsyncGenerator<T> {\n  const reader = readableStream.getReader();\n  try {\n    while (true) {\n      const { value, done } = await reader.read();\n      if (done) {\n        return;\n      }\n      yield value!;\n    }\n  } finally {\n    reader.releaseLock();\n  }\n}\n\nexport function isReadableStreamLike<T>(obj: any): obj is ReadableStreamLike<T> {\n  // We don't want to use instanceof checks because they would return\n  // false for instances from another Realm, like an <iframe>.\n  return isFunction(obj?.getReader);\n}\n","import { SchedulerLike, ReadableStreamLike } from '../types';\nimport { Observable } from '../Observable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\n\nexport function scheduleReadableStreamLike<T>(input: ReadableStreamLike<T>, scheduler: SchedulerLike): Observable<T> {\n  return scheduleAsyncIterable(readableStreamLikeToAsyncGenerator(input), scheduler);\n}\n","import { scheduleObservable } from './scheduleObservable';\nimport { schedulePromise } from './schedulePromise';\nimport { scheduleArray } from './scheduleArray';\nimport { scheduleIterable } from './scheduleIterable';\nimport { scheduleAsyncIterable } from './scheduleAsyncIterable';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isPromise } from '../util/isPromise';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isIterable } from '../util/isIterable';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isReadableStreamLike } from '../util/isReadableStreamLike';\nimport { scheduleReadableStreamLike } from './scheduleReadableStreamLike';\n\n/**\n * Converts from a common {@link ObservableInput} type to an observable where subscription and emissions\n * are scheduled on the provided scheduler.\n *\n * @see {@link from}\n * @see {@link of}\n *\n * @param input The observable, array, promise, iterable, etc you would like to schedule\n * @param scheduler The scheduler to use to schedule the subscription and emissions from\n * the returned observable.\n */\nexport function scheduled<T>(input: ObservableInput<T>, scheduler: SchedulerLike): Observable<T> {\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return scheduleObservable(input, scheduler);\n    }\n    if (isArrayLike(input)) {\n      return scheduleArray(input, scheduler);\n    }\n    if (isPromise(input)) {\n      return schedulePromise(input, scheduler);\n    }\n    if (isAsyncIterable(input)) {\n      return scheduleAsyncIterable(input, scheduler);\n    }\n    if (isIterable(input)) {\n      return scheduleIterable(input, scheduler);\n    }\n    if (isReadableStreamLike(input)) {\n      return scheduleReadableStreamLike(input, scheduler);\n    }\n  }\n  throw createInvalidObservableTypeError(input);\n}\n","// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","import { isArrayLike } from '../util/isArrayLike';\nimport { isPromise } from '../util/isPromise';\nimport { observable as Symbol_observable } from '../symbol/observable';\nimport { Subscriber } from '../Subscriber';\n\nimport { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike, ObservedValueOf, ReadableStreamLike } from '../types';\nimport { scheduled } from '../scheduled/scheduled';\nimport { isFunction } from '../util/isFunction';\nimport { reportUnhandledError } from '../util/reportUnhandledError';\nimport { isInteropObservable } from '../util/isInteropObservable';\nimport { isAsyncIterable } from '../util/isAsyncIterable';\nimport { createInvalidObservableTypeError } from '../util/throwUnobservableError';\nimport { isIterable } from '../util/isIterable';\nimport { isReadableStreamLike, readableStreamLikeToAsyncGenerator } from '../util/isReadableStreamLike';\n\nexport function from<O extends ObservableInput<any>>(input: O): Observable<ObservedValueOf<O>>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function from<O extends ObservableInput<any>>(input: O, scheduler: SchedulerLike): Observable<ObservedValueOf<O>>;\n\n/**\n * Creates an Observable from an Array, an array-like object, a Promise, an iterable object, or an Observable-like object.\n *\n * <span class=\"informal\">Converts almost anything to an Observable.</span>\n *\n * ![](from.png)\n *\n * `from` converts various other objects and data types into Observables. It also converts a Promise, an array-like, or an\n * <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Iteration_protocols#iterable\" target=\"_blank\">iterable</a>\n * object into an Observable that emits the items in that promise, array, or iterable. A String, in this context, is treated\n * as an array of characters. Observable-like objects (contains a function named with the ES2015 Symbol for Observable) can also be\n * converted through this operator.\n *\n * ## Examples\n *\n * ### Converts an array to an Observable\n *\n * ```ts\n * import { from } from 'rxjs';\n *\n * const array = [10, 20, 30];\n * const result = from(array);\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 10\n * // 20\n * // 30\n * ```\n *\n * ---\n *\n * ### Convert an infinite iterable (from a generator) to an Observable\n *\n * ```ts\n * import { from } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * function* generateDoubles(seed) {\n *    let i = seed;\n *    while (true) {\n *      yield i;\n *      i = 2 * i; // double it\n *    }\n * }\n *\n * const iterator = generateDoubles(3);\n * const result = from(iterator).pipe(take(10));\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 3\n * // 6\n * // 12\n * // 24\n * // 48\n * // 96\n * // 192\n * // 384\n * // 768\n * // 1536\n * ```\n *\n * ---\n *\n * ### With async scheduler\n *\n * ```ts\n * import { from, asyncScheduler } from 'rxjs';\n *\n * console.log('start');\n *\n * const array = [10, 20, 30];\n * const result = from(array, asyncScheduler);\n *\n * result.subscribe(x => console.log(x));\n *\n * console.log('end');\n *\n * // Logs:\n * // start\n * // end\n * // 10\n * // 20\n * // 30\n * ```\n *\n * @see {@link fromEvent}\n * @see {@link fromEventPattern}\n *\n * @param {ObservableInput<T>} A subscription object, a Promise, an Observable-like,\n * an Array, an iterable, or an array-like object to be converted.\n * @param {SchedulerLike} An optional {@link SchedulerLike} on which to schedule the emission of values.\n * @return {Observable<T>}\n */\nexport function from<T>(input: ObservableInput<T>, scheduler?: SchedulerLike): Observable<T> {\n  return scheduler ? scheduled(input, scheduler) : innerFrom(input);\n}\n\n// TODO: Use this throughout the library, rather than the `from` above, to avoid\n// the unnecessary scheduling check and reduce bundled sizes of operators that use `from`.\n// TODO: Eventually, this just becomes `from`, as we don't have the deprecated scheduled path anymore.\nexport function innerFrom<T>(input: ObservableInput<T>): Observable<T> {\n  if (input instanceof Observable) {\n    return input;\n  }\n  if (input != null) {\n    if (isInteropObservable(input)) {\n      return fromInteropObservable(input);\n    }\n    if (isArrayLike(input)) {\n      return fromArrayLike(input);\n    }\n    if (isPromise(input)) {\n      return fromPromise(input);\n    }\n    if (isAsyncIterable(input)) {\n      return fromAsyncIterable(input);\n    }\n    if (isIterable(input)) {\n      return fromIterable(input);\n    }\n    if (isReadableStreamLike(input)) {\n      return fromReadableStreamLike(input);\n    }\n  }\n\n  throw createInvalidObservableTypeError(input);\n}\n\n/**\n * Creates an RxJS Observable from an object that implements `Symbol.observable`.\n * @param obj An object that properly implements `Symbol.observable`.\n */\nfunction fromInteropObservable<T>(obj: any) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    const obs = obj[Symbol_observable]();\n    if (isFunction(obs.subscribe)) {\n      return obs.subscribe(subscriber);\n    }\n    // Should be caught by observable subscribe function error handling.\n    throw new TypeError('Provided object does not correctly implement Symbol.observable');\n  });\n}\n\n/**\n * Synchronously emits the values of an array like and completes.\n * This is exported because there are creation functions and operators that need to\n * make direct use of the same logic, and there's no reason to make them run through\n * `from` conditionals because we *know* they're dealing with an array.\n * @param array The array to emit values from\n */\nexport function fromArrayLike<T>(array: ArrayLike<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    // Loop over the array and emit each value. Note two things here:\n    // 1. We're making sure that the subscriber is not closed on each loop.\n    //    This is so we don't continue looping over a very large array after\n    //    something like a `take`, `takeWhile`, or other synchronous unsubscription\n    //    has already unsubscribed.\n    // 2. In this form, reentrant code can alter that array we're looping over.\n    //    This is a known issue, but considered an edge case. The alternative would\n    //    be to copy the array before executing the loop, but this has\n    //    performance implications.\n    for (let i = 0; i < array.length && !subscriber.closed; i++) {\n      subscriber.next(array[i]);\n    }\n    subscriber.complete();\n  });\n}\n\nfunction fromPromise<T>(promise: PromiseLike<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    promise\n      .then(\n        (value) => {\n          if (!subscriber.closed) {\n            subscriber.next(value);\n            subscriber.complete();\n          }\n        },\n        (err: any) => subscriber.error(err)\n      )\n      .then(null, reportUnhandledError);\n  });\n}\n\nfunction fromIterable<T>(iterable: Iterable<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    for (const value of iterable) {\n      subscriber.next(value);\n      if (subscriber.closed) {\n        return;\n      }\n    }\n    subscriber.complete();\n  });\n}\n\nfunction fromAsyncIterable<T>(asyncIterable: AsyncIterable<T>) {\n  return new Observable((subscriber: Subscriber<T>) => {\n    process(asyncIterable, subscriber).catch((err) => subscriber.error(err));\n  });\n}\n\nfunction fromReadableStreamLike<T>(readableStream: ReadableStreamLike<T>) {\n  return fromAsyncIterable(readableStreamLikeToAsyncGenerator(readableStream));\n}\n\nasync function process<T>(asyncIterable: AsyncIterable<T>, subscriber: Subscriber<T>) {\n  for await (const value of asyncIterable) {\n    subscriber.next(value);\n    // A side-effect may have closed our subscriber,\n    // check before the next iteration.\n    if (subscriber.closed) {\n      return;\n    }\n  }\n  subscriber.complete();\n}\n","import { SchedulerLike } from '../types';\nimport { scheduleArray } from '../scheduled/scheduleArray';\nimport { fromArrayLike } from './from';\n\nexport function internalFromArray<T>(input: ArrayLike<T>, scheduler?: SchedulerLike) {\n  return scheduler ? scheduleArray(input, scheduler) : fromArrayLike(input);\n}\n","import { SchedulerLike } from '../types';\nimport { isFunction } from './isFunction';\n\nexport function isScheduler(value: any): value is SchedulerLike {\n  return value && isFunction(value.schedule);\n}\n","import { SchedulerLike } from '../types';\nimport { isFunction } from './isFunction';\nimport { isScheduler } from './isScheduler';\n\nfunction last<T>(arr: T[]): T | undefined {\n  return arr[arr.length - 1];\n}\n\nexport function popResultSelector(args: any[]): ((...args: unknown[]) => unknown) | undefined {\n  return isFunction(last(args)) ? args.pop() : undefined;\n}\n\nexport function popScheduler(args: any[]): SchedulerLike | undefined {\n  return isScheduler(last(args)) ? args.pop() : undefined;\n}\n\nexport function popNumber(args: any[], defaultValue: number): number {\n  return typeof last(args) === 'number' ? args.pop()! : defaultValue;\n}\n","import { SchedulerLike, ValueFromArray } from '../types';\nimport { internalFromArray } from './fromArray';\nimport { Observable } from '../Observable';\nimport { scheduleArray } from '../scheduled/scheduleArray';\nimport { popScheduler } from '../util/args';\n\n// Devs are more likely to pass null or undefined than they are a scheduler\n// without accompanying values. To make things easier for (naughty) devs who\n// use the `strictNullChecks: false` TypeScript compiler option, these\n// overloads with explicit null and undefined values are included.\n\nexport function of(value: null): Observable<null>;\nexport function of(value: undefined): Observable<undefined>;\n\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function of(scheduler: SchedulerLike): Observable<never>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function of<A extends readonly unknown[]>(...valuesAndScheduler: [...A, SchedulerLike]): Observable<ValueFromArray<A>>;\n\nexport function of(): Observable<never>;\n/** @deprecated Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8. */\nexport function of<T>(): Observable<T>;\nexport function of<T>(value: T): Observable<T>;\nexport function of<A extends readonly unknown[]>(...values: A): Observable<ValueFromArray<A>>;\n\n/**\n * Converts the arguments to an observable sequence.\n *\n * <span class=\"informal\">Each argument becomes a `next` notification.</span>\n *\n * ![](of.png)\n *\n * Unlike {@link from}, it does not do any flattening and emits each argument in whole\n * as a separate `next` notification.\n *\n * ## Examples\n *\n * Emit the values `10, 20, 30`\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * of(10, 20, 30)\n * .subscribe(\n *   next => console.log('next:', next),\n *   err => console.log('error:', err),\n *   () => console.log('the end'),\n * );\n *\n * // Outputs\n * // next: 10\n * // next: 20\n * // next: 30\n * // the end\n * ```\n *\n * Emit the array `[1, 2, 3]`\n *\n * ```ts\n * import { of } from 'rxjs';\n *\n * of([1, 2, 3])\n * .subscribe(\n *   next => console.log('next:', next),\n *   err => console.log('error:', err),\n *   () => console.log('the end'),\n * );\n *\n * // Outputs\n * // next: [1, 2, 3]\n * // the end\n * ```\n *\n * @see {@link from}\n * @see {@link range}\n *\n * @param {...T} values A comma separated list of arguments you want to be emitted\n * @return {Observable} An Observable that emits the arguments\n * described above and then completes.\n */\nexport function of<T>(...args: Array<T | SchedulerLike>): Observable<T> {\n  const scheduler = popScheduler(args);\n  return scheduler ? scheduleArray(args as T[], scheduler) : internalFromArray(args as T[]);\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { SchedulerLike } from '../types';\nimport { isFunction } from '../util/isFunction';\n\n/**\n * Creates an observable that will create an error instance and push it to the consumer as an error\n * immediately upon subscription.\n *\n * <span class=\"informal\">Just errors and does nothing else</span>\n *\n * ![](throw.png)\n *\n * This creation function is useful for creating an observable that will create an error and error every\n * time it is subscribed to. Generally, inside of most operators when you might want to return an errored\n * observable, this is unnecessary. In most cases, such as in the inner return of {@link concatMap},\n * {@link mergeMap}, {@link defer}, and many others, you can simply throw the error, and RxJS will pick\n * that up and notify the consumer of the error.\n *\n * ## Example\n *\n * Create a simple observable that will create a new error with a timestamp and log it\n * and the message every time you subscribe to it.\n *\n * ```ts\n * import { throwError } from 'rxjs';\n *\n * let errorCount = 0;\n *\n * const errorWithTimestamp$ = throwError(() => {\n *    const error: any = new Error(`This is error number ${++errorCount}`);\n *    error.timestamp = Date.now();\n *    return error;\n * });\n *\n * errorWithTimesptamp$.subscribe({\n *    error: err => console.log(err.timestamp, err.message)\n * });\n *\n * errorWithTimesptamp$.subscribe({\n *    error: err => console.log(err.timestamp, err.message)\n * });\n *\n * // Logs the timestamp and a new error message each subscription;\n * ```\n *\n * ## Unnecessary usage\n *\n * Using `throwError` inside of an operator or creation function\n * with a callback, is usually not necessary:\n *\n * ```ts\n * import { throwError, timer, of } from 'rxjs';\n * import { concatMap } from 'rxjs/operators';\n *\n * const delays$ = of(1000, 2000, Infinity, 3000);\n *\n * delays$.pipe(\n *    concatMap(ms => {\n *      if (ms < 10000) {\n *        return timer(ms);\n *      } else {\n *        // This is probably overkill.\n *        return throwError(() => new Error(`Invalid time ${ms}`));\n *      }\n *    })\n * )\n * .subscribe({\n *    next: console.log,\n *    error: console.error\n * });\n * ```\n *\n * You can just throw the error instead:\n *\n * ```ts\n * import { throwError, timer, of } from 'rxjs';\n * import { concatMap } from 'rxjs/operators';\n *\n * const delays$ = of(1000, 2000, Infinity, 3000);\n *\n * delays$.pipe(\n *    concatMap(ms => {\n *      if (ms < 10000) {\n *        return timer(ms);\n *      } else {\n *        // Cleaner and easier to read for most folks.\n *        throw new Error(`Invalid time ${ms}`);\n *      }\n *    })\n * )\n * .subscribe({\n *    next: console.log,\n *    error: console.error\n * });\n * ```\n *\n * @param errorFactory A factory function that will create the error instance that is pushed.\n */\nexport function throwError(errorFactory: () => any): Observable<never>;\n\n/**\n * Returns an observable that will error with the specified error immediately upon subscription.\n *\n * @param error The error instance to emit\n * @deprecated Support for passing an error value will be removed in v8. Instead, pass a factory function to `throwError(() => new Error('test'))`. This is\n * because it will create the error at the moment it should be created and capture a more appropriate stack trace. If\n * for some reason you need to create the error ahead of time, you can still do that: `const err = new Error('test'); throwError(() => err);`.\n */\nexport function throwError(error: any): Observable<never>;\n\n/**\n * Notifies the consumer of an error using a given scheduler by scheduling it at delay `0` upon subscription.\n *\n * @param errorOrErrorFactory An error instance or error factory\n * @param scheduler A scheduler to use to schedule the error notification\n * @deprecated The `scheduler` parameter will be removed in v8.\n * Use `throwError` in combination with {@link observeOn}: `throwError(() => new Error('test')).pipe(observeOn(scheduler));`.\n * Details: https://rxjs.dev/deprecations/scheduler-argument\n */\nexport function throwError(errorOrErrorFactory: any, scheduler: SchedulerLike): Observable<never>;\n\nexport function throwError(errorOrErrorFactory: any, scheduler?: SchedulerLike): Observable<never> {\n  const errorFactory = isFunction(errorOrErrorFactory) ? errorOrErrorFactory : () => errorOrErrorFactory;\n  const init = (subscriber: Subscriber<never>) => subscriber.error(errorFactory());\n  return new Observable(scheduler ? (subscriber) => scheduler.schedule(init as any, 0, subscriber) : init);\n}\n","import { PartialObserver, ObservableNotification, CompleteNotification, NextNotification, ErrorNotification } from './types';\nimport { Observable } from './Observable';\nimport { EMPTY } from './observable/empty';\nimport { of } from './observable/of';\nimport { throwError } from './observable/throwError';\nimport { isFunction } from './util/isFunction';\n\n// TODO: When this enum is removed, replace it with a type alias. See #4556.\n/**\n * @deprecated Use a string literal instead. `NotificationKind` will be replaced with a type alias in v8.\n * It will not be replaced with a const enum as those are not compatible with isolated modules.\n */\nexport enum NotificationKind {\n  NEXT = 'N',\n  ERROR = 'E',\n  COMPLETE = 'C',\n}\n\n/**\n * Represents a push-based event or value that an {@link Observable} can emit.\n * This class is particularly useful for operators that manage notifications,\n * like {@link materialize}, {@link dematerialize}, {@link observeOn}, and\n * others. Besides wrapping the actual delivered value, it also annotates it\n * with metadata of, for instance, what type of push message it is (`next`,\n * `error`, or `complete`).\n *\n * @see {@link materialize}\n * @see {@link dematerialize}\n * @see {@link observeOn}\n * @deprecated It is NOT recommended to create instances of `Notification` directly.\n * Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\n * For example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\n * Will be removed in v8.\n */\nexport class Notification<T> {\n  /**\n   * A value signifying that the notification will \"next\" if observed. In truth,\n   * This is really synonymous with just checking `kind === \"N\"`.\n   * @deprecated Will be removed in v8. Instead, just check to see if the value of `kind` is `\"N\"`.\n   */\n  readonly hasValue: boolean;\n\n  /**\n   * Creates a \"Next\" notification object.\n   * @param kind Always `'N'`\n   * @param value The value to notify with if observed.\n   * @deprecated Internal implementation detail. Use {@link Notification#createNext createNext} instead.\n   */\n  constructor(kind: 'N', value?: T);\n  /**\n   * Creates an \"Error\" notification object.\n   * @param kind Always `'E'`\n   * @param value Always `undefined`\n   * @param error The error to notify with if observed.\n   * @deprecated Internal implementation detail. Use {@link Notification#createError createError} instead.\n   */\n  constructor(kind: 'E', value: undefined, error: any);\n  /**\n   * Creates a \"completion\" notification object.\n   * @param kind Always `'C'`\n   * @deprecated Internal implementation detail. Use {@link Notification#createComplete createComplete} instead.\n   */\n  constructor(kind: 'C');\n  constructor(public readonly kind: 'N' | 'E' | 'C', public readonly value?: T, public readonly error?: any) {\n    this.hasValue = kind === 'N';\n  }\n\n  /**\n   * Executes the appropriate handler on a passed `observer` given the `kind` of notification.\n   * If the handler is missing it will do nothing. Even if the notification is an error, if\n   * there is no error handler on the observer, an error will not be thrown, it will noop.\n   * @param observer The observer to notify.\n   */\n  observe(observer: PartialObserver<T>): void {\n    return observeNotification(this as ObservableNotification<T>, observer);\n  }\n\n  /**\n   * Executes a notification on the appropriate handler from a list provided.\n   * If a handler is missing for the kind of notification, nothing is called\n   * and no error is thrown, it will be a noop.\n   * @param next A next handler\n   * @param error An error handler\n   * @param complete A complete handler\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  do(next: (value: T) => void, error: (err: any) => void, complete: () => void): void;\n  /**\n   * Executes a notification on the appropriate handler from a list provided.\n   * If a handler is missing for the kind of notification, nothing is called\n   * and no error is thrown, it will be a noop.\n   * @param next A next handler\n   * @param error An error handler\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  do(next: (value: T) => void, error: (err: any) => void): void;\n  /**\n   * Executes the next handler if the Notification is of `kind` `\"N\"`. Otherwise\n   * this will not error, and it will be a noop.\n   * @param next The next handler\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  do(next: (value: T) => void): void;\n  do(nextHandler: (value: T) => void, errorHandler?: (err: any) => void, completeHandler?: () => void): void {\n    const { kind, value, error } = this;\n    return kind === 'N' ? nextHandler?.(value!) : kind === 'E' ? errorHandler?.(error) : completeHandler?.();\n  }\n\n  /**\n   * Executes a notification on the appropriate handler from a list provided.\n   * If a handler is missing for the kind of notification, nothing is called\n   * and no error is thrown, it will be a noop.\n   * @param next A next handler\n   * @param error An error handler\n   * @param complete A complete handler\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  accept(next: (value: T) => void, error: (err: any) => void, complete: () => void): void;\n  /**\n   * Executes a notification on the appropriate handler from a list provided.\n   * If a handler is missing for the kind of notification, nothing is called\n   * and no error is thrown, it will be a noop.\n   * @param next A next handler\n   * @param error An error handler\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  accept(next: (value: T) => void, error: (err: any) => void): void;\n  /**\n   * Executes the next handler if the Notification is of `kind` `\"N\"`. Otherwise\n   * this will not error, and it will be a noop.\n   * @param next The next handler\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  accept(next: (value: T) => void): void;\n\n  /**\n   * Executes the appropriate handler on a passed `observer` given the `kind` of notification.\n   * If the handler is missing it will do nothing. Even if the notification is an error, if\n   * there is no error handler on the observer, an error will not be thrown, it will noop.\n   * @param observer The observer to notify.\n   * @deprecated Replaced with {@link Notification#observe observe}. Will be removed in v8.\n   */\n  accept(observer: PartialObserver<T>): void;\n  accept(nextOrObserver: PartialObserver<T> | ((value: T) => void), error?: (err: any) => void, complete?: () => void) {\n    return isFunction((nextOrObserver as any)?.next)\n      ? this.observe(nextOrObserver as PartialObserver<T>)\n      : this.do(nextOrObserver as (value: T) => void, error as any, complete as any);\n  }\n\n  /**\n   * Returns a simple Observable that just delivers the notification represented\n   * by this Notification instance.\n   *\n   * @deprecated Will be removed in v8. To convert a `Notification` to an {@link Observable},\n   * use {@link of} and {@link dematerialize}: `of(notification).pipe(dematerialize())`.\n   */\n  toObservable(): Observable<T> {\n    const { kind, value, error } = this;\n    // Select the observable to return by `kind`\n    const result =\n      kind === 'N'\n        ? // Next kind. Return an observable of that value.\n          of(value!)\n        : //\n        kind === 'E'\n        ? // Error kind. Return an observable that emits the error.\n          throwError(() => error)\n        : //\n        kind === 'C'\n        ? // Completion kind. Kind is \"C\", return an observable that just completes.\n          EMPTY\n        : // Unknown kind, return falsy, so we error below.\n          0;\n    if (!result) {\n      // TODO: consider removing this check. The only way to cause this would be to\n      // use the Notification constructor directly in a way that is not type-safe.\n      // and direct use of the Notification constructor is deprecated.\n      throw new TypeError(`Unexpected notification kind ${kind}`);\n    }\n    return result;\n  }\n\n  private static completeNotification = new Notification('C') as Notification<never> & CompleteNotification;\n  /**\n   * A shortcut to create a Notification instance of the type `next` from a\n   * given value.\n   * @param {T} value The `next` value.\n   * @return {Notification<T>} The \"next\" Notification representing the\n   * argument.\n   * @nocollapse\n   * @deprecated It is NOT recommended to create instances of `Notification` directly.\n   * Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\n   * For example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\n   * Will be removed in v8.\n   */\n  static createNext<T>(value: T) {\n    return new Notification('N', value) as Notification<T> & NextNotification<T>;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `error` from a\n   * given error.\n   * @param {any} [err] The `error` error.\n   * @return {Notification<T>} The \"error\" Notification representing the\n   * argument.\n   * @nocollapse\n   * @deprecated It is NOT recommended to create instances of `Notification` directly.\n   * Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\n   * For example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\n   * Will be removed in v8.\n   */\n  static createError(err?: any) {\n    return new Notification('E', undefined, err) as Notification<never> & ErrorNotification;\n  }\n\n  /**\n   * A shortcut to create a Notification instance of the type `complete`.\n   * @return {Notification<any>} The valueless \"complete\" Notification.\n   * @nocollapse\n   * @deprecated It is NOT recommended to create instances of `Notification` directly.\n   * Rather, try to create POJOs matching the signature outlined in {@link ObservableNotification}.\n   * For example: `{ kind: 'N', value: 1 }`, `{ kind: 'E', error: new Error('bad') }`, or `{ kind: 'C' }`.\n   * Will be removed in v8.\n   */\n  static createComplete(): Notification<never> & CompleteNotification {\n    return Notification.completeNotification;\n  }\n}\n\n/**\n * Executes the appropriate handler on a passed `observer` given the `kind` of notification.\n * If the handler is missing it will do nothing. Even if the notification is an error, if\n * there is no error handler on the observer, an error will not be thrown, it will noop.\n * @param notification The notification object to observe.\n * @param observer The observer to notify.\n */\nexport function observeNotification<T>(notification: ObservableNotification<T>, observer: PartialObserver<T>) {\n  const { kind, value, error } = notification as any;\n  if (typeof kind !== 'string') {\n    throw new TypeError('Invalid notification, missing \"kind\"');\n  }\n  kind === 'N' ? observer.next?.(value!) : kind === 'E' ? observer.error?.(error) : observer.complete?.();\n}\n","/** prettier */\nimport { Observable } from '../Observable';\nimport { isFunction } from './isFunction';\n\n/**\n * Tests to see if the object is an RxJS {@link Observable}\n * @param obj the object to test\n */\nexport function isObservable(obj: any): obj is Observable<unknown> {\n  // The !! is to ensure that this publicly exposed function returns\n  // `false` if something like `null` or `0` is passed.\n  return !!obj && (obj instanceof Observable || (isFunction(obj.lift) && isFunction(obj.subscribe)));\n}\n","import { createErrorClass } from './createErrorClass';\n\nexport interface EmptyError extends Error {}\n\nexport interface EmptyErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (): EmptyError;\n}\n\n/**\n * An error thrown when an Observable or a sequence was queried but has no\n * elements.\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link single}\n * @see {@link firstValueFrom}\n * @see {@link lastValueFrom}\n *\n * @class EmptyError\n */\nexport const EmptyError: EmptyErrorCtor = createErrorClass((_super) => function EmptyErrorImpl(this: any) {\n  _super(this);\n  this.name = 'EmptyError';\n  this.message = 'no elements in sequence';\n});\n","import { Observable } from './Observable';\nimport { EmptyError } from './util/EmptyError';\n\nexport interface LastValueFromConfig<T> {\n  defaultValue: T;\n}\n\nexport function lastValueFrom<T, D>(source: Observable<T>, config: LastValueFromConfig<D>): Promise<T | D>;\nexport function lastValueFrom<T>(source: Observable<T>): Promise<T>;\n\n/**\n * Converts an observable to a promise by subscribing to the observable,\n * waiting for it to complete, and resolving the returned promise with the\n * last value from the observed stream.\n *\n * If the observable stream completes before any values were emitted, the\n * returned promise will reject with {@link EmptyError} or will resolve\n * with the default value if a default was specified.\n *\n * If the observable stream emits an error, the returned promise will reject\n * with that error.\n *\n * **WARNING**: Only use this with observables you *know* will complete. If the source\n * observable does not complete, you will end up with a promise that is hung up, and\n * potentially all of the state of an async function hanging out in memory. To avoid\n * this situation, look into adding something like {@link timeout}, {@link take},\n * {@link takeWhile}, or {@link takeUntil} amongst others.\n *\n * ### Example\n *\n * Wait for the last value from a stream and emit it from a promise in\n * an async function.\n *\n * ```ts\n * import { interval, lastValueFrom } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * async function execute() {\n *   const source$ = interval(2000).pipe(take(10));\n *   const finalNumber = await lastValueFrom(source$);\n *   console.log(`The final number is ${finalNumber}`);\n * }\n *\n * execute();\n *\n * // Expected output:\n * // \"The final number is 9\"\n * ```\n *\n * @see {@link firstValueFrom}\n *\n * @param source the observable to convert to a promise\n * @param config a configuration object to define the `defaultValue` to use if the source completes without emitting a value\n */\nexport function lastValueFrom<T, D>(source: Observable<T>, config?: LastValueFromConfig<D>): Promise<T | D> {\n  const hasConfig = typeof config === 'object';\n  return new Promise<T | D>((resolve, reject) => {\n    let _hasValue = false;\n    let _value: T;\n    source.subscribe({\n      next: (value) => {\n        _value = value;\n        _hasValue = true;\n      },\n      error: reject,\n      complete: () => {\n        if (_hasValue) {\n          resolve(_value);\n        } else if (hasConfig) {\n          resolve(config!.defaultValue);\n        } else {\n          reject(new EmptyError());\n        }\n      },\n    });\n  });\n}\n","import { Observable } from './Observable';\nimport { EmptyError } from './util/EmptyError';\nimport { SafeSubscriber } from './Subscriber';\n\nexport interface FirstValueFromConfig<T> {\n  defaultValue: T;\n}\n\nexport function firstValueFrom<T, D>(source: Observable<T>, config: FirstValueFromConfig<D>): Promise<T | D>;\nexport function firstValueFrom<T>(source: Observable<T>): Promise<T>;\n\n/**\n * Converts an observable to a promise by subscribing to the observable,\n * and returning a promise that will resolve as soon as the first value\n * arrives from the observable. The subscription will then be closed.\n *\n * If the observable stream completes before any values were emitted, the\n * returned promise will reject with {@link EmptyError} or will resolve\n * with the default value if a default was specified.\n *\n * If the observable stream emits an error, the returned promise will reject\n * with that error.\n *\n * **WARNING**: Only use this with observables you *know* will emit at least one value,\n * *OR* complete. If the source observable does not emit one value or complete, you will\n * end up with a promise that is hung up, and potentially all of the state of an\n * async function hanging out in memory. To avoid this situation, look into adding\n * something like {@link timeout}, {@link take}, {@link takeWhile}, or {@link takeUntil}\n * amongst others.\n *\n * ### Example\n *\n * Wait for the first value from a stream and emit it from a promise in\n * an async function.\n *\n * ```ts\n * import { interval, firstValueFrom } from 'rxjs';\n *\n * async function execute() {\n *   const source$ = interval(2000);\n *   const firstNumber = await firstValueFrom(source$);\n *   console.log(`The first number is ${firstNumber}`);\n * }\n *\n * execute();\n *\n * // Expected output:\n * // \"The first number is 0\"\n * ```\n *\n * @see {@link lastValueFrom}\n *\n * @param source the observable to convert to a promise\n * @param config a configuration object to define the `defaultValue` to use if the source completes without emitting a value\n */\nexport function firstValueFrom<T, D>(source: Observable<T>, config?: FirstValueFromConfig<D>): Promise<T | D> {\n  const hasConfig = typeof config === 'object';\n  return new Promise<T | D>((resolve, reject) => {\n    const subscriber = new SafeSubscriber<T>({\n      next: (value) => {\n        resolve(value);\n        subscriber.unsubscribe();\n      },\n      error: reject,\n      complete: () => {\n        if (hasConfig) {\n          resolve(config!.defaultValue);\n        } else {\n          reject(new EmptyError());\n        }\n      },\n    });\n    source.subscribe(subscriber);\n  });\n}\n","import { createErrorClass } from './createErrorClass';\n\nexport interface ArgumentOutOfRangeError extends Error {}\n\nexport interface ArgumentOutOfRangeErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (): ArgumentOutOfRangeError;\n}\n\n/**\n * An error thrown when an element was queried at a certain index of an\n * Observable, but no such index or position exists in that sequence.\n *\n * @see {@link elementAt}\n * @see {@link take}\n * @see {@link takeLast}\n *\n * @class ArgumentOutOfRangeError\n */\nexport const ArgumentOutOfRangeError: ArgumentOutOfRangeErrorCtor = createErrorClass(\n  (_super) =>\n    function ArgumentOutOfRangeErrorImpl(this: any) {\n      _super(this);\n      this.name = 'ArgumentOutOfRangeError';\n      this.message = 'argument out of range';\n    }\n);\n","import { createErrorClass } from './createErrorClass';\n\nexport interface NotFoundError extends Error {}\n\nexport interface NotFoundErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (message: string): NotFoundError;\n}\n\n/**\n * An error thrown when a value or values are missing from an\n * observable sequence.\n *\n * @see {@link operators/single}\n *\n * @class NotFoundError\n */\nexport const NotFoundError: NotFoundErrorCtor = createErrorClass(\n  (_super) =>\n    function NotFoundErrorImpl(this: any, message: string) {\n      _super(this);\n      this.name = 'NotFoundError';\n      this.message = message;\n    }\n);\n","import { createErrorClass } from './createErrorClass';\n\nexport interface SequenceError extends Error {}\n\nexport interface SequenceErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new (message: string): SequenceError;\n}\n\n/**\n * An error thrown when something is wrong with the sequence of\n * values arriving on the observable.\n *\n * @see {@link operators/single}\n *\n * @class SequenceError\n */\nexport const SequenceError: SequenceErrorCtor = createErrorClass(\n  (_super) =>\n    function SequenceErrorImpl(this: any, message: string) {\n      _super(this);\n      this.name = 'SequenceError';\n      this.message = message;\n    }\n);\n","/**\n * Checks to see if a value is not only a `Date` object,\n * but a *valid* `Date` object that can be converted to a\n * number. For example, `new Date('blah')` is indeed an\n * `instanceof Date`, however it cannot be converted to a\n * number.\n */\nexport function isValidDate(value: any): value is Date {\n  return value instanceof Date && !isNaN(value as any);\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { MonoTypeOperatorFunction, SchedulerLike, OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\nimport { isValidDate } from '../util/isDate';\nimport { Subscription } from '../Subscription';\nimport { operate } from '../util/lift';\nimport { Observable } from '../Observable';\nimport { innerFrom } from '../observable/from';\nimport { createErrorClass } from '../util/createErrorClass';\nimport { caughtSchedule } from '../util/caughtSchedule';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\nexport interface TimeoutConfig<T, O extends ObservableInput<unknown> = ObservableInput<T>, M = unknown> {\n  /**\n   * The time allowed between values from the source before timeout is triggered.\n   */\n  each?: number;\n\n  /**\n   * The relative time as a `number` in milliseconds, or a specific time as a `Date` object,\n   * by which the first value must arrive from the source before timeout is triggered.\n   */\n  first?: number | Date;\n\n  /**\n   * The scheduler to use with time-related operations within this operator. Defaults to {@link asyncScheduler}\n   */\n  scheduler?: SchedulerLike;\n\n  /**\n   * A factory used to create observable to switch to when timeout occurs. Provides\n   * some information about the source observable's emissions and what delay or\n   * exact time triggered the timeout.\n   */\n  with?: (info: TimeoutInfo<T, M>) => O;\n\n  /**\n   * Optional additional metadata you can provide to code that handles\n   * the timeout, will be provided through the {@link TimeoutError}.\n   * This can be used to help identify the source of a timeout or pass along\n   * other information related to the timeout.\n   */\n  meta?: M;\n}\n\nexport interface TimeoutInfo<T, M = unknown> {\n  /** Optional metadata that was provided to the timeout configuration. */\n  readonly meta: M;\n  /** The number of messages seen before the timeout */\n  readonly seen: number;\n  /** The last message seen */\n  readonly lastValue: T | null;\n}\n\n/**\n * An error emitted when a timeout occurs.\n */\nexport interface TimeoutError<T = unknown, M = unknown> extends Error {\n  /**\n   * The information provided to the error by the timeout\n   * operation that created the error. Will be `null` if\n   * used directly in non-RxJS code with an empty constructor.\n   * (Note that using this constructor directly is not recommended,\n   * you should create your own errors)\n   */\n  info: TimeoutInfo<T, M> | null;\n}\n\nexport interface TimeoutErrorCtor {\n  /**\n   * @deprecated Internal implementation detail. Do not construct error instances.\n   * Cannot be tagged as internal: https://github.com/ReactiveX/rxjs/issues/6269\n   */\n  new <T = unknown, M = unknown>(info?: TimeoutInfo<T, M>): TimeoutError<T, M>;\n}\n\n/**\n * An error thrown by the {@link operators/timeout} operator.\n *\n * Provided so users can use as a type and do quality comparisons.\n * We recommend you do not subclass this or create instances of this class directly.\n * If you have need of a error representing a timeout, you should\n * create your own error class and use that.\n *\n * @see {@link operators/timeout}\n *\n * @class TimeoutError\n */\nexport const TimeoutError: TimeoutErrorCtor = createErrorClass(\n  (_super) =>\n    function TimeoutErrorImpl(this: any, info: TimeoutInfo<any> | null = null) {\n      _super(this);\n      this.message = 'Timeout has occurred';\n      this.name = 'TimeoutError';\n      this.info = info;\n    }\n);\n\n/**\n * If `with` is provided, this will return an observable that will switch to a different observable if the source\n * does not push values within the specified time parameters.\n *\n * <span class=\"informal\">The most flexible option for creating a timeout behavior.</span>\n *\n * The first thing to know about the configuration is if you do not provide a `with` property to the configuration,\n * when timeout conditions are met, this operator will emit a {@link TimeoutError}. Otherwise, it will use the factory\n * function provided by `with`, and switch your subscription to the result of that. Timeout conditions are provided by\n * the settings in `first` and `each`.\n *\n * The `first` property can be either a `Date` for a specific time, a `number` for a time period relative to the\n * point of subscription, or it can be skipped. This property is to check timeout conditions for the arrival of\n * the first value from the source _only_. The timings of all subsequent values  from the source will be checked\n * against the time period provided by `each`, if it was provided.\n *\n * The `each` property can be either a `number` or skipped. If a value for `each` is provided, it represents the amount of\n * time the resulting observable will wait between the arrival of values from the source before timing out. Note that if\n * `first` is _not_ provided, the value from `each` will be used to check timeout conditions for the arrival of the first\n * value and all subsequent values. If `first` _is_ provided, `each` will only be use to check all values after the first.\n *\n * ### Example\n *\n * Emit a custom error if there is too much time between values\n *\n * ```ts\n * import { interval, throwError } from 'rxjs';\n * import { timeout } from 'rxjs/operators';\n *\n * class CustomTimeoutError extends Error {\n *   constructor() {\n *      super('It was too slow');\n *      this.name = 'CustomTimeoutError';\n *   }\n * }\n *\n * const slow$ = interval(900);\n *\n * slow$.pipe(\n *    timeout({\n *      each: 1000,\n *      with: () => throwError(new CustomTimeoutError())\n *    })\n * )\n * .subscribe({\n *    error: console.error\n * })\n * ```\n *\n * ### Example\n *\n * Switch to a faster observable if your source is slow.\n *\n * ```ts\n * import { interval, throwError } from 'rxjs';\n * import { timeout } from 'rxjs/operators';\n *\n * const slow$ = interval(900);\n * const fast$ = interval(500);\n *\n * slow$.pipe(\n *    timeout({\n *      each: 1000,\n *      with: () => fast$,\n *    })\n * )\n * .subscribe(console.log)\n * ```\n * @param config The configuration for the timeout.\n */\nexport function timeout<T, O extends ObservableInput<unknown>, M = unknown>(\n  config: TimeoutConfig<T, O, M> & { with: (info: TimeoutInfo<T, M>) => O }\n): OperatorFunction<T, T | ObservedValueOf<O>>;\n\n/**\n * Returns an observable that will error or switch to a different observable if the source does not push values\n * within the specified time parameters.\n *\n * <span class=\"informal\">The most flexible option for creating a timeout behavior.</span>\n *\n * The first thing to know about the configuration is if you do not provide a `with` property to the configuration,\n * when timeout conditions are met, this operator will emit a {@link TimeoutError}. Otherwise, it will use the factory\n * function provided by `with`, and switch your subscription to the result of that. Timeout conditions are provided by\n * the settings in `first` and `each`.\n *\n * The `first` property can be either a `Date` for a specific time, a `number` for a time period relative to the\n * point of subscription, or it can be skipped. This property is to check timeout conditions for the arrival of\n * the first value from the source _only_. The timings of all subsequent values  from the source will be checked\n * against the time period provided by `each`, if it was provided.\n *\n * The `each` property can be either a `number` or skipped. If a value for `each` is provided, it represents the amount of\n * time the resulting observable will wait between the arrival of values from the source before timing out. Note that if\n * `first` is _not_ provided, the value from `each` will be used to check timeout conditions for the arrival of the first\n * value and all subsequent values. If `first` _is_ provided, `each` will only be use to check all values after the first.\n *\n * ### Handling TimeoutErrors\n *\n * If no `with` property was provided, subscriptions to the resulting observable may emit an error of {@link TimeoutError}.\n * The timeout error provides useful information you can examine when you're handling the error. The most common way to handle\n * the error would be with {@link catchError}, although you could use {@link tap} or just the error handler in your `subscribe` call\n * directly, if your error handling is only a side effect (such as notifying the user, or logging).\n *\n * In this case, you would check the error for `instanceof TimeoutError` to validate that the error was indeed from `timeout`, and\n * not from some other source. If it's not from `timeout`, you should probably rethrow it if you're in a `catchError`.\n *\n *\n * ### Example\n *\n * Emit a {@link TimeoutError} if the first value, and _only_ the first value, does not arrive within 5 seconds\n *\n * ```ts\n * import { interval } from 'rxjs';\n * import { timeout } from 'rxjs/operators';\n *\n * // A random interval that lasts between 0 and 10 seconds per tick\n * const source$ = interval(Math.round(Math.random() * 10000));\n *\n * source$.pipe(\n *    timeout({ first: 5000 })\n * )\n * .subscribe(console.log);\n * ```\n *\n * ### Example\n *\n * Emit a {@link TimeoutError} if the source waits longer than 5 seconds between any two values or the first value\n * and subscription.\n *\n * ```ts\n * import { timer } from 'rxjs';\n * import { timeout, expand } from 'rxjs/operators';\n *\n * const getRandomTime = () => Math.round(Math.random() * 10000);\n *\n * // An observable that waits a random amount of time between each delivered value\n * const source$ = timer(getRandomTime()).pipe(\n *  expand(() => timer(getRandomTime()))\n * )\n *\n * source$.pipe(\n *    timeout({ each: 5000 })\n * )\n * .subscribe(console.log);\n * ```\n *\n * ### Example\n *\n * Emit a {@link TimeoutError} if the the source does not emit before 7 seconds, _or_ if the source waits longer than\n * 5 seconds between any two values after the first.\n *\n * ```ts\n * import { timer } from 'rxjs';\n * import { timeout, expand } from 'rxjs/operators';\n *\n * const getRandomTime = () => Math.round(Math.random() * 10000);\n *\n * // An observable that waits a random amount of time between each delivered value\n * const source$ = timer(getRandomTime()).pipe(\n *  expand(() => timer(getRandomTime()))\n * )\n *\n * source$.pipe(\n *    timeout({ first: 7000, each: 5000 })\n * )\n * .subscribe(console.log);\n * ```\n */\nexport function timeout<T, M = unknown>(config: Omit<TimeoutConfig<T, any, M>, 'with'>): OperatorFunction<T, T>;\n\n/**\n * Returns an observable that will error if the source does not push its first value before the specified time passed as a `Date`.\n * This is functionally the same as `timeout({ first: someDate })`.\n *\n * <span class=\"informal\">Errors if the first value doesn't show up before the given date and time</span>\n *\n * ![](timeout.png)\n *\n * @param first The date to at which the resulting observable will timeout if the source observable\n * does not emit at least one value.\n * @param scheduler The scheduler to use. Defaults to {@link asyncScheduler}.\n */\nexport function timeout<T>(first: Date, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns an observable that will error if the source does not push a value within the specified time in milliseconds.\n * This is functionally the same as `timeout({ each: milliseconds })`.\n *\n * <span class=\"informal\">Errors if it waits too long between any value</span>\n *\n * ![](timeout.png)\n *\n * @param each The time allowed between each pushed value from the source before the resulting observable\n * will timeout.\n * @param scheduler The scheduler to use. Defaults to {@link asyncScheduler}.\n */\nexport function timeout<T>(each: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n\n/**\n *\n * Errors if Observable does not emit a value in given time span.\n *\n * <span class=\"informal\">Timeouts on Observable that doesn't emit values fast enough.</span>\n *\n * ![](timeout.png)\n *\n * @return A function that returns an Observable that mirrors behaviour of the\n * source Observable, unless timeout happens when it throws an error.\n */\nexport function timeout<T, O extends ObservableInput<any>, M>(\n  config: number | Date | TimeoutConfig<T, O, M>,\n  schedulerArg?: SchedulerLike\n): OperatorFunction<T, T | ObservedValueOf<O>> {\n  // Intentionally terse code.\n  // If the first argument is a valid `Date`, then we use it as the `first` config.\n  // Otherwise, if the first argument is a `number`, then we use it as the `each` config.\n  // Otherwise, it can be assumed the first argument is the configuration object itself, and\n  // we destructure that into what we're going to use, setting important defaults as we do.\n  // NOTE: The default for `scheduler` will be the `scheduler` argument if it exists, or\n  // it will default to the `asyncScheduler`.\n  const { first, each, with: _with = timeoutErrorFactory, scheduler = schedulerArg ?? asyncScheduler, meta = null! } = (isValidDate(config)\n    ? { first: config }\n    : typeof config === 'number'\n    ? { each: config }\n    : config) as TimeoutConfig<T, O, M>;\n\n  if (first == null && each == null) {\n    // Ensure timeout was provided at runtime.\n    throw new TypeError('No timeout provided.');\n  }\n\n  return operate((source, subscriber) => {\n    // This subscription encapsulates our subscription to the\n    // source for this operator. We're capturing it separately,\n    // because if there is a `with` observable to fail over to,\n    // we want to unsubscribe from our original subscription, and\n    // hand of the subscription to that one.\n    let originalSourceSubscription: Subscription;\n    // The subscription for our timeout timer. This changes\n    // every time get get a new value.\n    let timerSubscription: Subscription;\n    // A bit of state we pass to our with and error factories to\n    // tell what the last value we saw was.\n    let lastValue: T | null = null;\n    // A bit of state we pass to the with and error factories to\n    // tell how many values we have seen so far.\n    let seen = 0;\n    const startTimer = (delay: number) => {\n      timerSubscription = caughtSchedule(\n        subscriber,\n        scheduler,\n        () => {\n          originalSourceSubscription.unsubscribe();\n          innerFrom(\n            _with!({\n              meta,\n              lastValue,\n              seen,\n            })\n          ).subscribe(subscriber);\n        },\n        delay\n      );\n    };\n\n    originalSourceSubscription = source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value: T) => {\n          // clear the timer so we can emit and start another one.\n          timerSubscription?.unsubscribe();\n          seen++;\n          // Emit\n          subscriber.next((lastValue = value));\n          // null | undefined are both < 0. Thanks, JavaScript.\n          each! > 0 && startTimer(each!);\n        },\n        undefined,\n        undefined,\n        () => {\n          if (!timerSubscription?.closed) {\n            timerSubscription?.unsubscribe();\n          }\n          // Be sure not to hold the last value in memory after unsubscription\n          // it could be quite large.\n          lastValue = null;\n        }\n      )\n    );\n\n    // Intentionally terse code.\n    // If `first` was provided, and it's a number, then use it.\n    // If `first` was provided and it's not a number, it's a Date, and we get the difference between it and \"now\".\n    // If `first` was not provided at all, then our first timer will be the value from `each`.\n    startTimer(first != null ? (typeof first === 'number' ? first : +first - scheduler!.now()) : each!);\n  });\n}\n\n/**\n * The default function to use to emit an error when timeout occurs and a `with` function\n * is not specified.\n * @param info The information about the timeout to pass along to the error\n */\nfunction timeoutErrorFactory(info: TimeoutInfo<any>): Observable<never> {\n  throw new TimeoutError(info);\n}\n","import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\n\n/**\n * Asynchronously subscribes Observers to this Observable on the specified {@link SchedulerLike}.\n *\n * With `subscribeOn` you can decide what type of scheduler a specific Observable will be using when it is subscribed to.\n *\n * Schedulers control the speed and order of emissions to observers from an Observable stream.\n *\n * ![](subscribeOn.png)\n *\n * ## Example\n *\n * Given the following code:\n *\n * ```ts\n * import { of, merge } from 'rxjs';\n *\n * const a = of(1, 2, 3);\n * const b = of(4, 5, 6);\n *\n * merge(a, b).subscribe(console.log);\n *\n * // Outputs\n * // 1\n * // 2\n * // 3\n * // 4\n * // 5\n * // 6\n * ```\n *\n * Both Observable `a` and `b` will emit their values directly and synchronously once they are subscribed to.\n *\n * If we instead use the `subscribeOn` operator declaring that we want to use the {@link asyncScheduler} for values emited by Observable `a`:\n *\n * ```ts\n * import { of, merge, asyncScheduler } from 'rxjs';\n * import { subscribeOn } from 'rxjs/operators';\n *\n * const a = of(1, 2, 3).pipe(subscribeOn(asyncScheduler));\n * const b = of(4, 5, 6);\n *\n * merge(a, b).subscribe(console.log);\n *\n * // Outputs\n * // 4\n * // 5\n * // 6\n * // 1\n * // 2\n * // 3\n * ```\n *\n * The reason for this is that Observable `b` emits its values directly and synchronously like before\n * but the emissions from `a` are scheduled on the event loop because we are now using the {@link asyncScheduler} for that specific Observable.\n *\n * @param scheduler The {@link SchedulerLike} to perform subscription actions on.\n * @param delay A delay to pass to the scheduler to delay subscriptions\n * @return A function that returns an Observable modified so that its\n * subscriptions happen on the specified {@link SchedulerLike}.\n */\nexport function subscribeOn<T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    subscriber.add(scheduler.schedule(() => source.subscribe(subscriber), delay));\n  });\n}\n","import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\nexport function map<T, R>(project: (value: T, index: number) => R): OperatorFunction<T, R>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function map<T, R, A>(project: (this: A, value: T, index: number) => R, thisArg: A): OperatorFunction<T, R>;\n\n/**\n * Applies a given `project` function to each value emitted by the source\n * Observable, and emits the resulting values as an Observable.\n *\n * <span class=\"informal\">Like [Array.prototype.map()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map),\n * it passes each source value through a transformation function to get\n * corresponding output values.</span>\n *\n * ![](map.png)\n *\n * Similar to the well known `Array.prototype.map` function, this operator\n * applies a projection to each value and emits that projection in the output\n * Observable.\n *\n * ## Example\n * Map every click to the clientX position of that click\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { map } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const positions = clicks.pipe(map(ev => ev.clientX));\n * positions.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mapTo}\n * @see {@link pluck}\n *\n * @param {function(value: T, index: number): R} project The function to apply\n * to each `value` emitted by the source Observable. The `index` parameter is\n * the number `i` for the i-th emission that has happened since the\n * subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to define what `this` is in the\n * `project` function.\n * @return A function that returns an Observable that emits the values from the\n * source Observable transformed by the given `project` function.\n */\nexport function map<T, R>(project: (value: T, index: number) => R, thisArg?: any): OperatorFunction<T, R> {\n  return operate((source, subscriber) => {\n    // The index of the value from the source. Used with projection.\n    let index = 0;\n    // Subscribe to the source, all errors and completions are sent along\n    // to the consumer.\n    source.subscribe(\n      new OperatorSubscriber(subscriber, (value: T) => {\n        // Call the projection function with the appropriate this context,\n        // and send the resulting value to the consumer.\n        subscriber.next(project.call(thisArg, value, index++));\n      })\n    );\n  });\n}\n","import { OperatorFunction } from \"../types\";\nimport { map } from \"../operators/map\";\n\nconst { isArray } = Array;\n\nfunction callOrApply<T, R>(fn: ((...values: T[]) => R), args: T|T[]): R {\n    return isArray(args) ? fn(...args) : fn(args);\n}\n\n/**\n * Used in several -- mostly deprecated -- situations where we need to \n * apply a list of arguments or a single argument to a result selector.\n */\nexport function mapOneOrManyArgs<T, R>(fn: ((...values: T[]) => R)): OperatorFunction<T|T[], R> {\n    return map(args => callOrApply(fn, args))\n}","import { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n *\n * Re-emits all notifications from source Observable with specified scheduler.\n *\n * <span class=\"informal\">Ensure a specific scheduler is used, from outside of an Observable.</span>\n *\n * `observeOn` is an operator that accepts a scheduler as a first parameter, which will be used to reschedule\n * notifications emitted by the source Observable. It might be useful, if you do not have control over\n * internal scheduler of a given Observable, but want to control when its values are emitted nevertheless.\n *\n * Returned Observable emits the same notifications (nexted values, complete and error events) as the source Observable,\n * but rescheduled with provided scheduler. Note that this doesn't mean that source Observables internal\n * scheduler will be replaced in any way. Original scheduler still will be used, but when the source Observable emits\n * notification, it will be immediately scheduled again - this time with scheduler passed to `observeOn`.\n * An anti-pattern would be calling `observeOn` on Observable that emits lots of values synchronously, to split\n * that emissions into asynchronous chunks. For this to happen, scheduler would have to be passed into the source\n * Observable directly (usually into the operator that creates it). `observeOn` simply delays notifications a\n * little bit more, to ensure that they are emitted at expected moments.\n *\n * As a matter of fact, `observeOn` accepts second parameter, which specifies in milliseconds with what delay notifications\n * will be emitted. The main difference between {@link delay} operator and `observeOn` is that `observeOn`\n * will delay all notifications - including error notifications - while `delay` will pass through error\n * from source Observable immediately when it is emitted. In general it is highly recommended to use `delay` operator\n * for any kind of delaying of values in the stream, while using `observeOn` to specify which scheduler should be used\n * for notification emissions in general.\n *\n * ## Example\n *\n * Ensure values in subscribe are called just before browser repaint.\n *\n * ```ts\n * import { interval, animationFrameScheduler } from 'rxjs';\n * import { observeOn } from 'rxjs/operators';\n *\n * const someDiv = document.querySelector(\"#someDiv\");\n * const intervals = interval(10);                // Intervals are scheduled\n *                                                // with async scheduler by default...\n * intervals.pipe(\n *   observeOn(animationFrameScheduler),          // ...but we will observe on animationFrame\n * )                                              // scheduler to ensure smooth animation.\n * .subscribe(val => {\n *   someDiv.style.height = val + 'px';\n * });\n * ```\n *\n * @see {@link delay}\n *\n * @param {SchedulerLike} scheduler Scheduler that will be used to reschedule notifications from source Observable.\n * @param {number} [delay] Number of milliseconds that states with what delay every notification should be rescheduled.\n * @return A function that returns an Observable that emits the same\n * notifications as the source Observable, but with provided scheduler.\n */\nexport function observeOn<T>(scheduler: SchedulerLike, delay: number = 0): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value) => subscriber.add(scheduler.schedule(() => subscriber.next(value), delay)),\n        () => subscriber.add(scheduler.schedule(() => subscriber.complete(), delay)),\n        (err) => subscriber.add(scheduler.schedule(() => subscriber.error(err), delay))\n      )\n    );\n  });\n}\n","import { SchedulerLike } from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { Observable } from '../Observable';\nimport { subscribeOn } from '../operators/subscribeOn';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { observeOn } from '../operators/observeOn';\nimport { AsyncSubject } from '../AsyncSubject';\n\nexport function bindCallbackInternals(\n  isNodeStyle: boolean,\n  callbackFunc: any,\n  resultSelector?: any,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<unknown> {\n  if (resultSelector) {\n    if (isScheduler(resultSelector)) {\n      scheduler = resultSelector;\n    } else {\n      // The user provided a result selector.\n      return function (this: any, ...args: any[]) {\n        return (bindCallbackInternals(isNodeStyle, callbackFunc, scheduler) as any)\n          .apply(this, args)\n          .pipe(mapOneOrManyArgs(resultSelector as any));\n      };\n    }\n  }\n\n  // If a scheduler was passed, use our `subscribeOn` and `observeOn` operators\n  // to compose that behavior for the user.\n  if (scheduler) {\n    return function (this: any, ...args: any[]) {\n      return (bindCallbackInternals(isNodeStyle, callbackFunc) as any)\n        .apply(this, args)\n        .pipe(subscribeOn(scheduler!), observeOn(scheduler!));\n    };\n  }\n\n  return function (this: any, ...args: any[]): Observable<any> {\n    // We're using AsyncSubject, because it emits when it completes,\n    // and it will play the value to all late-arriving subscribers.\n    const subject = new AsyncSubject<any>();\n\n    // If this is true, then we haven't called our function yet.\n    let uninitialized = true;\n    return new Observable((subscriber) => {\n      // Add our subscriber to the subject.\n      const subs = subject.subscribe(subscriber);\n\n      if (uninitialized) {\n        uninitialized = false;\n        // We're going to execute the bound function\n        // This bit is to signal that we are hitting the callback asychronously.\n        // Because we don't have any anti-\"Zalgo\" gaurantees with whatever\n        // function we are handed, we use this bit to figure out whether or not\n        // we are getting hit in a callback synchronously during our call.\n        let isAsync = false;\n\n        // This is used to signal that the callback completed synchronously.\n        let isComplete = false;\n\n        // Call our function that has a callback. If at any time during this\n        // call, an error is thrown, it will be caught by the Observable\n        // subscription process and sent to the consumer.\n        callbackFunc.apply(\n          // Pass the appropriate `this` context.\n          this,\n          [\n            // Pass the arguments.\n            ...args,\n            // And our callback handler.\n            (...results: any[]) => {\n              if (isNodeStyle) {\n                // If this is a node callback, shift the first value off of the\n                // results and check it, as it is the error argument. By shifting,\n                // we leave only the argument(s) we want to pass to the consumer.\n                const err = results.shift();\n                if (err != null) {\n                  subject.error(err);\n                  // If we've errored, we can stop processing this function\n                  // as there's nothing else to do. Just return to escape.\n                  return;\n                }\n              }\n              // If we have one argument, notify the consumer\n              // of it as a single value, otherwise, if there's more than one, pass\n              // them as an array. Note that if there are no arguments, `undefined`\n              // will be emitted.\n              subject.next(1 < results.length ? results : results[0]);\n              // Flip this flag, so we know we can complete it in the synchronous\n              // case below.\n              isComplete = true;\n              // If we're not asynchronous, we need to defer the `complete` call\n              // until after the call to the function is over. This is because an\n              // error could be thrown in the function after it calls our callback,\n              // and if that is the case, if we complete here, we are unable to notify\n              // the consumer than an error occured.\n              if (isAsync) {\n                subject.complete();\n              }\n            },\n          ]\n        );\n        // If we flipped `isComplete` during the call, we resolved synchronously,\n        // notify complete, because we skipped it in the callback to wait\n        // to make sure there were no errors during the call.\n        if (isComplete) {\n          subject.complete();\n        }\n\n        // We're no longer synchronous. If the callback is called at this point\n        // we can notify complete on the spot.\n        isAsync = true;\n      }\n\n      // Return the subscription fron adding our subscriber to the subject.\n      return subs;\n    });\n  };\n}\n","/* @prettier */\nimport { SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { bindCallbackInternals } from './bindCallbackInternals';\n\nexport function bindCallback(\n  callbackFunc: (...args: any[]) => void,\n  resultSelector: (...args: any[]) => any,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<any>;\n\n// args is the arguments array and we push the callback on the rest tuple since the rest parameter must be last (only item) in a parameter list\nexport function bindCallback<A extends readonly unknown[], R extends readonly unknown[]>(\n  callbackFunc: (...args: [...A, (...res: R) => void]) => void,\n  schedulerLike?: SchedulerLike\n): (...arg: A) => Observable<R extends [] ? void : R extends [any] ? R[0] : R>;\n\n/**\n * Converts a callback API to a function that returns an Observable.\n *\n * <span class=\"informal\">Give it a function `f` of type `f(x, callback)` and\n * it will return a function `g` that when called as `g(x)` will output an\n * Observable.</span>\n *\n * `bindCallback` is not an operator because its input and output are not\n * Observables. The input is a function `func` with some parameters. The\n * last parameter must be a callback function that `func` calls when it is\n * done.\n *\n * The output of `bindCallback` is a function that takes the same parameters\n * as `func`, except the last one (the callback). When the output function\n * is called with arguments it will return an Observable. If function `func`\n * calls its callback with one argument, the Observable will emit that value.\n * If on the other hand the callback is called with multiple values the resulting\n * Observable will emit an array with said values as arguments.\n *\n * It is **very important** to remember that input function `func` is not called\n * when the output function is, but rather when the Observable returned by the output\n * function is subscribed. This means if `func` makes an AJAX request, that request\n * will be made every time someone subscribes to the resulting Observable, but not before.\n *\n * The last optional parameter - `scheduler` - can be used to control when the call\n * to `func` happens after someone subscribes to Observable, as well as when results\n * passed to callback will be emitted. By default, the subscription to an Observable calls `func`\n * synchronously, but using {@link asyncScheduler} as the last parameter will defer the call to `func`,\n * just like wrapping the call in `setTimeout` with a timeout of `0` would. If you were to use the async Scheduler\n * and call `subscribe` on the output Observable, all function calls that are currently executing\n * will end before `func` is invoked.\n *\n * By default, results passed to the callback are emitted immediately after `func` invokes the callback.\n * In particular, if the callback is called synchronously, then the subscription of the resulting Observable\n * will call the `next` function synchronously as well.  If you want to defer that call,\n * you may use {@link asyncScheduler} just as before.  This means that by using `Scheduler.async` you can\n * ensure that `func` always calls its callback asynchronously, thus avoiding terrifying Zalgo.\n *\n * Note that the Observable created by the output function will always emit a single value\n * and then complete immediately. If `func` calls the callback multiple times, values from subsequent\n * calls will not appear in the stream. If you need to listen for multiple calls,\n *  you probably want to use {@link fromEvent} or {@link fromEventPattern} instead.\n *\n * If `func` depends on some context (`this` property) and is not already bound, the context of `func`\n * will be the context that the output function has at call time. In particular, if `func`\n * is called as a method of some objec and if `func` is not already bound, in order to preserve the context\n * it is recommended that the context of the output function is set to that object as well.\n *\n * If the input function calls its callback in the \"node style\" (i.e. first argument to callback is\n * optional error parameter signaling whether the call failed or not), {@link bindNodeCallback}\n * provides convenient error handling and probably is a better choice.\n * `bindCallback` will treat such functions the same as any other and error parameters\n * (whether passed or not) will always be interpreted as regular callback argument.\n *\n * ## Examples\n *\n * ### Convert jQuery's getJSON to an Observable API\n * ```ts\n * import { bindCallback } from 'rxjs';\n * import * as jQuery from 'jquery';\n *\n * // Suppose we have jQuery.getJSON('/my/url', callback)\n * const getJSONAsObservable = bindCallback(jQuery.getJSON);\n * const result = getJSONAsObservable('/my/url');\n * result.subscribe(x => console.log(x), e => console.error(e));\n * ```\n *\n * ### Receive an array of arguments passed to a callback\n * ```ts\n * import { bindCallback } from 'rxjs';\n *\n * const someFunction = (cb) => {\n *   cb(5, 'some string', {someProperty: 'someValue'})\n * };\n *\n * const boundSomeFunction = bindCallback(someFunction);\n * boundSomeFunction(12, 10).subscribe(values => {\n *   console.log(values); // [22, 2]\n * });\n * ```\n *\n * ### Compare behaviour with and without async Scheduler\n * ```ts\n * import { bindCallback, asyncScheduler } from 'rxjs';\n *\n * function iCallMyCallbackSynchronously(cb) {\n *   cb();\n * }\n *\n * const boundSyncFn = bindCallback(iCallMyCallbackSynchronously);\n * const boundAsyncFn = bindCallback(iCallMyCallbackSynchronously, null, asyncScheduler);\n *\n * boundSyncFn().subscribe(() => console.log('I was sync!'));\n * boundAsyncFn().subscribe(() => console.log('I was async!'));\n * console.log('This happened...');\n *\n * // Logs:\n * // I was sync!\n * // This happened...\n * // I was async!\n * ```\n *\n * ### Use bindCallback on an object method\n * ```ts\n * import { bindCallback } from 'rxjs';\n *\n * const boundMethod = bindCallback(someObject.methodWithCallback);\n * boundMethod\n *   .call(someObject) // make sure methodWithCallback has access to someObject\n *   .subscribe(subscriber);\n * ```\n *\n * @see {@link bindNodeCallback}\n * @see {@link from}\n *\n * @param {function} func A function with a callback as the last parameter.\n * @param {SchedulerLike} [scheduler] The scheduler on which to schedule the\n * callbacks.\n * @return {function(...params: *): Observable} A function which returns the\n * Observable that delivers the same values the callback would deliver.\n */\nexport function bindCallback(\n  callbackFunc: (...args: [...any[], (...res: any) => void]) => void,\n  resultSelector?: ((...args: any[]) => any) | SchedulerLike,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<unknown> {\n  return bindCallbackInternals(false, callbackFunc, resultSelector, scheduler);\n}\n","/* @prettier */\nimport { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { bindCallbackInternals } from './bindCallbackInternals';\n\nexport function bindNodeCallback(\n  callbackFunc: (...args: any[]) => void,\n  resultSelector: (...args: any[]) => any,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<any>;\n\n// args is the arguments array and we push the callback on the rest tuple since the rest parameter must be last (only item) in a parameter list\nexport function bindNodeCallback<A extends readonly unknown[], R extends readonly unknown[]>(\n  callbackFunc: (...args: [...A, (err: any, ...res: R) => void]) => void,\n  schedulerLike?: SchedulerLike\n): (...arg: A) => Observable<R extends [] ? void : R extends [any] ? R[0] : R>;\n\n/**\n * Converts a Node.js-style callback API to a function that returns an\n * Observable.\n *\n * <span class=\"informal\">It's just like {@link bindCallback}, but the\n * callback is expected to be of type `callback(error, result)`.</span>\n *\n * `bindNodeCallback` is not an operator because its input and output are not\n * Observables. The input is a function `func` with some parameters, but the\n * last parameter must be a callback function that `func` calls when it is\n * done. The callback function is expected to follow Node.js conventions,\n * where the first argument to the callback is an error object, signaling\n * whether call was successful. If that object is passed to callback, it means\n * something went wrong.\n *\n * The output of `bindNodeCallback` is a function that takes the same\n * parameters as `func`, except the last one (the callback). When the output\n * function is called with arguments, it will return an Observable.\n * If `func` calls its callback with error parameter present, Observable will\n * error with that value as well. If error parameter is not passed, Observable will emit\n * second parameter. If there are more parameters (third and so on),\n * Observable will emit an array with all arguments, except first error argument.\n *\n * Note that `func` will not be called at the same time output function is,\n * but rather whenever resulting Observable is subscribed. By default call to\n * `func` will happen synchronously after subscription, but that can be changed\n * with proper `scheduler` provided as optional third parameter. {@link SchedulerLike}\n * can also control when values from callback will be emitted by Observable.\n * To find out more, check out documentation for {@link bindCallback}, where\n * {@link SchedulerLike} works exactly the same.\n *\n * As in {@link bindCallback}, context (`this` property) of input function will be set to context\n * of returned function, when it is called.\n *\n * After Observable emits value, it will complete immediately. This means\n * even if `func` calls callback again, values from second and consecutive\n * calls will never appear on the stream. If you need to handle functions\n * that call callbacks multiple times, check out {@link fromEvent} or\n * {@link fromEventPattern} instead.\n *\n * Note that `bindNodeCallback` can be used in non-Node.js environments as well.\n * \"Node.js-style\" callbacks are just a convention, so if you write for\n * browsers or any other environment and API you use implements that callback style,\n * `bindNodeCallback` can be safely used on that API functions as well.\n *\n * Remember that Error object passed to callback does not have to be an instance\n * of JavaScript built-in `Error` object. In fact, it does not even have to an object.\n * Error parameter of callback function is interpreted as \"present\", when value\n * of that parameter is truthy. It could be, for example, non-zero number, non-empty\n * string or boolean `true`. In all of these cases resulting Observable would error\n * with that value. This means usually regular style callbacks will fail very often when\n * `bindNodeCallback` is used. If your Observable errors much more often then you\n * would expect, check if callback really is called in Node.js-style and, if not,\n * switch to {@link bindCallback} instead.\n *\n * Note that even if error parameter is technically present in callback, but its value\n * is falsy, it still won't appear in array emitted by Observable.\n *\n * ## Examples\n * ###  Read a file from the filesystem and get the data as an Observable\n * ```ts\n * import * as fs from 'fs';\n * const readFileAsObservable = bindNodeCallback(fs.readFile);\n * const result = readFileAsObservable('./roadNames.txt', 'utf8');\n * result.subscribe(x => console.log(x), e => console.error(e));\n * ```\n *\n * ### Use on function calling callback with multiple arguments\n * ```ts\n * someFunction((err, a, b) => {\n *   console.log(err); // null\n *   console.log(a); // 5\n *   console.log(b); // \"some string\"\n * });\n * const boundSomeFunction = bindNodeCallback(someFunction);\n * boundSomeFunction()\n * .subscribe(value => {\n *   console.log(value); // [5, \"some string\"]\n * });\n * ```\n *\n * ### Use on function calling callback in regular style\n * ```ts\n * someFunction(a => {\n *   console.log(a); // 5\n * });\n * const boundSomeFunction = bindNodeCallback(someFunction);\n * boundSomeFunction()\n * .subscribe(\n *   value => {}             // never gets called\n *   err => console.log(err) // 5\n * );\n * ```\n *\n * @see {@link bindCallback}\n * @see {@link from}\n *\n * @param {function} func Function with a Node.js-style callback as the last parameter.\n * @param {SchedulerLike} [scheduler] The scheduler on which to schedule the\n * callbacks.\n * @return {function(...params: *): Observable} A function which returns the\n * Observable that delivers the same values the Node.js callback would\n * deliver.\n */\nexport function bindNodeCallback(\n  callbackFunc: (...args: [...any[], (err: any, ...res: any) => void]) => void,\n  resultSelector?: ((...args: any[]) => any) | SchedulerLike,\n  scheduler?: SchedulerLike\n): (...args: any[]) => Observable<any> {\n  return bindCallbackInternals(true, callbackFunc, resultSelector, scheduler);\n}\n","const { isArray } = Array;\nconst { getPrototypeOf, prototype: objectProto, keys: getKeys } = Object;\n\n/**\n * Used in functions where either a list of arguments, a single array of arguments, or a\n * dictionary of arguments can be returned. Returns an object with an `args` property with\n * the arguments in an array, if it is a dictionary, it will also return the `keys` in another\n * property.\n */\nexport function argsArgArrayOrObject<T, O extends Record<string, T>>(args: T[] | [O] | [T[]]): { args: T[]; keys: string[] | null } {\n  if (args.length === 1) {\n    const first = args[0];\n    if (isArray(first)) {\n      return { args: first, keys: null };\n    }\n    if (isPOJO(first)) {\n      const keys = getKeys(first);\n      return {\n        args: keys.map((key) => first[key]),\n        keys,\n      };\n    }\n  }\n\n  return { args: args as T[], keys: null };\n}\n\nfunction isPOJO(obj: any): obj is object {\n  return obj && typeof obj === 'object' && getPrototypeOf(obj) === objectProto;\n}\n","export function createObject(keys: string[], values: any[]) {\n  return keys.reduce((result, key, i) => ((result[key] = values[i]), result), {} as any);\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, SchedulerLike, ObservedValueOf, ObservableInputTuple } from '../types';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { Subscriber } from '../Subscriber';\nimport { from } from './from';\nimport { identity } from '../util/identity';\nimport { Subscription } from '../Subscription';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { popResultSelector, popScheduler } from '../util/args';\nimport { createObject } from '../util/createObject';\nimport { OperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { AnyCatcher } from '../AnyCatcher';\n\n// combineLatest(any)\n// We put this first because we need to catch cases where the user has supplied\n// _exactly `any`_ as the argument. Since `any` literally matches _anything_,\n// we don't want it to randomly hit one of the other type signatures below,\n// as we have no idea at build-time what type we should be returning when given an any.\n\n/**\n * You have passed `any` here, we can't figure out if it is\n * an array or an object, so you're getting `unknown`. Use better types.\n * @param arg Something typed as `any`\n */\nexport function combineLatest<T extends AnyCatcher>(arg: T): Observable<unknown>;\n\n// combineLatest([a, b, c])\nexport function combineLatest(sources: []): Observable<never>;\nexport function combineLatest<A extends readonly unknown[]>(sources: readonly [...ObservableInputTuple<A>]): Observable<A>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function combineLatest<A extends readonly unknown[], R>(\n  sources: readonly [...ObservableInputTuple<A>],\n  resultSelector: (...values: A) => R,\n  scheduler: SchedulerLike\n): Observable<R>;\nexport function combineLatest<A extends readonly unknown[], R>(\n  sources: readonly [...ObservableInputTuple<A>],\n  resultSelector: (...values: A) => R\n): Observable<R>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function combineLatest<A extends readonly unknown[]>(\n  sources: readonly [...ObservableInputTuple<A>],\n  scheduler: SchedulerLike\n): Observable<A>;\n\n// combineLatest(a, b, c)\n/** @deprecated Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument */\nexport function combineLatest<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function combineLatest<A extends readonly unknown[], R>(\n  ...sourcesAndResultSelectorAndScheduler: [...ObservableInputTuple<A>, (...values: A) => R, SchedulerLike]\n): Observable<R>;\n/** @deprecated Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument */\nexport function combineLatest<A extends readonly unknown[], R>(\n  ...sourcesAndResultSelector: [...ObservableInputTuple<A>, (...values: A) => R]\n): Observable<R>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `combineLatestAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function combineLatest<A extends readonly unknown[]>(\n  ...sourcesAndScheduler: [...ObservableInputTuple<A>, SchedulerLike]\n): Observable<A>;\n\n// combineLatest({a, b, c})\nexport function combineLatest(sourcesObject: { [K in any]: never }): Observable<never>;\nexport function combineLatest<T extends Record<string, ObservableInput<any>>>(\n  sourcesObject: T\n): Observable<{ [K in keyof T]: ObservedValueOf<T[K]> }>;\n\n/**\n * Combines multiple Observables to create an Observable whose values are\n * calculated from the latest values of each of its input Observables.\n *\n * <span class=\"informal\">Whenever any input Observable emits a value, it\n * computes a formula using the latest values from all the inputs, then emits\n * the output of that formula.</span>\n *\n * ![](combineLatest.png)\n *\n * `combineLatest` combines the values from all the Observables passed in the\n * observables array. This is done by subscribing to each Observable in order and,\n * whenever any Observable emits, collecting an array of the most recent\n * values from each Observable. So if you pass `n` Observables to this operator,\n * the returned Observable will always emit an array of `n` values, in an order\n * corresponding to the order of the passed Observables (the value from the first Observable\n * will be at index 0 of the array and so on).\n *\n * Static version of `combineLatest` accepts an array of Observables. Note that an array of\n * Observables is a good choice, if you don't know beforehand how many Observables\n * you will combine. Passing an empty array will result in an Observable that\n * completes immediately.\n *\n * To ensure the output array always has the same length, `combineLatest` will\n * actually wait for all input Observables to emit at least once,\n * before it starts emitting results. This means if some Observable emits\n * values before other Observables started emitting, all these values but the last\n * will be lost. On the other hand, if some Observable does not emit a value but\n * completes, resulting Observable will complete at the same moment without\n * emitting anything, since it will now be impossible to include a value from the\n * completed Observable in the resulting array. Also, if some input Observable does\n * not emit any value and never completes, `combineLatest` will also never emit\n * and never complete, since, again, it will wait for all streams to emit some\n * value.\n *\n * If at least one Observable was passed to `combineLatest` and all passed Observables\n * emitted something, the resulting Observable will complete when all combined\n * streams complete. So even if some Observable completes, the result of\n * `combineLatest` will still emit values when other Observables do. In case\n * of a completed Observable, its value from now on will always be the last\n * emitted value. On the other hand, if any Observable errors, `combineLatest`\n * will error immediately as well, and all other Observables will be unsubscribed.\n *\n * ## Examples\n * ### Combine two timer Observables\n * ```ts\n * import { combineLatest, timer } from 'rxjs';\n *\n * const firstTimer = timer(0, 1000); // emit 0, 1, 2... after every second, starting from now\n * const secondTimer = timer(500, 1000); // emit 0, 1, 2... after every second, starting 0,5s from now\n * const combinedTimers = combineLatest([firstTimer, secondTimer]);\n * combinedTimers.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0] after 0.5s\n * // [1, 0] after 1s\n * // [1, 1] after 1.5s\n * // [2, 1] after 2s\n * ```\n * ### Combine a dictionary of Observables\n * ```ts\n * import { combineLatest, of } from 'rxjs';\n * import { delay, startWith } from 'rxjs/operators';\n *\n * const observables = {\n *   a: of(1).pipe(delay(1000), startWith(0)),\n *   b: of(5).pipe(delay(5000), startWith(0)),\n *   c: of(10).pipe(delay(10000), startWith(0))\n * };\n * const combined = combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // {a: 0, b: 0, c: 0} immediately\n * // {a: 1, b: 0, c: 0} after 1s\n * // {a: 1, b: 5, c: 0} after 5s\n * // {a: 1, b: 5, c: 10} after 10s\n * ```\n * ### Combine an array of Observables\n * ```ts\n * import { combineLatest, of } from 'rxjs';\n * import { delay, startWith } from 'rxjs/operators';\n *\n * const observables = [1, 5, 10].map(\n *   n => of(n).pipe(\n *     delay(n * 1000),   // emit 0 and then emit n after n seconds\n *     startWith(0),\n *   )\n * );\n * const combined = combineLatest(observables);\n * combined.subscribe(value => console.log(value));\n * // Logs\n * // [0, 0, 0] immediately\n * // [1, 0, 0] after 1s\n * // [1, 5, 0] after 5s\n * // [1, 5, 10] after 10s\n * ```\n *\n *\n * ### Use map operator to dynamically calculate the Body-Mass Index\n * ```ts\n * import { combineLatest, of } from 'rxjs';\n * import { map } from 'rxjs/operators';\n *\n * const weight = of(70, 72, 76, 79, 75);\n * const height = of(1.76, 1.77, 1.78);\n * const bmi = combineLatest([weight, height]).pipe(\n *   map(([w, h]) => w / (h * h)),\n * );\n * bmi.subscribe(x => console.log('BMI is ' + x));\n *\n * // With output to console:\n * // BMI is 24.212293388429753\n * // BMI is 23.93948099205209\n * // BMI is 23.671253629592222\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link merge}\n * @see {@link withLatestFrom}\n *\n * @param {ObservableInput} [observables] An array of input Observables to combine with each other.\n * An array of Observables must be given as the first argument.\n * @param {function} [project] An optional function to project the values from\n * the combined latest values into a new value on the output Observable.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for subscribing to\n * each input Observable.\n * @return {Observable} An Observable of projected values from the most recent\n * values from each input Observable, or an array of the most recent values from\n * each input Observable.\n */\nexport function combineLatest<O extends ObservableInput<any>, R>(...args: any[]): Observable<R> | Observable<ObservedValueOf<O>[]> {\n  const scheduler = popScheduler(args);\n  const resultSelector = popResultSelector(args);\n\n  const { args: observables, keys } = argsArgArrayOrObject(args);\n\n  if (observables.length === 0) {\n    // If no observables are passed, or someone has passed an ampty array\n    // of observables, or even an empty object POJO, we need to just\n    // complete (EMPTY), but we have to honor the scheduler provided if any.\n    return from([], scheduler as any);\n  }\n\n  const result = new Observable<ObservedValueOf<O>[]>(\n    combineLatestInit(\n      observables as ObservableInput<ObservedValueOf<O>>[],\n      scheduler,\n      keys\n        ? // A handler for scrubbing the array of args into a dictionary.\n          (values) => createObject(keys, values)\n        : // A passthrough to just return the array\n          identity\n    )\n  );\n\n  return resultSelector ? (result.pipe(mapOneOrManyArgs(resultSelector)) as Observable<R>) : result;\n}\n\nexport function combineLatestInit(\n  observables: ObservableInput<any>[],\n  scheduler?: SchedulerLike,\n  valueTransform: (values: any[]) => any = identity\n) {\n  return (subscriber: Subscriber<any>) => {\n    // The outer subscription. We're capturing this in a function\n    // because we may have to schedule it.\n    maybeSchedule(\n      scheduler,\n      () => {\n        const { length } = observables;\n        // A store for the values each observable has emitted so far. We match observable to value on index.\n        const values = new Array(length);\n        // The number of currently active subscriptions, as they complete, we decrement this number to see if\n        // we are all done combining values, so we can complete the result.\n        let active = length;\n        // The number of inner sources that still haven't emitted the first value\n        // We need to track this because all sources need to emit one value in order\n        // to start emitting values.\n        let remainingFirstValues = length;\n        // The loop to kick off subscription. We're keying everything on index `i` to relate the observables passed\n        // in to the slot in the output array or the key in the array of keys in the output dictionary.\n        for (let i = 0; i < length; i++) {\n          maybeSchedule(\n            scheduler,\n            () => {\n              const source = from(observables[i], scheduler as any);\n              let hasFirstValue = false;\n              source.subscribe(\n                new OperatorSubscriber(\n                  subscriber,\n                  (value) => {\n                    // When we get a value, record it in our set of values.\n                    values[i] = value;\n                    if (!hasFirstValue) {\n                      // If this is our first value, record that.\n                      hasFirstValue = true;\n                      remainingFirstValues--;\n                    }\n                    if (!remainingFirstValues) {\n                      // We're not waiting for any more\n                      // first values, so we can emit!\n                      subscriber.next(valueTransform(values.slice()));\n                    }\n                  },\n                  () => {\n                    if (!--active) {\n                      // We only complete the result if we have no more active\n                      // inner observables.\n                      subscriber.complete();\n                    }\n                  }\n                )\n              );\n            },\n            subscriber\n          );\n        }\n      },\n      subscriber\n    );\n  };\n}\n\n/**\n * A small utility to handle the couple of locations where we want to schedule if a scheduler was provided,\n * but we don't if there was no scheduler.\n */\nfunction maybeSchedule(scheduler: SchedulerLike | undefined, execute: () => void, subscription: Subscription) {\n  if (scheduler) {\n    subscription.add(scheduler.schedule(execute));\n  } else {\n    execute();\n  }\n}\n","import { Observable } from '../Observable';\nimport { innerFrom } from '../observable/from';\nimport { Subscriber } from '../Subscriber';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * A process embodying the general \"merge\" strategy. This is used in\n * `mergeMap` and `mergeScan` because the logic is otherwise nearly identical.\n * @param source The original source observable\n * @param subscriber The consumer subscriber\n * @param project The projection function to get our inner sources\n * @param concurrent The number of concurrent inner subscriptions\n * @param onBeforeNext Additional logic to apply before nexting to our consumer\n * @param expand If `true` this will perform an \"expand\" strategy, which differs only\n * in that it recurses, and the inner subscription must be schedule-able.\n * @param innerSubScheduler A scheduler to use to schedule inner subscriptions,\n * this is to support the expand strategy, mostly, and should be deprecated\n */\nexport function mergeInternals<T, R>(\n  source: Observable<T>,\n  subscriber: Subscriber<R>,\n  project: (value: T, index: number) => ObservableInput<R>,\n  concurrent: number,\n  onBeforeNext?: (innerValue: R) => void,\n  expand?: boolean,\n  innerSubScheduler?: SchedulerLike,\n  additionalTeardown?: () => void\n) {\n  // Buffered values, in the event of going over our concurrency limit\n  const buffer: T[] = [];\n  // The number of active inner subscriptions.\n  let active = 0;\n  // An index to pass to our accumulator function\n  let index = 0;\n  // Whether or not the outer source has completed.\n  let isComplete = false;\n\n  /**\n   * Checks to see if we can complete our result or not.\n   */\n  const checkComplete = () => {\n    // If the outer has completed, and nothing is left in the buffer,\n    // and we don't have any active inner subscriptions, then we can\n    // Emit the state and complete.\n    if (isComplete && !buffer.length && !active) {\n      subscriber.complete();\n    }\n  };\n\n  // If we're under our concurrency limit, just start the inner subscription, otherwise buffer and wait.\n  const outerNext = (value: T) => (active < concurrent ? doInnerSub(value) : buffer.push(value));\n\n  const doInnerSub = (value: T) => {\n    // If we're expanding, we need to emit the outer values and the inner values\n    // as the inners will \"become outers\" in a way as they are recursively fed\n    // back to the projection mechanism.\n    expand && subscriber.next(value as any);\n\n    // Increment the number of active subscriptions so we can track it\n    // against our concurrency limit later.\n    active++;\n\n    // A flag used to show that the inner observable completed.\n    // This is checked during finalization to see if we should\n    // move to the next item in the buffer, if there is on.\n    let innerComplete = false;\n\n    // Start our inner subscription.\n    innerFrom(project(value, index++)).subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (innerValue) => {\n          // `mergeScan` has additional handling here. For example\n          // taking the inner value and updating state.\n          onBeforeNext?.(innerValue);\n\n          if (expand) {\n            // If we're expanding, then just recurse back to our outer\n            // handler. It will emit the value first thing.\n            outerNext(innerValue as any);\n          } else {\n            // Otherwise, emit the inner value.\n            subscriber.next(innerValue);\n          }\n        },\n        () => {\n          // Flag that we have completed, so we know to check the buffer\n          // during finalization.\n          innerComplete = true;\n        },\n        // Errors are passed to the destination.\n        undefined,\n        () => {\n          // During finalization, if the inner completed (it wasn't errored or\n          // cancelled), then we want to try the next item in the buffer if\n          // there is one.\n          if (innerComplete) {\n            // We have to wrap this in a try/catch because it happens during\n            // finalization, possibly asynchronously, and we want to pass\n            // any errors that happen (like in a projection function) to\n            // the outer Subscriber.\n            try {\n              // INNER SOURCE COMPLETE\n              // Decrement the active count to ensure that the next time\n              // we try to call `doInnerSub`, the number is accurate.\n              active--;\n              // If we have more values in the buffer, try to process those\n              // Note that this call will increment `active` ahead of the\n              // next conditional, if there were any more inner subscriptions\n              // to start.\n              while (buffer.length && active < concurrent) {\n                const bufferedValue = buffer.shift()!;\n                // Particularly for `expand`, we need to check to see if a scheduler was provided\n                // for when we want to start our inner subscription. Otherwise, we just start\n                // are next inner subscription.\n                innerSubScheduler ? subscriber.add(innerSubScheduler.schedule(() => doInnerSub(bufferedValue))) : doInnerSub(bufferedValue);\n              }\n              // Check to see if we can complete, and complete if so.\n              checkComplete();\n            } catch (err) {\n              subscriber.error(err);\n            }\n          }\n        }\n      )\n    );\n  };\n\n  // Subscribe to our source observable.\n  source.subscribe(\n    new OperatorSubscriber(subscriber, outerNext, () => {\n      // Outer completed, make a note of it, and check to see if we can complete everything.\n      isComplete = true;\n      checkComplete();\n    })\n  );\n\n  // Additional teardown (for when the destination is torn down).\n  // Other teardown is added implicitly via subscription above.\n  return () => {\n    additionalTeardown?.();\n  };\n}\n","import { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { map } from './map';\nimport { innerFrom } from '../observable/from';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function mergeMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  concurrent?: number\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function mergeMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined,\n  concurrent?: number\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R,\n  concurrent?: number\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link mergeAll}.</span>\n *\n * ![](mergeMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger.\n *\n * ## Example\n * Map and flatten each letter to an Observable ticking every 1 second\n * ```ts\n * import { of, interval } from 'rxjs';\n * import { mergeMap, map } from 'rxjs/operators';\n *\n * const letters = of('a', 'b', 'c');\n * const result = letters.pipe(\n *   mergeMap(x => interval(1000).pipe(map(i => x+i))),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // a0\n * // b0\n * // c0\n * // a1\n * // b1\n * // c1\n * // continues to list a,b,c with respective ascending integers\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and merging\n * the results of the Observables obtained from this transformation.\n */\nexport function mergeMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Infinity\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  if (isFunction(resultSelector)) {\n    // DEPRECATED PATH\n    return mergeMap((a, i) => map((b: any, ii: number) => resultSelector(a, b, i, ii))(innerFrom(project(a, i))), concurrent);\n  } else if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n\n  return operate((source, subscriber) => mergeInternals(source, subscriber, project, concurrent));\n}\n","import { mergeMap } from './mergeMap';\nimport { identity } from '../util/identity';\nimport { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\n\n/**\n * Converts a higher-order Observable into a first-order Observable which\n * concurrently delivers all values that are emitted on the inner Observables.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * ![](mergeAll.png)\n *\n * `mergeAll` subscribes to an Observable that emits Observables, also known as\n * a higher-order Observable. Each time it observes one of these emitted inner\n * Observables, it subscribes to that and delivers all the values from the\n * inner Observable on the output Observable. The output Observable only\n * completes once all inner Observables have completed. Any error delivered by\n * a inner Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n * Spawn a new interval Observable for each click event, and blend their outputs as one Observable\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { map, mergeAll } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(map((ev) => interval(1000)));\n * const firstOrder = higherOrder.pipe(mergeAll());\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * Count from 0 to 9 every second for each click, but only allow 2 concurrent timers\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { take, map, mergeAll } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map((ev) => interval(1000).pipe(take(10))),\n * );\n * const firstOrder = higherOrder.pipe(mergeAll(2));\n * firstOrder.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link concatAll}\n * @see {@link exhaustAll}\n * @see {@link merge}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @param {number} [concurrent=Infinity] Maximum number of inner\n * Observables being subscribed to concurrently.\n * @return A function that returns an Observable that emits values coming from\n * all the inner Observables emitted by the source Observable.\n */\nexport function mergeAll<O extends ObservableInput<any>>(concurrent: number = Infinity): OperatorFunction<O, ObservedValueOf<O>> {\n  return mergeMap(identity, concurrent);\n}\n","import { mergeAll } from './mergeAll';\nimport { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by\n * concatenating the inner Observables in order.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by putting one\n * inner Observable after the other.</span>\n *\n * ![](concatAll.svg)\n *\n * Joins every Observable emitted by the source (a higher-order Observable), in\n * a serial fashion. It subscribes to each inner Observable only after the\n * previous inner Observable has completed, and merges all of their values into\n * the returned observable.\n *\n * __Warning:__ If the source Observable emits Observables quickly and\n * endlessly, and the inner Observables it emits generally complete slower than\n * the source emits, you can run into memory issues as the incoming Observables\n * collect in an unbounded buffer.\n *\n * Note: `concatAll` is equivalent to `mergeAll` with concurrency parameter set\n * to `1`.\n *\n * ## Example\n *\n * For each click event, tick every second from 0 to 3, with no concurrency\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { map, take, concatAll } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map(ev => interval(1000).pipe(take(4))),\n * );\n * const firstOrder = higherOrder.pipe(concatAll());\n * firstOrder.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link concat}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link exhaustAll}\n * @see {@link mergeAll}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link zipAll}\n *\n * @return A function that returns an Observable emitting values from all the\n * inner Observables concatenated.\n */\nexport function concatAll<O extends ObservableInput<any>>(): OperatorFunction<O, ObservedValueOf<O>> {\n  return mergeAll(1);\n}\n","import { Observable } from '../Observable';\nimport { ObservableInputTuple, SchedulerLike } from '../types';\nimport { concatAll } from '../operators/concatAll';\nimport { internalFromArray } from './fromArray';\nimport { popScheduler } from '../util/args';\n\nexport function concat<T extends readonly unknown[]>(...inputs: [...ObservableInputTuple<T>]): Observable<T[number]>;\nexport function concat<T extends readonly unknown[]>(...inputsAndScheduler: [...ObservableInputTuple<T>, SchedulerLike]): Observable<T[number]>;\n\n/**\n * Creates an output Observable which sequentially emits all values from the first given\n * Observable and then moves on to the next.\n *\n * <span class=\"informal\">Concatenates multiple Observables together by\n * sequentially emitting their values, one Observable after the other.</span>\n *\n * ![](concat.png)\n *\n * `concat` joins multiple Observables together, by subscribing to them one at a time and\n * merging their results into the output Observable. You can pass either an array of\n * Observables, or put them directly as arguments. Passing an empty array will result\n * in Observable that completes immediately.\n *\n * `concat` will subscribe to first input Observable and emit all its values, without\n * changing or affecting them in any way. When that Observable completes, it will\n * subscribe to then next Observable passed and, again, emit its values. This will be\n * repeated, until the operator runs out of Observables. When last input Observable completes,\n * `concat` will complete as well. At any given moment only one Observable passed to operator\n * emits values. If you would like to emit values from passed Observables concurrently, check out\n * {@link merge} instead, especially with optional `concurrent` parameter. As a matter of fact,\n * `concat` is an equivalent of `merge` operator with `concurrent` parameter set to `1`.\n *\n * Note that if some input Observable never completes, `concat` will also never complete\n * and Observables following the one that did not complete will never be subscribed. On the other\n * hand, if some Observable simply completes immediately after it is subscribed, it will be\n * invisible for `concat`, which will just move on to the next Observable.\n *\n * If any Observable in chain errors, instead of passing control to the next Observable,\n * `concat` will error immediately as well. Observables that would be subscribed after\n * the one that emitted error, never will.\n *\n * If you pass to `concat` the same Observable many times, its stream of values\n * will be \"replayed\" on every subscription, which means you can repeat given Observable\n * as many times as you like. If passing the same Observable to `concat` 1000 times becomes tedious,\n * you can always use {@link repeat}.\n *\n * ## Examples\n * ### Concatenate a timer counting from 0 to 3 with a synchronous sequence from 1 to 10\n * ```ts\n * import { concat, interval, range } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const timer = interval(1000).pipe(take(4));\n * const sequence = range(1, 10);\n * const result = concat(timer, sequence);\n * result.subscribe(x => console.log(x));\n *\n * // results in:\n * // 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3 -immediate-> 1 ... 10\n * ```\n *\n * ### Concatenate 3 Observables\n * ```ts\n * import { concat, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n *\n * const result = concat(timer1, timer2, timer3);\n * result.subscribe(x => console.log(x));\n *\n * // results in the following:\n * // (Prints to console sequentially)\n * // -1000ms-> 0 -1000ms-> 1 -1000ms-> ... 9\n * // -2000ms-> 0 -2000ms-> 1 -2000ms-> ... 5\n * // -500ms-> 0 -500ms-> 1 -500ms-> ... 9\n * ```\n *\n * ### Concatenate the same Observable to repeat it\n * ```ts\n * import { concat, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const timer = interval(1000).pipe(take(2));\n *\n * concat(timer, timer) // concatenating the same Observable!\n * .subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('...and it is done!')\n * );\n *\n * // Logs:\n * // 0 after 1s\n * // 1 after 2s\n * // 0 after 3s\n * // 1 after 4s\n * // \"...and it is done!\" also after 4s\n * ```\n *\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link concatMapTo}\n * @see {@link startWith}\n * @see {@link endWith}\n *\n * @param input1 An input Observable to concatenate with others.\n * @param input2 An input Observable to concatenate with others.\n * More than one input Observables may be given as argument.\n * @param scheduler An optional {@link SchedulerLike} to schedule each\n * Observable subscription on.\n */\nexport function concat(...args: any[]): Observable<unknown> {\n  return concatAll()(internalFromArray(args, popScheduler(args)));\n}\n","import { Observable } from '../Observable';\nimport { ObservedValueOf, ObservableInput } from '../types';\nimport { innerFrom } from './from';\n\n/**\n * Creates an Observable that, on subscribe, calls an Observable factory to\n * make an Observable for each new Observer.\n *\n * <span class=\"informal\">Creates the Observable lazily, that is, only when it\n * is subscribed.\n * </span>\n *\n * ![](defer.png)\n *\n * `defer` allows you to create an Observable only when the Observer\n * subscribes. It waits until an Observer subscribes to it, calls the given\n * factory function to get an Observable -- where a factory function typically\n * generates a new Observable -- and subscribes the Observer to this Observable.\n * In case the factory function returns a falsy value, then EMPTY is used as\n * Observable instead. Last but not least, an exception during the factory\n * function call is transferred to the Observer by calling `error`.\n *\n * ## Example\n * ### Subscribe to either an Observable of clicks or an Observable of interval, at random\n * ```ts\n * import { defer, fromEvent, interval } from 'rxjs';\n *\n * const clicksOrInterval = defer(function () {\n *   return Math.random() > 0.5\n *     ? fromEvent(document, 'click')\n *     : interval(1000);\n * });\n * clicksOrInterval.subscribe(x => console.log(x));\n *\n * // Results in the following behavior:\n * // If the result of Math.random() is greater than 0.5 it will listen\n * // for clicks anywhere on the \"document\"; when document is clicked it\n * // will log a MouseEvent object to the console. If the result is less\n * // than 0.5 it will emit ascending numbers, one every second(1000ms).\n * ```\n *\n * @see {@link Observable}\n *\n * @param {function(): ObservableInput} observableFactory The Observable\n * factory function to invoke for each Observer that subscribes to the output\n * Observable. May also return a Promise, which will be converted on the fly\n * to an Observable.\n * @return {Observable} An Observable whose Observers' subscriptions trigger\n * an invocation of the given Observable factory function.\n */\nexport function defer<R extends ObservableInput<any>>(observableFactory: () => R): Observable<ObservedValueOf<R>> {\n  return new Observable<ObservedValueOf<R>>((subscriber) => {\n    innerFrom(observableFactory()).subscribe(subscriber);\n  });\n}\n","import { ObservableInput, SubjectLike } from '../types';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { Observable } from '../Observable';\nimport { defer } from './defer';\n\n/**\n * An observable with a `connect` method that is used to create a subscription\n * to an underlying source, connecting it with all consumers via a multicast.\n */\nexport interface ConnectableObservableLike<T> extends Observable<T> {\n  /**\n   * (Idempotent) Calling this method will connect the underlying source observable to all subscribed consumers\n   * through an underlying {@link Subject}.\n   * @returns A subscription, that when unsubscribed, will \"disconnect\" the source from the connector subject,\n   * severing notifications to all consumers.\n   */\n  connect(): Subscription;\n}\n\nexport interface ConnectableConfig<T> {\n  /**\n   * A factory function used to create the Subject through which the source\n   * is multicast. By default this creates a {@link Subject}.\n   */\n  connector: () => SubjectLike<T>;\n  /**\n   * If true, the resulting observable will reset internal state upon disconnetion\n   * and return to a \"cold\" state. This allows the resulting observable to be\n   * reconnected.\n   * If false, upon disconnection, the connecting subject will remain the\n   * connecting subject, meaning the resulting observable will not go \"cold\" again,\n   * and subsequent repeats or resubscriptions will resubscribe to that same subject.\n   */\n  resetOnDisconnect?: boolean;\n}\n\n/**\n * The default configuration for `connectable`.\n */\nconst DEFAULT_CONFIG: ConnectableConfig<unknown> = {\n  connector: () => new Subject<unknown>(),\n  resetOnDisconnect: true,\n};\n\n/**\n * Creates an observable that multicasts once `connect()` is called on it.\n *\n * @param source The observable source to make connectable.\n * @param config The configuration object for `connectable`.\n * @returns A \"connectable\" observable, that has a `connect()` method, that you must call to\n * connect the source to all consumers through the subject provided as the connector.\n */\nexport function connectable<T>(source: ObservableInput<T>, config: ConnectableConfig<T> = DEFAULT_CONFIG): ConnectableObservableLike<T> {\n  // The subscription representing the connection.\n  let connection: Subscription | null = null;\n  const { connector, resetOnDisconnect = true } = config;\n  let subject = connector();\n\n  const result: any = new Observable<T>((subscriber) => {\n    return subject.subscribe(subscriber);\n  });\n\n  // Define the `connect` function. This is what users must call\n  // in order to \"connect\" the source to the subject that is\n  // multicasting it.\n  result.connect = () => {\n    if (!connection || connection.closed) {\n      connection = defer(() => source).subscribe(subject);\n      if (resetOnDisconnect) {\n        connection.add(() => (subject = connector()));\n      }\n    }\n    return connection;\n  };\n\n  return result;\n}\n","import { Observable } from '../Observable';\nimport { ObservedValueOf, ObservableInputTuple, ObservableInput } from '../types';\nimport { argsArgArrayOrObject } from '../util/argsArgArrayOrObject';\nimport { innerFrom } from './from';\nimport { popResultSelector } from '../util/args';\nimport { OperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { createObject } from '../util/createObject';\nimport { AnyCatcher } from '../AnyCatcher';\n\n// forkJoin(any)\n// We put this first because we need to catch cases where the user has supplied\n// _exactly `any`_ as the argument. Since `any` literally matches _anything_,\n// we don't want it to randomly hit one of the other type signatures below,\n// as we have no idea at build-time what type we should be returning when given an any.\n\n/**\n * You have passed `any` here, we can't figure out if it is\n * an array or an object, so you're getting `unknown`. Use better types.\n * @param arg Something typed as `any`\n */\nexport function forkJoin<T extends AnyCatcher>(arg: T): Observable<unknown>;\n\n// forkJoin(null | undefined)\nexport function forkJoin(scheduler: null | undefined): Observable<never>;\n\n// forkJoin([a, b, c])\nexport function forkJoin(sources: readonly []): Observable<never>;\nexport function forkJoin<A extends readonly unknown[]>(sources: readonly [...ObservableInputTuple<A>]): Observable<A>;\nexport function forkJoin<A extends readonly unknown[], R>(\n  sources: readonly [...ObservableInputTuple<A>],\n  resultSelector: (...values: A) => R\n): Observable<R>;\n\n// forkJoin(a, b, c)\n/** @deprecated Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument */\nexport function forkJoin<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A>;\n/** @deprecated Pass an array of sources instead. The rest-parameters signature will be removed in v8. Details: https://rxjs.dev/deprecations/array-argument */\nexport function forkJoin<A extends readonly unknown[], R>(\n  ...sourcesAndResultSelector: [...ObservableInputTuple<A>, (...values: A) => R]\n): Observable<R>;\n\n// forkJoin({a, b, c})\nexport function forkJoin(sourcesObject: { [K in any]: never }): Observable<never>;\nexport function forkJoin<T extends Record<string, ObservableInput<any>>>(\n  sourcesObject: T\n): Observable<{ [K in keyof T]: ObservedValueOf<T[K]> }>;\n\n/**\n * Accepts an `Array` of {@link ObservableInput} or a dictionary `Object` of {@link ObservableInput} and returns\n * an {@link Observable} that emits either an array of values in the exact same order as the passed array,\n * or a dictionary of values in the same shape as the passed dictionary.\n *\n * <span class=\"informal\">Wait for Observables to complete and then combine last values they emitted;\n * complete immediately if an empty array is passed.</span>\n *\n * ![](forkJoin.png)\n *\n * `forkJoin` is an operator that takes any number of input observables which can be passed either as an array\n * or a dictionary of input observables. If no input observables are provided (e.g. an empty array is passed),\n * then the resulting stream will complete immediately.\n *\n * `forkJoin` will wait for all passed observables to emit and complete and then it will emit an array or an object with last\n * values from corresponding observables.\n *\n * If you pass an array of `n` observables to the operator, then the resulting\n * array will have `n` values, where the first value is the last one emitted by the first observable,\n * second value is the last one emitted by the second observable and so on.\n *\n * If you pass a dictionary of observables to the operator, then the resulting\n * objects will have the same keys as the dictionary passed, with their last values they have emitted\n * located at the corresponding key.\n *\n * That means `forkJoin` will not emit more than once and it will complete after that. If you need to emit combined\n * values not only at the end of the lifecycle of passed observables, but also throughout it, try out {@link combineLatest}\n * or {@link zip} instead.\n *\n * In order for the resulting array to have the same length as the number of input observables, whenever any of\n * the given observables completes without emitting any value, `forkJoin` will complete at that moment as well\n * and it will not emit anything either, even if it already has some last values from other observables.\n * Conversely, if there is an observable that never completes, `forkJoin` will never complete either,\n * unless at any point some other observable completes without emitting a value, which brings us back to\n * the previous case. Overall, in order for `forkJoin` to emit a value, all given observables\n * have to emit something at least once and complete.\n *\n * If any given observable errors at some point, `forkJoin` will error as well and immediately unsubscribe\n * from the other observables.\n *\n * Optionally `forkJoin` accepts a `resultSelector` function, that will be called with values which normally\n * would land in the emitted array. Whatever is returned by the `resultSelector`, will appear in the output\n * observable instead. This means that the default `resultSelector` can be thought of as a function that takes\n * all its arguments and puts them into an array. Note that the `resultSelector` will be called only\n * when `forkJoin` is supposed to emit a result.\n *\n * ## Examples\n *\n * ### Use forkJoin with a dictionary of observable inputs\n * ```ts\n * import { forkJoin, of, timer } from 'rxjs';\n *\n * const observable = forkJoin({\n *   foo: of(1, 2, 3, 4),\n *   bar: Promise.resolve(8),\n *   baz: timer(4000),\n * });\n * observable.subscribe({\n *  next: value => console.log(value),\n *  complete: () => console.log('This is how it ends!'),\n * });\n *\n * // Logs:\n * // { foo: 4, bar: 8, baz: 0 } after 4 seconds\n * // \"This is how it ends!\" immediately after\n * ```\n *\n * ### Use forkJoin with an array of observable inputs\n * ```ts\n * import { forkJoin, of, timer } from 'rxjs';\n *\n * const observable = forkJoin([\n *   of(1, 2, 3, 4),\n *   Promise.resolve(8),\n *   timer(4000),\n * ]);\n * observable.subscribe({\n *  next: value => console.log(value),\n *  complete: () => console.log('This is how it ends!'),\n * });\n *\n * // Logs:\n * // [4, 8, 0] after 4 seconds\n * // \"This is how it ends!\" immediately after\n * ```\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n *\n * @param {...ObservableInput} args Any number of Observables provided either as an array or as an arguments\n * passed directly to the operator.\n * @param {function} [project] Function that takes values emitted by input Observables and returns value\n * that will appear in resulting Observable instead of default array.\n * @return {Observable} Observable emitting either an array of last values emitted by passed Observables\n * or value from project function.\n */\nexport function forkJoin(...args: any[]): Observable<any> {\n  const resultSelector = popResultSelector(args);\n  const { args: sources, keys } = argsArgArrayOrObject(args);\n  const result = new Observable((subscriber) => {\n    const { length } = sources;\n    if (!length) {\n      subscriber.complete();\n      return;\n    }\n    const values = new Array(length);\n    let remainingCompletions = length;\n    let remainingEmissions = length;\n    for (let sourceIndex = 0; sourceIndex < length; sourceIndex++) {\n      let hasValue = false;\n      innerFrom(sources[sourceIndex]).subscribe(\n        new OperatorSubscriber(\n          subscriber,\n          (value) => {\n            if (!hasValue) {\n              hasValue = true;\n              remainingEmissions--;\n            }\n            values[sourceIndex] = value;\n          },\n          () => {\n            if (!--remainingCompletions || !hasValue) {\n              if (!remainingEmissions) {\n                subscriber.next(keys ? createObject(keys, values) : values);\n              }\n              subscriber.complete();\n            }\n          }\n        )\n      );\n    }\n  });\n  return resultSelector ? result.pipe(mapOneOrManyArgs(resultSelector)) : result;\n}\n","import { Observable } from '../Observable';\nimport { mergeMap } from '../operators/mergeMap';\nimport { isArrayLike } from '../util/isArrayLike';\nimport { isFunction } from '../util/isFunction';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { internalFromArray } from './fromArray';\n\n// These constants are used to create handler registry functions using array mapping below.\nconst nodeEventEmitterMethods = ['addListener', 'removeListener'] as const;\nconst eventTargetMethods = ['addEventListener', 'removeEventListener'] as const;\nconst jqueryMethods = ['on', 'off'] as const;\n\nexport interface NodeStyleEventEmitter {\n  addListener(eventName: string | symbol, handler: NodeEventHandler): this;\n  removeListener(eventName: string | symbol, handler: NodeEventHandler): this;\n}\n\nexport type NodeEventHandler = (...args: any[]) => void;\n\n// For APIs that implement `addListener` and `removeListener` methods that may\n// not use the same arguments or return EventEmitter values\n// such as React Native\nexport interface NodeCompatibleEventEmitter {\n  addListener(eventName: string, handler: NodeEventHandler): void | {};\n  removeListener(eventName: string, handler: NodeEventHandler): void | {};\n}\n\n// Use handler types like those in @types/jquery. See:\n// https://github.com/DefinitelyTyped/DefinitelyTyped/blob/847731ba1d7fa6db6b911c0e43aa0afe596e7723/types/jquery/misc.d.ts#L6395\nexport interface JQueryStyleEventEmitter<TContext, T> {\n  on(eventName: string, handler: (this: TContext, t: T, ...args: any[]) => any): void;\n  off(eventName: string, handler: (this: TContext, t: T, ...args: any[]) => any): void;\n}\n\nexport interface EventListenerObject<E> {\n  handleEvent(evt: E): void;\n}\n\nexport interface HasEventTargetAddRemove<E> {\n  addEventListener(\n    type: string,\n    listener: ((evt: E) => void) | EventListenerObject<E> | null,\n    options?: boolean | AddEventListenerOptions\n  ): void;\n  removeEventListener(\n    type: string,\n    listener: ((evt: E) => void) | EventListenerObject<E> | null,\n    options?: EventListenerOptions | boolean\n  ): void;\n}\n\nexport interface EventListenerOptions {\n  capture?: boolean;\n  passive?: boolean;\n  once?: boolean;\n}\n\nexport interface AddEventListenerOptions extends EventListenerOptions {\n  once?: boolean;\n  passive?: boolean;\n}\n\nexport function fromEvent<T>(target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>, eventName: string): Observable<T>;\nexport function fromEvent<T, R>(\n  target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>,\n  eventName: string,\n  resultSelector: (event: T) => R\n): Observable<R>;\nexport function fromEvent<T>(\n  target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>,\n  eventName: string,\n  options: EventListenerOptions\n): Observable<T>;\nexport function fromEvent<T, R>(\n  target: HasEventTargetAddRemove<T> | ArrayLike<HasEventTargetAddRemove<T>>,\n  eventName: string,\n  options: EventListenerOptions,\n  resultSelector: (event: T) => R\n): Observable<T>;\n\nexport function fromEvent(target: NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>, eventName: string): Observable<unknown>;\n/** @deprecated Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8. */\nexport function fromEvent<T>(target: NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>, eventName: string): Observable<T>;\nexport function fromEvent<R>(\n  target: NodeStyleEventEmitter | ArrayLike<NodeStyleEventEmitter>,\n  eventName: string,\n  resultSelector: (...args: any[]) => R\n): Observable<R>;\n\nexport function fromEvent(\n  target: NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>,\n  eventName: string\n): Observable<unknown>;\n/** @deprecated Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8. */\nexport function fromEvent<T>(target: NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>, eventName: string): Observable<T>;\nexport function fromEvent<R>(\n  target: NodeCompatibleEventEmitter | ArrayLike<NodeCompatibleEventEmitter>,\n  eventName: string,\n  resultSelector: (...args: any[]) => R\n): Observable<R>;\n\nexport function fromEvent<T>(\n  target: JQueryStyleEventEmitter<any, T> | ArrayLike<JQueryStyleEventEmitter<any, T>>,\n  eventName: string\n): Observable<T>;\nexport function fromEvent<T, R>(\n  target: JQueryStyleEventEmitter<any, T> | ArrayLike<JQueryStyleEventEmitter<any, T>>,\n  eventName: string,\n  resultSelector: (value: T, ...args: any[]) => R\n): Observable<R>;\n\n/**\n * Creates an Observable that emits events of a specific type coming from the\n * given event target.\n *\n * <span class=\"informal\">Creates an Observable from DOM events, or Node.js\n * EventEmitter events or others.</span>\n *\n * ![](fromEvent.png)\n *\n * `fromEvent` accepts as a first argument event target, which is an object with methods\n * for registering event handler functions. As a second argument it takes string that indicates\n * type of event we want to listen for. `fromEvent` supports selected types of event targets,\n * which are described in detail below. If your event target does not match any of the ones listed,\n * you should use {@link fromEventPattern}, which can be used on arbitrary APIs.\n * When it comes to APIs supported by `fromEvent`, their methods for adding and removing event\n * handler functions have different names, but they all accept a string describing event type\n * and function itself, which will be called whenever said event happens.\n *\n * Every time resulting Observable is subscribed, event handler function will be registered\n * to event target on given event type. When that event fires, value\n * passed as a first argument to registered function will be emitted by output Observable.\n * When Observable is unsubscribed, function will be unregistered from event target.\n *\n * Note that if event target calls registered function with more than one argument, second\n * and following arguments will not appear in resulting stream. In order to get access to them,\n * you can pass to `fromEvent` optional project function, which will be called with all arguments\n * passed to event handler. Output Observable will then emit value returned by project function,\n * instead of the usual value.\n *\n * Remember that event targets listed below are checked via duck typing. It means that\n * no matter what kind of object you have and no matter what environment you work in,\n * you can safely use `fromEvent` on that object if it exposes described methods (provided\n * of course they behave as was described above). So for example if Node.js library exposes\n * event target which has the same method names as DOM EventTarget, `fromEvent` is still\n * a good choice.\n *\n * If the API you use is more callback then event handler oriented (subscribed\n * callback function fires only once and thus there is no need to manually\n * unregister it), you should use {@link bindCallback} or {@link bindNodeCallback}\n * instead.\n *\n * `fromEvent` supports following types of event targets:\n *\n * **DOM EventTarget**\n *\n * This is an object with `addEventListener` and `removeEventListener` methods.\n *\n * In the browser, `addEventListener` accepts - apart from event type string and event\n * handler function arguments - optional third parameter, which is either an object or boolean,\n * both used for additional configuration how and when passed function will be called. When\n * `fromEvent` is used with event target of that type, you can provide this values\n * as third parameter as well.\n *\n * **Node.js EventEmitter**\n *\n * An object with `addListener` and `removeListener` methods.\n *\n * **JQuery-style event target**\n *\n * An object with `on` and `off` methods\n *\n * **DOM NodeList**\n *\n * List of DOM Nodes, returned for example by `document.querySelectorAll` or `Node.childNodes`.\n *\n * Although this collection is not event target in itself, `fromEvent` will iterate over all Nodes\n * it contains and install event handler function in every of them. When returned Observable\n * is unsubscribed, function will be removed from all Nodes.\n *\n * **DOM HtmlCollection**\n *\n * Just as in case of NodeList it is a collection of DOM nodes. Here as well event handler function is\n * installed and removed in each of elements.\n *\n *\n * ## Examples\n * ### Emits clicks happening on the DOM document\n * ```ts\n * import { fromEvent } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * clicks.subscribe(x => console.log(x));\n *\n * // Results in:\n * // MouseEvent object logged to console every time a click\n * // occurs on the document.\n * ```\n *\n * ### Use addEventListener with capture option\n * ```ts\n * import { fromEvent } from 'rxjs';\n *\n * const clicksInDocument = fromEvent(document, 'click', true); // note optional configuration parameter\n *                                                              // which will be passed to addEventListener\n * const clicksInDiv = fromEvent(someDivInDocument, 'click');\n *\n * clicksInDocument.subscribe(() => console.log('document'));\n * clicksInDiv.subscribe(() => console.log('div'));\n *\n * // By default events bubble UP in DOM tree, so normally\n * // when we would click on div in document\n * // \"div\" would be logged first and then \"document\".\n * // Since we specified optional `capture` option, document\n * // will catch event when it goes DOWN DOM tree, so console\n * // will log \"document\" and then \"div\".\n * ```\n *\n * @see {@link bindCallback}\n * @see {@link bindNodeCallback}\n * @see {@link fromEventPattern}\n *\n * @param {FromEventTarget<T>} target The DOM EventTarget, Node.js\n * EventEmitter, JQuery-like event target, NodeList or HTMLCollection to attach the event handler to.\n * @param {string} eventName The event name of interest, being emitted by the\n * `target`.\n * @param {EventListenerOptions} [options] Options to pass through to addEventListener\n * @return {Observable<T>}\n */\nexport function fromEvent<T>(\n  target: any,\n  eventName: string,\n  options?: EventListenerOptions | ((...args: any[]) => T),\n  resultSelector?: (...args: any[]) => T\n): Observable<T> {\n  if (isFunction(options)) {\n    resultSelector = options;\n    options = undefined;\n  }\n  if (resultSelector) {\n    return fromEvent<T>(target, eventName, options as EventListenerOptions).pipe(mapOneOrManyArgs(resultSelector));\n  }\n\n  // Figure out our add and remove methods. In order to do this,\n  // we are going to analyze the target in a preferred order, if\n  // the target matches a given signature, we take the two \"add\" and \"remove\"\n  // method names and apply them to a map to create opposite versions of the\n  // same function. This is because they all operate in duplicate pairs,\n  // `addListener(name, handler)`, `removeListener(name, handler)`, for example.\n  // The call only differs by method name, as to whether or not you're adding or removing.\n  const [add, remove] =\n    // If it is an EventTarget, we need to use a slightly different method than the other two patterns.\n    isEventTarget(target)\n      ? eventTargetMethods.map((methodName) => (handler: any) => target[methodName](eventName, handler, options as EventListenerOptions))\n      : // In all other cases, the call pattern is identical with the exception of the method names.\n      isNodeStyleEventEmitter(target)\n      ? nodeEventEmitterMethods.map(toCommonHandlerRegistry(target, eventName))\n      : isJQueryStyleEventEmitter(target)\n      ? jqueryMethods.map(toCommonHandlerRegistry(target, eventName))\n      : [];\n\n  // If add is falsy, it's because we didn't match a pattern above.\n  // Check to see if it is an ArrayLike, because if it is, we want to\n  // try to apply fromEvent to all of it's items. We do this check last,\n  // because there are may be some types that are both ArrayLike *and* implement\n  // event registry points, and we'd rather delegate to that when possible.\n  if (!add) {\n    if (isArrayLike(target)) {\n      return mergeMap((subTarget: any) => fromEvent(subTarget, eventName, options as EventListenerOptions))(\n        internalFromArray(target)\n      ) as Observable<T>;\n    }\n  }\n\n  // If add is falsy and we made it here, it's because we didn't\n  // match any valid target objects above.\n  if (!add) {\n    throw new TypeError('Invalid event target');\n  }\n\n  return new Observable<T>((subscriber) => {\n    // The handler we are going to register. Forwards the event object, by itself, or\n    // an array of arguments to the event handler, if there is more than one argument,\n    // to the consumer.\n    const handler = (...args: any[]) => subscriber.next(1 < args.length ? args : args[0]);\n    // Do the work of adding the handler to the target.\n    add(handler);\n    // When we teardown, we want to remove the handler and free up memory.\n    return () => remove!(handler);\n  });\n}\n\n/**\n * Used to create `add` and `remove` functions to register and unregister event handlers\n * from a target in the most common handler pattern, where there are only two arguments.\n * (e.g.  `on(name, fn)`, `off(name, fn)`, `addListener(name, fn)`, or `removeListener(name, fn)`)\n * @param target The target we're calling methods on\n * @param eventName The event name for the event we're creating register or unregister functions for\n */\nfunction toCommonHandlerRegistry(target: any, eventName: string) {\n  return (methodName: string) => (handler: any) => target[methodName](eventName, handler);\n}\n\n/**\n * Checks to see if the target implements the required node-style EventEmitter methods\n * for adding and removing event handlers.\n * @param target the object to check\n */\nfunction isNodeStyleEventEmitter(target: any): target is NodeStyleEventEmitter {\n  return isFunction(target.addListener) && isFunction(target.removeListener);\n}\n\n/**\n * Checks to see if the target implements the required jQuery-style EventEmitter methods\n * for adding and removing event handlers.\n * @param target the object to check\n */\nfunction isJQueryStyleEventEmitter(target: any): target is JQueryStyleEventEmitter<any, any> {\n  return isFunction(target.on) && isFunction(target.off);\n}\n\n/**\n * Checks to see if the target implements the required EventTarget methods\n * for adding and removing event handlers.\n * @param target the object to check\n */\nfunction isEventTarget(target: any): target is HasEventTargetAddRemove<any> {\n  return isFunction(target.addEventListener) && isFunction(target.removeEventListener);\n}\n","import { Observable } from '../Observable';\nimport { isFunction } from '../util/isFunction';\nimport { NodeEventHandler } from './fromEvent';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\n\n/* tslint:disable:max-line-length */\nexport function fromEventPattern<T>(\n  addHandler: (handler: NodeEventHandler) => any,\n  removeHandler?: (handler: NodeEventHandler, signal?: any) => void\n): Observable<T>;\nexport function fromEventPattern<T>(\n  addHandler: (handler: NodeEventHandler) => any,\n  removeHandler?: (handler: NodeEventHandler, signal?: any) => void,\n  resultSelector?: (...args: any[]) => T\n): Observable<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Creates an Observable from an arbitrary API for registering event handlers.\n *\n * <span class=\"informal\">When that method for adding event handler was something {@link fromEvent}\n * was not prepared for.</span>\n *\n * ![](fromEventPattern.png)\n *\n * `fromEventPattern` allows you to convert into an Observable any API that supports registering handler functions\n * for events. It is similar to {@link fromEvent}, but far\n * more flexible. In fact, all use cases of {@link fromEvent} could be easily handled by\n * `fromEventPattern` (although in slightly more verbose way).\n *\n * This operator accepts as a first argument an `addHandler` function, which will be injected with\n * handler parameter. That handler is actually an event handler function that you now can pass\n * to API expecting it. `addHandler` will be called whenever Observable\n * returned by the operator is subscribed, so registering handler in API will not\n * necessarily happen when `fromEventPattern` is called.\n *\n * After registration, every time an event that we listen to happens,\n * Observable returned by `fromEventPattern` will emit value that event handler\n * function was called with. Note that if event handler was called with more\n * than one argument, second and following arguments will not appear in the Observable.\n *\n * If API you are using allows to unregister event handlers as well, you can pass to `fromEventPattern`\n * another function - `removeHandler` - as a second parameter. It will be injected\n * with the same handler function as before, which now you can use to unregister\n * it from the API. `removeHandler` will be called when consumer of resulting Observable\n * unsubscribes from it.\n *\n * In some APIs unregistering is actually handled differently. Method registering an event handler\n * returns some kind of token, which is later used to identify which function should\n * be unregistered or it itself has method that unregisters event handler.\n * If that is the case with your API, make sure token returned\n * by registering method is returned by `addHandler`. Then it will be passed\n * as a second argument to `removeHandler`, where you will be able to use it.\n *\n * If you need access to all event handler parameters (not only the first one),\n * or you need to transform them in any way, you can call `fromEventPattern` with optional\n * third parameter - project function which will accept all arguments passed to\n * event handler when it is called. Whatever is returned from project function will appear on\n * resulting stream instead of usual event handlers first argument. This means\n * that default project can be thought of as function that takes its first parameter\n * and ignores the rest.\n *\n * ## Example\n * ### Emits clicks happening on the DOM document\n *\n * ```ts\n * import { fromEventPattern } from 'rxjs';\n *\n * function addClickHandler(handler) {\n *   document.addEventListener('click', handler);\n * }\n *\n * function removeClickHandler(handler) {\n *   document.removeEventListener('click', handler);\n * }\n *\n * const clicks = fromEventPattern(\n *   addClickHandler,\n *   removeClickHandler\n * );\n * clicks.subscribe(x => console.log(x));\n *\n * // Whenever you click anywhere in the browser, DOM MouseEvent\n * // object will be logged.\n * ```\n *\n * ## Example\n * ### Use with API that returns cancellation token\n *\n * ```ts\n * import { fromEventPattern } from 'rxjs';\n *\n * const token = someAPI.registerEventHandler(function() {});\n * someAPI.unregisterEventHandler(token); // this APIs cancellation method accepts\n *                                        // not handler itself, but special token.\n *\n * const someAPIObservable = fromEventPattern(\n *   function(handler) { return someAPI.registerEventHandler(handler); }, // Note that we return the token here...\n *   function(handler, token) { someAPI.unregisterEventHandler(token); }  // ...to then use it here.\n * );\n * ```\n *\n * ## Example\n * ### Use with project function\n *\n * ```ts\n * import { fromEventPattern } from 'rxjs';\n *\n * someAPI.registerEventHandler((eventType, eventMessage) => {\n *   console.log(eventType, eventMessage); // Logs \"EVENT_TYPE\" \"EVENT_MESSAGE\" to console.\n * });\n *\n * const someAPIObservable = fromEventPattern(\n *   handler => someAPI.registerEventHandler(handler),\n *   handler => someAPI.unregisterEventHandler(handler)\n *   (eventType, eventMessage) => eventType + \" --- \" + eventMessage // without that function only \"EVENT_TYPE\"\n * );                                                                // would be emitted by the Observable\n *\n * someAPIObservable.subscribe(value => console.log(value));\n *\n * // Logs:\n * // \"EVENT_TYPE --- EVENT_MESSAGE\"\n * ```\n *\n * @see {@link fromEvent}\n * @see {@link bindCallback}\n * @see {@link bindNodeCallback}\n *\n * @param {function(handler: Function): any} addHandler A function that takes\n * a `handler` function as argument and attaches it somehow to the actual\n * source of events.\n * @param {function(handler: Function, token?: any): void} [removeHandler] A function that\n * takes a `handler` function as an argument and removes it from the event source. If `addHandler`\n * returns some kind of token, `removeHandler` function will have it as a second parameter.\n * @param {function(...args: any): T} [project] A function to\n * transform results. It takes the arguments from the event handler and\n * should return a single value.\n * @return {Observable<T>} Observable which, when an event happens, emits first parameter\n * passed to registered event handler. Alternatively it emits whatever project function returns\n * at that moment.\n */\nexport function fromEventPattern<T>(\n  addHandler: (handler: NodeEventHandler) => any,\n  removeHandler?: (handler: NodeEventHandler, signal?: any) => void,\n  resultSelector?: (...args: any[]) => T\n): Observable<T | T[]> {\n  if (resultSelector) {\n    return fromEventPattern<T>(addHandler, removeHandler).pipe(mapOneOrManyArgs(resultSelector));\n  }\n\n  return new Observable<T | T[]>((subscriber) => {\n    const handler = (...e: T[]) => subscriber.next(e.length === 1 ? e[0] : e);\n    const retValue = addHandler(handler);\n    return isFunction(removeHandler) ? () => removeHandler(handler, retValue) : undefined;\n  });\n}\n","import { Observable } from '../Observable';\nimport { identity } from '../util/identity';\nimport { ObservableInput, SchedulerLike } from '../types';\nimport { isScheduler } from '../util/isScheduler';\nimport { defer } from './defer';\nimport { scheduleIterable } from '../scheduled/scheduleIterable';\n\ntype ConditionFunc<S> = (state: S) => boolean;\ntype IterateFunc<S> = (state: S) => S;\ntype ResultFunc<S, T> = (state: S) => T;\n\nexport interface GenerateBaseOptions<S> {\n  /**\n   * Initial state.\n   */\n  initialState: S;\n  /**\n   * Condition function that accepts state and returns boolean.\n   * When it returns false, the generator stops.\n   * If not specified, a generator never stops.\n   */\n  condition?: ConditionFunc<S>;\n  /**\n   * Iterate function that accepts state and returns new state.\n   */\n  iterate: IterateFunc<S>;\n  /**\n   * SchedulerLike to use for generation process.\n   * By default, a generator starts immediately.\n   */\n  scheduler?: SchedulerLike;\n}\n\nexport interface GenerateOptions<T, S> extends GenerateBaseOptions<S> {\n  /**\n   * Result selection function that accepts state and returns a value to emit.\n   */\n  resultSelector: ResultFunc<S, T>;\n}\n\n/**\n * Generates an observable sequence by running a state-driven loop\n * producing the sequence's elements, using the specified scheduler\n * to send out observer messages.\n *\n * ![](generate.png)\n *\n * ## Examples\n *\n * ### Produces sequences of number\n *\n * ```ts\n * import { generate } from 'rxjs';\n *\n * const result = generate(0, x => x < 3, x => x + 1, x => x);\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 0\n * // 1\n * // 2\n * ```\n *\n * ### Use asap scheduler\n *\n * ```ts\n * import { generate } from 'rxjs';\n *\n * const result = generate(1, x => x < 5, x => x * 2, x => x + 1, asap);\n *\n * result.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 2\n * // 3\n * // 5\n * ```\n *\n * @see {@link from}\n * @see {@link Observable}\n *\n * @param {S} initialState Initial state.\n * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n * @param {function (state: S): S} iterate Iteration step function.\n * @param {function (state: S): T} resultSelector Selector function for results produced in the sequence. (deprecated)\n * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} on which to run the generator loop. If not provided, defaults to emit immediately.\n * @returns {Observable<T>} The generated sequence.\n * @deprecated Instead of passing separate arguments, use the options argument. Signatures taking separate arguments will be removed in v8.\n */\nexport function generate<T, S>(\n  initialState: S,\n  condition: ConditionFunc<S>,\n  iterate: IterateFunc<S>,\n  resultSelector: ResultFunc<S, T>,\n  scheduler?: SchedulerLike\n): Observable<T>;\n\n/**\n * Generates an Observable by running a state-driven loop\n * that emits an element on each iteration.\n *\n * <span class=\"informal\">Use it instead of nexting values in a for loop.</span>\n *\n * ![](generate.png)\n *\n * `generate` allows you to create a stream of values generated with a loop very similar to\n * a traditional for loop. The first argument of `generate` is a beginning value. The second argument\n * is a function that accepts this value and tests if some condition still holds. If it does,\n * then the loop continues, if not, it stops. The third value is a function which takes the\n * previously defined value and modifies it in some way on each iteration. Note how these three parameters\n * are direct equivalents of three expressions in a traditional for loop: the first expression\n * initializes some state (for example, a numeric index), the second tests if the loop can perform the next\n * iteration (for example, if the index is lower than 10) and the third states how the defined value\n * will be modified on every step (for example, the index will be incremented by one).\n *\n * Return value of a `generate` operator is an Observable that on each loop iteration\n * emits a value. First of all, the condition function is ran. If it returns true, then the Observable\n * emits the currently stored value (initial value at the first iteration) and finally updates\n * that value with iterate function. If at some point the condition returns false, then the Observable\n * completes at that moment.\n *\n * Optionally you can pass a fourth parameter to `generate` - a result selector function which allows you\n * to immediately map the value that would normally be emitted by an Observable.\n *\n * If you find three anonymous functions in `generate` call hard to read, you can provide\n * a single object to the operator instead where the object has the properties: `initialState`,\n * `condition`, `iterate` and `resultSelector`, which should have respective values that you\n * would normally pass to `generate`. `resultSelector` is still optional, but that form\n * of calling `generate` allows you to omit `condition` as well. If you omit it, that means\n * condition always holds, or in other words the resulting Observable will never complete.\n *\n * Both forms of `generate` can optionally accept a scheduler. In case of a multi-parameter call,\n * scheduler simply comes as a last argument (no matter if there is a `resultSelector`\n * function or not). In case of a single-parameter call, you can provide it as a\n * `scheduler` property on the object passed to the operator. In both cases, a scheduler decides when\n * the next iteration of the loop will happen and therefore when the next value will be emitted\n * by the Observable. For example, to ensure that each value is pushed to the Observer\n * on a separate task in the event loop, you could use the `async` scheduler. Note that\n * by default (when no scheduler is passed) values are simply emitted synchronously.\n *\n *\n * ## Examples\n *\n * ### Use with condition and iterate functions\n *\n * ```ts\n * import { generate } from 'rxjs';\n *\n * const result = generate(0, x => x < 3, x => x + 1);\n *\n * result.subscribe({\n *   next: value => console.log(value),\n *   complete: () => console.log('Complete!')\n * });\n *\n * // Logs:\n * // 0\n * // 1\n * // 2\n * // \"Complete!\"\n * ```\n *\n * ### Use with condition, iterate and resultSelector functions\n *\n * ```ts\n * import { generate } from 'rxjs';\n *\n * const result = generate(0, x => x < 3, x => x + 1, x => x * 1000);\n *\n * result.subscribe({\n *   next: value => console.log(value),\n *   complete: () => console.log('complete!')\n * });\n *\n * // Logs:\n * // 0\n * // 1000\n * // 2000\n * // \"complete!\"\n * ```\n *\n * ### Use with options object\n *\n * ```ts\n * import { generate } from 'rxjs';\n *\n * const result = generate({\n *   initialState: 0,\n *   condition(value) { return value < 3; },\n *   iterate(value) { return value + 1; },\n *   resultSelector(value) { return value * 1000; }\n * });\n *\n * result.subscribe({\n *   next: value => console.log(value),\n *   complete: () => console.log('complete!')\n * });\n *\n * // Logs:\n * // 0\n * // 1000\n * // 2000\n * // \"Complete!\"\n * ```\n *\n * ### Use options object without condition function\n *\n * ```ts\n * import { generate } from 'rxjs';\n *\n * const result = generate({\n *   initialState: 0,\n *   iterate(value) { return value + 1; },\n *   resultSelector(value) { return value * 1000; }\n * });\n *\n * result.subscribe({\n *   next: value => console.log(value),\n *   complete: () => console.log('complete!') // This will never run\n * });\n *\n * // Logs:\n * // 0\n * // 1000\n * // 2000\n * // 3000\n * // ...and never stops.\n * ```\n *\n * @see {@link from}\n * @see {@link index/Observable.create}\n *\n * @param {S} initialState Initial state.\n * @param {function (state: S): boolean} condition Condition to terminate generation (upon returning false).\n * @param {function (state: S): S} iterate Iteration step function.\n * @param {function (state: S): T} [resultSelector] Selector function for results produced in the sequence.\n * @param {Scheduler} [scheduler] A {@link Scheduler} on which to run the generator loop. If not provided, defaults to emitting immediately.\n * @return {Observable<T>} The generated sequence.\n * @deprecated Instead of passing separate arguments, use the options argument. Signatures taking separate arguments will be removed in v8.\n */\nexport function generate<S>(\n  initialState: S,\n  condition: ConditionFunc<S>,\n  iterate: IterateFunc<S>,\n  scheduler?: SchedulerLike\n): Observable<S>;\n\n/**\n * Generates an observable sequence by running a state-driven loop\n * producing the sequence's elements, using the specified scheduler\n * to send out observer messages.\n * The overload accepts options object that might contain initial state, iterate,\n * condition and scheduler.\n *\n * ![](generate.png)\n *\n * ## Examples\n *\n * ### Use options object with condition function\n *\n * ```ts\n * import { generate } from 'rxjs';\n *\n * const result = generate({\n *   initialState: 0,\n *   condition: x => x < 3,\n *   iterate: x => x + 1,\n * });\n *\n * result.subscribe({\n *   next: value => console.log(value),\n *   complete: () => console.log('complete!')\n * });\n *\n * // Logs:\n * // 0\n * // 1\n * // 2\n * // \"Complete!\".\n * ```\n *\n * @see {@link from}\n * @see {@link Observable}\n *\n * @param {GenerateBaseOptions<S>} options Object that must contain initialState, iterate and might contain condition and scheduler.\n * @returns {Observable<S>} The generated sequence.\n */\nexport function generate<S>(options: GenerateBaseOptions<S>): Observable<S>;\n\n/**\n * Generates an observable sequence by running a state-driven loop\n * producing the sequence's elements, using the specified scheduler\n * to send out observer messages.\n * The overload accepts options object that might contain initial state, iterate,\n * condition, result selector and scheduler.\n *\n * ![](generate.png)\n *\n * ## Examples\n *\n * ### Use options object with condition and iterate function\n *\n * ```ts\n * import { generate } from 'rxjs';\n *\n * const result = generate({\n *   initialState: 0,\n *   condition: x => x < 3,\n *   iterate: x => x + 1,\n *   resultSelector: x => x,\n * });\n *\n * result.subscribe({\n *   next: value => console.log(value),\n *   complete: () => console.log('complete!')\n * });\n *\n * // Logs:\n * // 0\n * // 1\n * // 2\n * // \"Complete!\".\n * ```\n *\n * @see {@link from}\n * @see {@link Observable}\n *\n * @param {GenerateOptions<T, S>} options Object that must contain initialState, iterate, resultSelector and might contain condition and scheduler.\n * @returns {Observable<T>} The generated sequence.\n */\nexport function generate<T, S>(options: GenerateOptions<T, S>): Observable<T>;\n\nexport function generate<T, S>(\n  initialStateOrOptions: S | GenerateOptions<T, S>,\n  condition?: ConditionFunc<S>,\n  iterate?: IterateFunc<S>,\n  resultSelectorOrScheduler?: ResultFunc<S, T> | SchedulerLike,\n  scheduler?: SchedulerLike\n): Observable<T> {\n  let resultSelector: ResultFunc<S, T>;\n  let initialState: S;\n\n  // TODO: Remove this as we move away from deprecated signatures\n  // and move towards a configuration object argument.\n  if (arguments.length === 1) {\n    // If we only have one argument, we can assume it is a configuration object.\n    // Note that folks not using TypeScript may trip over this.\n    ({\n      initialState,\n      condition,\n      iterate,\n      resultSelector = identity as ResultFunc<S, T>,\n      scheduler,\n    } = initialStateOrOptions as GenerateOptions<T, S>);\n  } else {\n    // Deprecated arguments path. Figure out what the user\n    // passed and set it here.\n    initialState = initialStateOrOptions as S;\n    if (!resultSelectorOrScheduler || isScheduler(resultSelectorOrScheduler)) {\n      resultSelector = identity as ResultFunc<S, T>;\n      scheduler = resultSelectorOrScheduler as SchedulerLike;\n    } else {\n      resultSelector = resultSelectorOrScheduler as ResultFunc<S, T>;\n    }\n  }\n\n  // The actual generator used to \"generate\" values.\n  function* gen() {\n    for (let state = initialState; !condition || condition(state); state = iterate!(state)) {\n      yield resultSelector(state);\n    }\n  }\n\n  // We use `defer` because we want to defer the creation of the iterator from the iterable.\n  return defer(\n    (scheduler\n      ? // If a scheduler was provided, use `scheduleIterable` to ensure that iteration/generation\n        // happens on the scheduler.\n        () => scheduleIterable(gen(), scheduler!)\n      : // Otherwise, if there's no scheduler, we can just use the generator function directly in\n        // `defer` and executing it will return the generator (which is iterable).\n        gen) as () => ObservableInput<T>\n  );\n}\n","import { Observable } from '../Observable';\nimport { defer } from './defer';\nimport { ObservableInput } from '../types';\n\n/**\n * Checks a boolean at subscription time, and chooses between one of two observable sources\n *\n * `iif` excepts a function that returns a boolean (the `condition` function), and two sources,\n * the `trueResult` and the `falseResult`, and returns an Observable.\n *\n * At the moment of subscription, the `condition` function is called. If the result is `true`, the\n * subscription will be to the source passed as the `trueResult`, otherwise, the subscription will be\n * to the source passed as the `falseResult`.\n *\n * If you need to check more than two options to choose between more than one observable, have a look at the {@link defer} creation method.\n *\n * ## Examples\n *\n * ### Change at runtime which Observable will be subscribed\n *\n * ```ts\n * import { iif, of } from 'rxjs';\n *\n * let subscribeToFirst;\n * const firstOrSecond = iif(\n *   () => subscribeToFirst,\n *   of('first'),\n *   of('second'),\n * );\n *\n * subscribeToFirst = true;\n * firstOrSecond.subscribe(value => console.log(value));\n *\n * // Logs:\n * // \"first\"\n *\n * subscribeToFirst = false;\n * firstOrSecond.subscribe(value => console.log(value));\n *\n * // Logs:\n * // \"second\"\n *\n * ```\n *\n * ### Control an access to an Observable\n *\n * ```ts\n * let accessGranted;\n * const observableIfYouHaveAccess = iif(\n *   () => accessGranted,\n *   of('It seems you have an access...'), // Note that only one Observable is passed to the operator.\n * );\n *\n * accessGranted = true;\n * observableIfYouHaveAccess.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('The end'),\n * );\n *\n * // Logs:\n * // \"It seems you have an access...\"\n * // \"The end\"\n *\n * accessGranted = false;\n * observableIfYouHaveAccess.subscribe(\n *   value => console.log(value),\n *   err => {},\n *   () => console.log('The end'),\n * );\n *\n * // Logs:\n * // \"The end\"\n * ```\n *\n * @see {@link defer}\n *\n * @param condition Condition which Observable should be chosen.\n * @param trueResult An Observable that will be subscribed if condition is true.\n * @param falseResult An Observable that will be subscribed if condition is false.\n * @return An observable that proxies to `trueResult` or `falseResult`, depending on the result of the `condition` function.\n */\nexport function iif<T, F>(condition: () => boolean, trueResult: ObservableInput<T>, falseResult: ObservableInput<F>): Observable<T | F> {\n  return defer(() => (condition() ? trueResult : falseResult));\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { async as asyncScheduler } from '../scheduler/async';\nimport { isScheduler } from '../util/isScheduler';\nimport { isValidDate } from '../util/isDate';\n\n/**\n * Creates an observable that will wait for a specified time period, or exact date, before\n * emitting the number 0.\n *\n * <span class=\"informal\">Used to emit a notification after a delay.</span>\n *\n * This observable is useful for creating delays in code, or racing against other values\n * for ad-hoc timeouts.\n *\n * The `delay` is specified by default in milliseconds, however providing a custom scheduler could\n * create a different behavior.\n *\n * ## Examples\n *\n * ### Wait 3 seconds and start another observable\n *\n * You might want to use `timer` to delay subscription to an\n * observable by a set amount of time. Here we use a timer with\n * {@link concatMapTo} or {@link concatMap} in order to wait\n * a few seconds and start a subscription to a source.\n *\n * ```ts\n * import { timer, of } from 'rxjs';\n * import { concatMapTo } from 'rxjs/operators';\n *\n * // This could be any observable\n * const source = of(1, 2, 3);\n *\n * const result = timer(3000).pipe(\n *   concatMapTo(source)\n * )\n * .subscribe(console.log);\n * ```\n *\n * ### Take all of the values until the start of the next minute\n *\n * Using the a date as the trigger for the first emission, you can\n * do things like wait until midnight to fire an event, or in this case,\n * wait until a new minute starts (chosen so the example wouldn't take\n * too long to run) in order to stop watching a stream. Leveraging\n * {@link takeUntil}.\n *\n * ```ts\n * import { interval, timer } from 'rxjs';\n * import { takeUntil } from 'rxjs/operators';\n *\n * // Build a Date object that marks the\n * // next minute.\n * const currentDate = new Date();\n * const startOfNextMinute = new Date(\n *   currentDate.getFullYear(),\n *   currentDate.getMonth(),\n *   currentDate.getDate(),\n *   currentDate.getHours(),\n *   currentDate.getMinutes() + 1,\n * )\n *\n * // This could be any observable stream\n * const source = interval(1000);\n *\n * const result = source.pipe(\n *   takeUntil(timer(startOfNextMinute))\n * );\n *\n * result.subscribe(console.log);\n * ```\n *\n * ### Known Limitations\n *\n * - The {@link asyncScheduler} uses `setTimeout` which has limitations for how far in the future it can be scheduled.\n *\n * - If a `scheduler` is provided that returns a timestamp other than an epoch from `now()`, and\n * a `Date` object is passed to the `dueTime` argument, the calculation for when the first emission\n * should occur will be incorrect. In this case, it would be best to do your own calculations\n * ahead of time, and pass a `number` in as the `dueTime`.\n *\n * @param due If a `number`, the amount of time in seconds to wait before emitting.\n * If a `Date`, the exact time at which to emit.\n * @param scheduler The scheduler to use to schedule the delay. Defaults to {@link asyncScheduler}.\n */\nexport function timer(due: number | Date, scheduler?: SchedulerLike): Observable<0>;\n\n/**\n * Creates an observable that starts an interval after a specified delay, emitting incrementing numbers -- starting at `0` --\n * on each interval after words.\n *\n * The `delay` and `intervalDuration` are specified by default in milliseconds, however providing a custom scheduler could\n * create a different behavior.\n *\n * ## Example\n *\n * ### Start an interval that starts right away\n *\n * Since {@link index/interval} waits for the passed delay before starting,\n * sometimes that's not ideal. You may want to start an interval immediately.\n * `timer` works well for this. Here we have both side-by-side so you can\n * see them in comparison.\n *\n * Note that this observable will never complete.\n *\n * ```ts\n * import { timer, interval } from 'rxjs';\n *\n * timer(0, 1000).subscribe(n => console.log('timer', n));\n * interval(1000).subscribe(n => console.log('interval', n));\n * ```\n *\n * ### Known Limitations\n *\n * - The {@link asyncScheduler} uses `setTimeout` which has limitations for how far in the future it can be scheduled.\n *\n * - If a `scheduler` is provided that returns a timestamp other than an epoch from `now()`, and\n * a `Date` object is passed to the `dueTime` argument, the calculation for when the first emission\n * should occur will be incorrect. In this case, it would be best to do your own calculations\n * ahead of time, and pass a `number` in as the `startDue`.\n * @param startDue If a `number`, is the time to wait before starting the interval.\n * If a `Date`, is the exact time at which to start the interval.\n * @param intervalDuration The delay between each value emitted in the interval. Passing a\n * negative number here will result in immediate completion after the first value is emitted, as though\n * no `intervalDuration` was passed at all.\n * @param scheduler The scheduler to use to schedule the delay. Defaults to {@link asyncScheduler}.\n */\nexport function timer(startDue: number | Date, intervalDuration: number, scheduler?: SchedulerLike): Observable<number>;\n\n/**\n * @deprecated The signature allowing `undefined` to be passed for `intervalDuration` will be removed in v8. Use the `timer(dueTime, scheduler?)` signature instead.\n */\nexport function timer(dueTime: number | Date, unused: undefined, scheduler?: SchedulerLike): Observable<0>;\n\nexport function timer(\n  dueTime: number | Date = 0,\n  intervalOrScheduler?: number | SchedulerLike,\n  scheduler: SchedulerLike = asyncScheduler\n): Observable<number> {\n  // Since negative intervalDuration is treated as though no\n  // interval was specified at all, we start with a negative number.\n  let intervalDuration = -1;\n\n  if (intervalOrScheduler != null) {\n    // If we have a second argument, and it's a scheduler,\n    // override the scheduler we had defaulted. Otherwise,\n    // it must be an interval.\n    if (isScheduler(intervalOrScheduler)) {\n      scheduler = intervalOrScheduler;\n    } else {\n      // Note that this *could* be negative, in which case\n      // it's like not passing an intervalDuration at all.\n      intervalDuration = intervalOrScheduler;\n    }\n  }\n\n  return new Observable((subscriber) => {\n    // If a valid date is passed, calculate how long to wait before\n    // executing the first value... otherwise, if it's a number just schedule\n    // that many milliseconds (or scheduler-specified unit size) in the future.\n    let due = isValidDate(dueTime) ? +dueTime - scheduler!.now() : dueTime;\n\n    if (due < 0) {\n      // Ensure we don't schedule in the future.\n      due = 0;\n    }\n\n    // The incrementing value we emit.\n    let n = 0;\n\n    // Start the timer.\n    return scheduler.schedule(function () {\n      if (!subscriber.closed) {\n        // Emit the next value and increment.\n        subscriber.next(n++);\n\n        if (0 <= intervalDuration) {\n          // If we have a interval after the initial timer,\n          // reschedule with the period.\n          this.schedule(undefined, intervalDuration);\n        } else {\n          // We didn't have an interval. So just complete.\n          subscriber.complete();\n        }\n      }\n    }, due);\n  });\n}\n","import { Observable } from '../Observable';\nimport { asyncScheduler } from '../scheduler/async';\nimport { SchedulerLike } from '../types';\nimport { timer } from './timer';\n\n/**\n * Creates an Observable that emits sequential numbers every specified\n * interval of time, on a specified {@link SchedulerLike}.\n *\n * <span class=\"informal\">Emits incremental numbers periodically in time.\n * </span>\n *\n * ![](interval.png)\n *\n * `interval` returns an Observable that emits an infinite sequence of\n * ascending integers, with a constant interval of time of your choosing\n * between those emissions. The first emission is not sent immediately, but\n * only after the first period has passed. By default, this operator uses the\n * `async` {@link SchedulerLike} to provide a notion of time, but you may pass any\n * {@link SchedulerLike} to it.\n *\n * ## Example\n * Emits ascending numbers, one every second (1000ms) up to the number 3\n * ```ts\n * import { interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const numbers = interval(1000);\n *\n * const takeFourNumbers = numbers.pipe(take(4));\n *\n * takeFourNumbers.subscribe(x => console.log('Next: ', x));\n *\n * // Logs:\n * // Next: 0\n * // Next: 1\n * // Next: 2\n * // Next: 3\n * ```\n *\n * @see {@link timer}\n * @see {@link delay}\n *\n * @param {number} [period=0] The interval size in milliseconds (by default)\n * or the time unit determined by the scheduler's clock.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for scheduling\n * the emission of values, and providing a notion of \"time\".\n * @return {Observable} An Observable that emits a sequential number each time\n * interval.\n */\nexport function interval(period = 0, scheduler: SchedulerLike = asyncScheduler): Observable<number> {\n  if (period < 0) {\n    // We cannot schedule an interval in the past.\n    period = 0;\n  }\n\n  return timer(period, period, scheduler);\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, ObservableInputTuple, SchedulerLike } from '../types';\nimport { mergeAll } from '../operators/mergeAll';\nimport { internalFromArray } from './fromArray';\nimport { innerFrom } from './from';\nimport { EMPTY } from './empty';\nimport { popNumber, popScheduler } from '../util/args';\n\nexport function merge<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A[number]>;\nexport function merge<A extends readonly unknown[]>(...sourcesAndConcurrency: [...ObservableInputTuple<A>, number?]): Observable<A[number]>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `mergeAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function merge<A extends readonly unknown[]>(\n  ...sourcesAndScheduler: [...ObservableInputTuple<A>, SchedulerLike?]\n): Observable<A[number]>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `mergeAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function merge<A extends readonly unknown[]>(\n  ...sourcesAndConcurrencyAndScheduler: [...ObservableInputTuple<A>, number?, SchedulerLike?]\n): Observable<A[number]>;\n\n/**\n * Creates an output Observable which concurrently emits all values from every\n * given input Observable.\n *\n * <span class=\"informal\">Flattens multiple Observables together by blending\n * their values into one Observable.</span>\n *\n * ![](merge.png)\n *\n * `merge` subscribes to each given input Observable (as arguments), and simply\n * forwards (without doing any transformation) all the values from all the input\n * Observables to the output Observable. The output Observable only completes\n * once all input Observables have completed. Any error delivered by an input\n * Observable will be immediately emitted on the output Observable.\n *\n * ## Examples\n * ### Merge together two Observables: 1s interval and clicks\n * ```ts\n * import { merge, fromEvent, interval } from 'rxjs';\n *\n * const clicks = fromEvent(document, 'click');\n * const timer = interval(1000);\n * const clicksOrTimer = merge(clicks, timer);\n * clicksOrTimer.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // timer will emit ascending values, one every second(1000ms) to console\n * // clicks logs MouseEvents to console everytime the \"document\" is clicked\n * // Since the two streams are merged you see these happening\n * // as they occur.\n * ```\n *\n * ### Merge together 3 Observables, but only 2 run concurrently\n * ```ts\n * import { merge, interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const timer1 = interval(1000).pipe(take(10));\n * const timer2 = interval(2000).pipe(take(6));\n * const timer3 = interval(500).pipe(take(10));\n * const concurrent = 2; // the argument\n * const merged = merge(timer1, timer2, timer3, concurrent);\n * merged.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - First timer1 and timer2 will run concurrently\n * // - timer1 will emit a value every 1000ms for 10 iterations\n * // - timer2 will emit a value every 2000ms for 6 iterations\n * // - after timer1 hits its max iteration, timer2 will\n * //   continue, and timer3 will start to run concurrently with timer2\n * // - when timer2 hits its max iteration it terminates, and\n * //   timer3 will continue to emit a value every 500ms until it is complete\n * ```\n *\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeMapTo}\n * @see {@link mergeScan}\n *\n * @param {...ObservableInput} observables Input Observables to merge together.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for managing\n * concurrency of input Observables.\n * @return {Observable} an Observable that emits items that are the result of\n * every input Observable.\n */\nexport function merge(...args: (ObservableInput<unknown> | number | SchedulerLike)[]): Observable<unknown> {\n  const scheduler = popScheduler(args);\n  const concurrent = popNumber(args, Infinity);\n  const sources = args as ObservableInput<unknown>[];\n  return !sources.length\n    ? // No source provided\n      EMPTY\n    : sources.length === 1\n    ? // One source? Just return it.\n      innerFrom(sources[0])\n    : // Merge all sources\n      mergeAll(concurrent)(internalFromArray(sources, scheduler));\n}\n","import { Observable } from '../Observable';\nimport { noop } from '../util/noop';\n\n/**\n * An Observable that emits no items to the Observer and never completes.\n *\n * ![](never.png)\n *\n * A simple Observable that emits neither values nor errors nor the completion\n * notification. It can be used for testing purposes or for composing with other\n * Observables. Please note that by never emitting a complete notification, this\n * Observable keeps the subscription from being disposed automatically.\n * Subscriptions need to be manually disposed.\n *\n * ##  Example\n * ### Emit the number 7, then never emit anything else (not even complete)\n * ```ts\n * import { NEVER } from 'rxjs';\n * import { startWith } from 'rxjs/operators';\n *\n * function info() {\n *   console.log('Will not be called');\n * }\n * const result = NEVER.pipe(startWith(7));\n * result.subscribe(x => console.log(x), info, info);\n *\n * ```\n *\n * @see {@link Observable}\n * @see {@link index/EMPTY}\n * @see {@link of}\n * @see {@link throwError}\n */\nexport const NEVER = new Observable<never>(noop);\n\n/**\n * @deprecated Replaced with the {@link NEVER} constant. Will be removed in v8.\n */\nexport function never() {\n  return NEVER;\n}\n","const { isArray } = Array;\n\n/**\n * Used in operators and functions that accept either a list of arguments, or an array of arguments\n * as a single argument.\n */\nexport function argsOrArgArray<T>(args: (T | T[])[]): T[] {\n  return args.length === 1 && isArray(args[0]) ? args[0] : (args as T[]);\n}\n","import { Observable } from '../Observable';\nimport { ObservableInputTuple, OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/from';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\n\nexport function onErrorResumeNext<T, A extends readonly unknown[]>(\n  sources: [...ObservableInputTuple<A>]\n): OperatorFunction<T, T | A[number]>;\nexport function onErrorResumeNext<T, A extends readonly unknown[]>(\n  ...sources: [...ObservableInputTuple<A>]\n): OperatorFunction<T, T | A[number]>;\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables, subscribes to next one on error or complete.</span>\n *\n * ![](onErrorResumeNext.png)\n *\n * `onErrorResumeNext` is an operator that accepts a series of Observables, provided either directly as\n * arguments or as an array. If no single Observable is provided, returned Observable will simply behave the same\n * as the source.\n *\n * `onErrorResumeNext` returns an Observable that starts by subscribing and re-emitting values from the source Observable.\n * When its stream of values ends - no matter if Observable completed or emitted an error - `onErrorResumeNext`\n * will subscribe to the first Observable that was passed as an argument to the method. It will start re-emitting\n * its values as well and - again - when that stream ends, `onErrorResumeNext` will proceed to subscribing yet another\n * Observable in provided series, no matter if previous Observable completed or ended with an error. This will\n * be happening until there is no more Observables left in the series, at which point returned Observable will\n * complete - even if the last subscribed stream ended with an error.\n *\n * `onErrorResumeNext` can be therefore thought of as version of {@link concat} operator, which is more permissive\n * when it comes to the errors emitted by its input Observables. While `concat` subscribes to the next Observable\n * in series only if previous one successfully completed, `onErrorResumeNext` subscribes even if it ended with\n * an error.\n *\n * Note that you do not get any access to errors emitted by the Observables. In particular do not\n * expect these errors to appear in error callback passed to {@link Observable#subscribe}. If you want to take\n * specific actions based on what error was emitted by an Observable, you should try out {@link catchError} instead.\n *\n *\n * ## Example\n * Subscribe to the next Observable after map fails\n * ```ts\n * import { of } from 'rxjs';\n * import { onErrorResumeNext, map } from 'rxjs/operators';\n *\n * of(1, 2, 3, 0).pipe(\n *   map(x => {\n *       if (x === 0) { throw Error(); }\n *        return 10 / x;\n *   }),\n *   onErrorResumeNext(of(1, 2, 3)),\n * )\n * .subscribe(\n *   val => console.log(val),\n *   err => console.log(err),          // Will never be called.\n *   () => console.log('that\\'s it!')\n * );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"that's it!\"\n * ```\n *\n * @see {@link concat}\n * @see {@link catchError}\n *\n * @param {...ObservableInput} nextSources Observables passed either directly or as an array.\n * @return A function that returns an Observable that emits values from source\n * Observable, but - if it errors - subscribes to the next passed Observable\n * and so on, until it completes or runs out of Observables.\n */\nexport function onErrorResumeNext<T, A extends readonly unknown[]>(\n  ...sources: [[...ObservableInputTuple<A>]] | [...ObservableInputTuple<A>]\n): OperatorFunction<T, T | A[number]> {\n  // For some reason, TS 4.1 RC gets the inference wrong here and infers the\n  // result to be `A[number][]` - completely dropping the ObservableInput part\n  // of the type. This makes no sense whatsoever. As a workaround, the type is\n  // asserted explicitly.\n  const nextSources = (argsOrArgArray(sources) as unknown) as ObservableInputTuple<A>;\n\n  return operate((source, subscriber) => {\n    const remaining = [source, ...nextSources];\n    const subscribeNext = () => {\n      if (!subscriber.closed) {\n        if (remaining.length > 0) {\n          let nextSource: Observable<A[number]>;\n          try {\n            nextSource = innerFrom<T | A[number]>(remaining.shift()!);\n          } catch (err) {\n            subscribeNext();\n            return;\n          }\n\n          // Here we have to use one of our Subscribers, or it does not wire up\n          // The `closed` property of upstream Subscribers synchronously, that\n          // would result in situation were we could not stop a synchronous firehose\n          // with something like `take(3)`.\n          const innerSub = new OperatorSubscriber(subscriber, undefined, noop, noop);\n          subscriber.add(nextSource.subscribe(innerSub));\n          innerSub.add(subscribeNext);\n        } else {\n          subscriber.complete();\n        }\n      }\n    };\n\n    subscribeNext();\n  });\n}\n","import { Observable } from '../Observable';\nimport { ObservableInputTuple } from '../types';\nimport { EMPTY } from './empty';\nimport { onErrorResumeNext as onErrorResumeNextWith } from '../operators/onErrorResumeNext';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\n\n/* tslint:disable:max-line-length */\nexport function onErrorResumeNext<A extends readonly unknown[]>(sources: [...ObservableInputTuple<A>]): Observable<A[number]>;\nexport function onErrorResumeNext<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A[number]>;\n\n/* tslint:enable:max-line-length */\n\n/**\n * When any of the provided Observable emits an complete or error notification, it immediately subscribes to the next one\n * that was passed.\n *\n * <span class=\"informal\">Execute series of Observables no matter what, even if it means swallowing errors.</span>\n *\n * ![](onErrorResumeNext.png)\n *\n * `onErrorResumeNext` Will subscribe to each observable source it is provided, in order.\n * If the source it's subscribed to emits an error or completes, it will move to the next source\n * without error.\n *\n * If `onErrorResumeNext` is provided no arguments, or a single, empty array, it will return {@link index/EMPTY}.\n *\n * `onErrorResumeNext` is basically {@link concat}, only it will continue, even if one of its\n * sources emits an error.\n *\n * Note that there is no way to handle any errors thrown by sources via the result of\n * `onErrorResumeNext`. If you want to handle errors thrown in any given source, you can\n * always use the {@link catchError} operator on them before passing them into `onErrorResumeNext`.\n *\n * ## Example\n * Subscribe to the next Observable after map fails</caption>\n * ```ts\n * import { onErrorResumeNext, of } from 'rxjs';\n * import { map } from 'rxjs/operators';\n *\n * onErrorResumeNext(\n *  of(1, 2, 3, 0).pipe(\n *    map(x => {\n *      if (x === 0) throw Error();\n *      return 10 / x;\n *    })\n *  ),\n *  of(1, 2, 3),\n * )\n * .subscribe(\n *   val => console.log(val),\n *   err => console.log(err),          // Will never be called.\n *   () => console.log('done'),\n * );\n *\n * // Logs:\n * // 10\n * // 5\n * // 3.3333333333333335\n * // 1\n * // 2\n * // 3\n * // \"done\"\n * ```\n *\n * @see {@link concat}\n * @see {@link catchError}\n *\n * @param {...ObservableInput} sources Observables (or anything that *is* observable) passed either directly or as an array.\n * @return {Observable} An Observable that concatenates all sources, one after the other,\n * ignoring all errors, such that any error causes it to move on to the next source.\n */\nexport function onErrorResumeNext<A extends readonly unknown[]>(\n  ...sources: [[...ObservableInputTuple<A>]] | [...ObservableInputTuple<A>]\n): Observable<A[number]> {\n  return onErrorResumeNextWith(argsOrArgArray(sources))(EMPTY);\n}\n","import { Observable } from '../Observable';\nimport { SchedulerLike } from '../types';\nimport { from } from './from';\n\n/**\n * @deprecated Use `from(Object.entries(obj))` instead. Will be removed in v8.\n */\nexport function pairs<T>(arr: readonly T[], scheduler?: SchedulerLike): Observable<[string, T]>;\n/**\n * @deprecated Use `from(Object.entries(obj))` instead. Will be removed in v8.\n */\nexport function pairs<O extends Record<string, unknown>>(obj: O, scheduler?: SchedulerLike): Observable<[keyof O, O[keyof O]]>;\n/**\n * @deprecated Use `from(Object.entries(obj))` instead. Will be removed in v8.\n */\nexport function pairs<T>(iterable: Iterable<T>, scheduler?: SchedulerLike): Observable<[string, T]>;\n/**\n * @deprecated Use `from(Object.entries(obj))` instead. Will be removed in v8.\n */\nexport function pairs(\n  n: number | bigint | boolean | ((...args: any[]) => any) | symbol,\n  scheduler?: SchedulerLike\n): Observable<[never, never]>;\n\n/**\n * Convert an object into an Observable of `[key, value]` pairs.\n *\n * <span class=\"informal\">Turn entries of an object into a stream.</span>\n *\n * ![](pairs.png)\n *\n * `pairs` takes an arbitrary object and returns an Observable that emits arrays. Each\n * emitted array has exactly two elements - the first is a key from the object\n * and the second is a value corresponding to that key. Keys are extracted from\n * an object via `Object.keys` function, which means that they will be only\n * enumerable keys that are present on an object directly - not ones inherited\n * via prototype chain.\n *\n * By default these arrays are emitted synchronously. To change that you can\n * pass a {@link SchedulerLike} as a second argument to `pairs`.\n *\n * ## Example\n * ### Converts an object to an Observable\n * ```ts\n * import { pairs } from 'rxjs';\n *\n * const obj = {\n *   foo: 42,\n *   bar: 56,\n *   baz: 78\n * };\n *\n * pairs(obj).subscribe({\n *   next: value => console.log(value),\n *   complete: () => console.log('Complete!')\n * });\n *\n * // Logs:\n * // [\"foo\", 42],\n * // [\"bar\", 56],\n * // [\"baz\", 78],\n * // \"Complete!\"\n * ```\n *\n * ### Object.entries required\n *\n * In IE, you will need to polyfill `Object.entries` in order to use this.\n * [MDN has a polyfill here](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/entries)\n *\n * @param {Object} obj The object to inspect and turn into an\n * Observable sequence.\n * @param {Scheduler} [scheduler] An optional IScheduler to schedule\n * when resulting Observable will emit values.\n * @returns {(Observable<Array<string|T>>)} An observable sequence of\n * [key, value] pairs from the object.\n * @deprecated Use `from(Object.entries(obj))` instead. Will be removed in v8.\n */\nexport function pairs(obj: any, scheduler?: SchedulerLike) {\n  return from(Object.entries(obj), scheduler as any);\n}\n","export function not<T>(pred: (value: T, index: number) => boolean, thisArg: any): (value: T, index: number) => boolean {\n  return (value: T, index: number) => !pred.call(thisArg, value, index); \n}","import { OperatorFunction, MonoTypeOperatorFunction, TruthyTypesOf } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function filter<T, S extends T, A>(predicate: (this: A, value: T, index: number) => value is S, thisArg: A): OperatorFunction<T, S>;\nexport function filter<T, S extends T>(predicate: (value: T, index: number) => value is S): OperatorFunction<T, S>;\nexport function filter<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function filter<T, A>(predicate: (this: A, value: T, index: number) => boolean, thisArg: A): MonoTypeOperatorFunction<T>;\nexport function filter<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T>;\n\n/**\n * Filter items emitted by the source Observable by only emitting those that\n * satisfy a specified predicate.\n *\n * <span class=\"informal\">Like\n * [Array.prototype.filter()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter),\n * it only emits a value from the source if it passes a criterion function.</span>\n *\n * ![](filter.png)\n *\n * Similar to the well-known `Array.prototype.filter` method, this operator\n * takes values from the source Observable, passes them through a `predicate`\n * function and only emits those values that yielded `true`.\n *\n * ## Example\n * Emit only click events whose target was a DIV element\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { filter } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const clicksOnDivs = clicks.pipe(filter(ev => ev.target.tagName === 'DIV'));\n * clicksOnDivs.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n * @see {@link ignoreElements}\n * @see {@link partition}\n * @see {@link skip}\n *\n * @param predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted, if `false` the value is not passed to the output\n * Observable. The `index` parameter is the number `i` for the i-th source\n * emission that has happened since the subscription, starting from the number\n * `0`.\n * @param thisArg An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return A function that returns an Observable that emits items from the\n * source Observable that satisfy the specified `predicate`.\n */\nexport function filter<T>(predicate: (value: T, index: number) => boolean, thisArg?: any): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    // An index passed to our predicate function on each call.\n    let index = 0;\n\n    // Subscribe to the source, all errors and completions are\n    // forwarded to the consumer.\n    source.subscribe(\n      // Call the predicate with the appropriate `this` context,\n      // if the predicate returns `true`, then send the value\n      // to the consumer.\n      new OperatorSubscriber(subscriber, (value) => predicate.call(thisArg, value, index++) && subscriber.next(value))\n    );\n  });\n}\n","import { not } from '../util/not';\nimport { filter } from '../operators/filter';\nimport { ObservableInput } from '../types';\nimport { Observable } from '../Observable';\nimport { innerFrom } from './from';\n\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function partition<T, U extends T, A>(\n  source: ObservableInput<T>,\n  predicate: (this: A, value: T, index: number) => value is U,\n  thisArg: A\n): [Observable<U>, Observable<Exclude<T, U>>];\nexport function partition<T, U extends T>(\n  source: ObservableInput<T>,\n  predicate: (value: T, index: number) => value is U\n): [Observable<U>, Observable<Exclude<T, U>>];\n\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function partition<T, A>(\n  source: ObservableInput<T>,\n  predicate: (this: A, value: T, index: number) => boolean,\n  thisArg: A\n): [Observable<T>, Observable<T>];\nexport function partition<T>(source: ObservableInput<T>, predicate: (value: T, index: number) => boolean): [Observable<T>, Observable<T>];\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * ![](partition.png)\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * ## Example\n * Partition a set of numbers into odds and evens observables\n * ```ts\n * import { of, partition } from 'rxjs';\n *\n * const observableValues = of(1, 2, 3, 4, 5, 6);\n * const [evens$, odds$] = partition(observableValues, (value, index) => value % 2 === 0);\n *\n * odds$.subscribe(x => console.log('odds', x));\n * evens$.subscribe(x => console.log('evens', x));\n *\n * // Logs:\n * // odds 1\n * // odds 3\n * // odds 5\n * // evens 2\n * // evens 4\n * // evens 6\n * ```\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return {[Observable<T>, Observable<T>]} An array with two Observables: one\n * with values that passed the predicate, and another with values that did not\n * pass the predicate.\n */\nexport function partition<T>(\n  source: ObservableInput<T>,\n  predicate: (this: any, value: T, index: number) => boolean,\n  thisArg?: any\n): [Observable<T>, Observable<T>] {\n  return [filter(predicate, thisArg)(innerFrom(source)), filter(not(predicate, thisArg))(innerFrom(source))] as [\n    Observable<T>,\n    Observable<T>\n  ];\n}\n","import { Observable } from '../Observable';\nimport { innerFrom } from './from';\nimport { Subscription } from '../Subscription';\nimport { ObservableInput, ObservableInputTuple } from '../types';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { OperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { Subscriber } from '../Subscriber';\n\nexport function race<T extends readonly unknown[]>(inputs: [...ObservableInputTuple<T>]): Observable<T[number]>;\nexport function race<T extends readonly unknown[]>(...inputs: [...ObservableInputTuple<T>]): Observable<T[number]>;\n\n/**\n * Returns an observable that mirrors the first source observable to emit an item.\n *\n * ![](race.png)\n *\n * `race` returns an observable, that when subscribed to, subscribes to all source observables immediately.\n * As soon as one of the source observables emits a value, the result unsubscribes from the other sources.\n * The resulting observable will forward all notifications, including error and completion, from the \"winning\"\n * source observable.\n *\n * If one of the used source observable throws an errors before a first notification\n * the race operator will also throw an error, no matter if another source observable\n * could potentially win the race.\n *\n * `race` can be useful for selecting the response from the fastest network connection for\n * HTTP or WebSockets. `race` can also be useful for switching observable context based on user\n * input.\n *\n * ## Example\n * ### Subscribes to the observable that was the first to start emitting.\n *\n * ```ts\n * import { race, interval } from 'rxjs';\n * import { mapTo } from 'rxjs/operators';\n *\n * const obs1 = interval(1000).pipe(mapTo('fast one'));\n * const obs2 = interval(3000).pipe(mapTo('medium one'));\n * const obs3 = interval(5000).pipe(mapTo('slow one'));\n *\n * race(obs3, obs1, obs2)\n * .subscribe(\n *   winner => console.log(winner)\n * );\n *\n * // Outputs\n * // a series of 'fast one'\n * ```\n *\n * @param {...Observables} ...observables sources used to race for which Observable emits first.\n * @return {Observable} an Observable that mirrors the output of the first Observable to emit an item.\n */\nexport function race<T>(...sources: (ObservableInput<T> | ObservableInput<T>[])[]): Observable<any> {\n  sources = argsOrArgArray(sources);\n  // If only one source was passed, just return it. Otherwise return the race.\n  return sources.length === 1 ? innerFrom(sources[0] as ObservableInput<T>) : new Observable<T>(raceInit(sources as ObservableInput<T>[]));\n}\n\n/**\n * An observable initializer function for both the static version and the\n * operator version of race.\n * @param sources The sources to race\n */\nexport function raceInit<T>(sources: ObservableInput<T>[]) {\n  return (subscriber: Subscriber<T>) => {\n    let subscriptions: Subscription[] = [];\n\n    // Subscribe to all of the sources. Note that we are checking `subscriptions` here\n    // Is is an array of all actively \"racing\" subscriptions, and it is `null` after the\n    // race has been won. So, if we have racer that synchronously \"wins\", this loop will\n    // stop before it subscribes to any more.\n    for (let i = 0; subscriptions && !subscriber.closed && i < sources.length; i++) {\n      subscriptions.push(\n        innerFrom(sources[i] as ObservableInput<T>).subscribe(\n          new OperatorSubscriber(subscriber, (value) => {\n            if (subscriptions) {\n              // We're still racing, but we won! So unsubscribe\n              // all other subscriptions that we have, except this one.\n              for (let s = 0; s < subscriptions.length; s++) {\n                s !== i && subscriptions[s].unsubscribe();\n              }\n              subscriptions = null!;\n            }\n            subscriber.next(value);\n          })\n        )\n      );\n    }\n  };\n}\n","import { SchedulerLike } from '../types';\nimport { Observable } from '../Observable';\nimport { EMPTY } from './empty';\n\nexport function range(start: number, count?: number): Observable<number>;\n\n/**\n * @deprecated The `scheduler` parameter will be removed in v8. Use `range(start, count).pipe(observeOn(scheduler))` instead. Details: Details: https://rxjs.dev/deprecations/scheduler-argument\n */\nexport function range(start: number, count: number | undefined, scheduler: SchedulerLike): Observable<number>;\n\n/**\n * Creates an Observable that emits a sequence of numbers within a specified\n * range.\n *\n * <span class=\"informal\">Emits a sequence of numbers in a range.</span>\n *\n * ![](range.png)\n *\n * `range` operator emits a range of sequential integers, in order, where you\n * select the `start` of the range and its `length`. By default, uses no\n * {@link SchedulerLike} and just delivers the notifications synchronously, but may use\n * an optional {@link SchedulerLike} to regulate those deliveries.\n *\n * ## Example\n *\n * ### Produce a range of numbers\n *\n * ```ts\n * import { range } from 'rxjs';\n *\n * const numbers = range(1, 3);\n *\n * numbers.subscribe({\n *  next: value => { console.log(value) },\n *  complete: () => { console.log('Complete!') }\n * });\n *\n * // Logs:\n * // 1\n * // 2\n * // 3\n * // \"Complete!\"\n * ```\n *\n * @see {@link timer}\n * @see {@link index/interval}\n *\n * @param {number} [start=0] The value of the first integer in the sequence.\n * @param {number} count The number of sequential integers to generate.\n * @param {SchedulerLike} [scheduler] A {@link SchedulerLike} to use for scheduling\n * the emissions of the notifications.\n * @return {Observable} An Observable of numbers that emits a finite range of\n * sequential integers.\n */\nexport function range(start: number, count?: number, scheduler?: SchedulerLike): Observable<number> {\n  if (count == null) {\n    // If one argument was passed, it's the count, not the start.\n    count = start;\n    start = 0;\n  }\n\n  if (count <= 0) {\n    // No count? We're going nowhere. Return EMPTY.\n    return EMPTY;\n  }\n\n  // Where the range should stop.\n  const end = count + start;\n\n  return new Observable(\n    scheduler\n      ? // The deprecated scheduled path.\n        (subscriber) => {\n          let n = start;\n          return scheduler.schedule(function () {\n            if (n < end) {\n              subscriber.next(n++);\n              this.schedule();\n            } else {\n              subscriber.complete();\n            }\n          });\n        }\n      : // Standard synchronous range.\n        (subscriber) => {\n          let n = start;\n          while (n < end && !subscriber.closed) {\n            subscriber.next(n++);\n          }\n          subscriber.complete();\n        }\n  );\n}\n","import { Observable } from '../Observable';\nimport { Unsubscribable, ObservableInput, ObservedValueOf } from '../types';\nimport { innerFrom } from './from';\nimport { EMPTY } from './empty';\n\n/**\n * Creates an Observable that uses a resource which will be disposed at the same time as the Observable.\n *\n * <span class=\"informal\">Use it when you catch yourself cleaning up after an Observable.</span>\n *\n * `using` is a factory operator, which accepts two functions. First function returns a disposable resource.\n * It can be an arbitrary object that implements `unsubscribe` method. Second function will be injected with\n * that object and should return an Observable. That Observable can use resource object during its execution.\n * Both functions passed to `using` will be called every time someone subscribes - neither an Observable nor\n * resource object will be shared in any way between subscriptions.\n *\n * When Observable returned by `using` is subscribed, Observable returned from the second function will be subscribed\n * as well. All its notifications (nexted values, completion and error events) will be emitted unchanged by the output\n * Observable. If however someone unsubscribes from the Observable or source Observable completes or errors by itself,\n * the `unsubscribe` method on resource object will be called. This can be used to do any necessary clean up, which\n * otherwise would have to be handled by hand. Note that complete or error notifications are not emitted when someone\n * cancels subscription to an Observable via `unsubscribe`, so `using` can be used as a hook, allowing you to make\n * sure that all resources which need to exist during an Observable execution will be disposed at appropriate time.\n *\n * @see {@link defer}\n *\n * @param {function(): ISubscription} resourceFactory A function which creates any resource object\n * that implements `unsubscribe` method.\n * @param {function(resource: ISubscription): Observable<T>} observableFactory A function which\n * creates an Observable, that can use injected resource object.\n * @return {Observable<T>} An Observable that behaves the same as Observable returned by `observableFactory`, but\n * which - when completed, errored or unsubscribed - will also call `unsubscribe` on created resource object.\n */\nexport function using<T extends ObservableInput<any>>(\n  resourceFactory: () => Unsubscribable | void,\n  observableFactory: (resource: Unsubscribable | void) => T | void\n): Observable<ObservedValueOf<T>> {\n  return new Observable<ObservedValueOf<T>>((subscriber) => {\n    const resource = resourceFactory();\n    const result = observableFactory(resource);\n    const source = result ? innerFrom(result) : EMPTY;\n    source.subscribe(subscriber);\n    return () => {\n      // NOTE: Optional chaining did not work here.\n      // Related TS Issue: https://github.com/microsoft/TypeScript/issues/40818\n      if (resource) {\n        resource.unsubscribe();\n      }\n    };\n  });\n}\n","import { Observable } from '../Observable';\nimport { ObservableInputTuple } from '../types';\nimport { innerFrom } from './from';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { EMPTY } from './empty';\nimport { OperatorSubscriber } from '../operators/OperatorSubscriber';\nimport { popResultSelector } from '../util/args';\n\nexport function zip<A extends readonly unknown[]>(sources: [...ObservableInputTuple<A>]): Observable<A>;\nexport function zip<A extends readonly unknown[], R>(\n  sources: [...ObservableInputTuple<A>],\n  resultSelector: (...values: A) => R\n): Observable<R>;\nexport function zip<A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): Observable<A>;\nexport function zip<A extends readonly unknown[], R>(\n  ...sourcesAndResultSelector: [...ObservableInputTuple<A>, (...values: A) => R]\n): Observable<R>;\n\n/**\n * Combines multiple Observables to create an Observable whose values are calculated from the values, in order, of each\n * of its input Observables.\n *\n * If the last parameter is a function, this function is used to compute the created value from the input values.\n * Otherwise, an array of the input values is returned.\n *\n * ## Example\n *\n * Combine age and name from different sources\n *\n * ```ts\n * import { zip, of } from 'rxjs';\n * import { map } from 'rxjs/operators';\n *\n * let age$ = of(27, 25, 29);\n * let name$ = of('Foo', 'Bar', 'Beer');\n * let isDev$ = of(true, true, false);\n *\n * zip(age$, name$, isDev$).pipe(\n *   map(([age, name, isDev]) => ({ age, name, isDev }))\n * )\n * .subscribe(x => console.log(x));\n *\n * // Outputs\n * // { age: 27, name: 'Foo', isDev: true }\n * // { age: 25, name: 'Bar', isDev: true }\n * // { age: 29, name: 'Beer', isDev: false }\n * ```\n * @param sources\n * @return {Observable<R>}\n */\nexport function zip(...args: unknown[]): Observable<unknown> {\n  const resultSelector = popResultSelector(args);\n\n  const sources = argsOrArgArray(args) as Observable<unknown>[];\n\n  return sources.length\n    ? new Observable<unknown[]>((subscriber) => {\n        // A collection of buffers of values from each source.\n        // Keyed by the same index with which the sources were passed in.\n        let buffers: unknown[][] = sources.map(() => []);\n\n        // An array of flags of whether or not the sources have completed.\n        // This is used to check to see if we should complete the result.\n        // Keyed by the same index with which the sources were passed in.\n        let completed = sources.map(() => false);\n\n        // When everything is done, release the arrays above.\n        subscriber.add(() => {\n          buffers = completed = null!;\n        });\n\n        // Loop over our sources and subscribe to each one. The index `i` is\n        // especially important here, because we use it in closures below to\n        // access the related buffers and completion properties\n        for (let sourceIndex = 0; !subscriber.closed && sourceIndex < sources.length; sourceIndex++) {\n          innerFrom(sources[sourceIndex]).subscribe(\n            new OperatorSubscriber(\n              subscriber,\n              (value) => {\n                buffers[sourceIndex].push(value);\n                // if every buffer has at least one value in it, then we\n                // can shift out the oldest value from each buffer and emit\n                // them as an array.\n                if (buffers.every((buffer) => buffer.length)) {\n                  const result: any = buffers.map((buffer) => buffer.shift()!);\n                  // Emit the array. If theres' a result selector, use that.\n                  subscriber.next(resultSelector ? resultSelector(...result) : result);\n                  // If any one of the sources is both complete and has an empty buffer\n                  // then we complete the result. This is because we cannot possibly have\n                  // any more values to zip together.\n                  if (buffers.some((buffer, i) => !buffer.length && completed[i])) {\n                    subscriber.complete();\n                  }\n                }\n              },\n              () => {\n                // This source completed. Mark it as complete so we can check it later\n                // if we have to.\n                completed[sourceIndex] = true;\n                // But, if this complete source has nothing in its buffer, then we\n                // can complete the result, because we can't possibly have any more\n                // values from this to zip together with the other values.\n                !buffers[sourceIndex].length && subscriber.complete();\n              }\n            )\n          );\n        }\n\n        // When everything is done, release the arrays above.\n        return () => {\n          buffers = completed = null!;\n        };\n      })\n    : EMPTY;\n}\n","//////////////////////////////////////////////////////////\n// Here we need to reference our other deep imports\n// so VS code will figure out where they are\n// see conversation here:\n// https://github.com/microsoft/TypeScript/issues/43034\n//////////////////////////////////////////////////////////\n\n// tslint:disable: no-reference\n// It's tempting to add references to all of the deep-import locations, but\n// adding references to those that require DOM types breaks Node projects.\n/// <reference path=\"./operators/index.ts\" />\n/// <reference path=\"./testing/index.ts\" />\n// tslint:enable: no-reference\n\n/* Observable */\nexport { Observable } from './internal/Observable';\nexport { ConnectableObservable } from './internal/observable/ConnectableObservable';\nexport { GroupedObservable } from './internal/operators/groupBy';\nexport { Operator } from './internal/Operator';\nexport { observable } from './internal/symbol/observable';\nexport { animationFrames } from './internal/observable/dom/animationFrames';\n\n/* Subjects */\nexport { Subject } from './internal/Subject';\nexport { BehaviorSubject } from './internal/BehaviorSubject';\nexport { ReplaySubject } from './internal/ReplaySubject';\nexport { AsyncSubject } from './internal/AsyncSubject';\n\n/* Schedulers */\nexport { asap, asapScheduler } from './internal/scheduler/asap';\nexport { async, asyncScheduler } from './internal/scheduler/async';\nexport { queue, queueScheduler } from './internal/scheduler/queue';\nexport { animationFrame, animationFrameScheduler } from './internal/scheduler/animationFrame';\nexport { VirtualTimeScheduler, VirtualAction } from './internal/scheduler/VirtualTimeScheduler';\nexport { Scheduler } from './internal/Scheduler';\n\n/* Subscription */\nexport { Subscription } from './internal/Subscription';\nexport { Subscriber } from './internal/Subscriber';\n\n/* Notification */\nexport { Notification, NotificationKind } from './internal/Notification';\n\n/* Utils */\nexport { pipe } from './internal/util/pipe';\nexport { noop } from './internal/util/noop';\nexport { identity } from './internal/util/identity';\nexport { isObservable } from './internal/util/isObservable';\n\n/* Promise Conversion */\nexport { lastValueFrom } from './internal/lastValueFrom';\nexport { firstValueFrom } from './internal/firstValueFrom';\n\n/* Error types */\nexport { ArgumentOutOfRangeError } from './internal/util/ArgumentOutOfRangeError';\nexport { EmptyError } from './internal/util/EmptyError';\nexport { NotFoundError } from './internal/util/NotFoundError';\nexport { ObjectUnsubscribedError } from './internal/util/ObjectUnsubscribedError';\nexport { SequenceError } from './internal/util/SequenceError';\nexport { TimeoutError } from './internal/operators/timeout';\nexport { UnsubscriptionError } from './internal/util/UnsubscriptionError';\n\n/* Static observable creation exports */\nexport { bindCallback } from './internal/observable/bindCallback';\nexport { bindNodeCallback } from './internal/observable/bindNodeCallback';\nexport { combineLatest } from './internal/observable/combineLatest';\nexport { concat } from './internal/observable/concat';\nexport { connectable } from './internal/observable/connectable';\nexport { defer } from './internal/observable/defer';\nexport { empty } from './internal/observable/empty';\nexport { forkJoin } from './internal/observable/forkJoin';\nexport { from } from './internal/observable/from';\nexport { fromEvent } from './internal/observable/fromEvent';\nexport { fromEventPattern } from './internal/observable/fromEventPattern';\nexport { generate } from './internal/observable/generate';\nexport { iif } from './internal/observable/iif';\nexport { interval } from './internal/observable/interval';\nexport { merge } from './internal/observable/merge';\nexport { never } from './internal/observable/never';\nexport { of } from './internal/observable/of';\nexport { onErrorResumeNext } from './internal/observable/onErrorResumeNext';\nexport { pairs } from './internal/observable/pairs';\nexport { partition } from './internal/observable/partition';\nexport { race } from './internal/observable/race';\nexport { range } from './internal/observable/range';\nexport { throwError } from './internal/observable/throwError';\nexport { timer } from './internal/observable/timer';\nexport { using } from './internal/observable/using';\nexport { zip } from './internal/observable/zip';\nexport { scheduled } from './internal/scheduled/scheduled';\n\n/* Constants */\nexport { EMPTY } from './internal/observable/empty';\nexport { NEVER } from './internal/observable/never';\n\n/* Types */\nexport * from './internal/types';\n\n/* Config */\nexport { config, GlobalConfig } from './internal/config';\n","import { Subscriber } from '../Subscriber';\nimport { MonoTypeOperatorFunction, ObservableInput } from '../types';\n\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/from';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Ignores source values for a duration determined by another Observable, then\n * emits the most recent value from the source Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link auditTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * ![](audit.png)\n *\n * `audit` is similar to `throttle`, but emits the last value from the silenced\n * time window, instead of the first value. `audit` emits the most recent value\n * from the source Observable on the output Observable as soon as its internal\n * timer becomes disabled, and ignores source values while the timer is enabled.\n * Initially, the timer is disabled. As soon as the first source value arrives,\n * the timer is enabled by calling the `durationSelector` function with the\n * source value, which returns the \"duration\" Observable. When the duration\n * Observable emits a value, the timer is disabled, then the most\n * recent source value is emitted on the output Observable, and this process\n * repeats for the next source value.\n *\n * ## Example\n *\n * Emit clicks at a rate of at most one click per second\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { audit } from 'rxjs/operators'\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(audit(ev => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttle}\n *\n * @param durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration, returned as an Observable or a Promise.\n * @return A function that returns an Observable that performs rate-limiting of\n * emissions from the source Observable.\n */\nexport function audit<T>(durationSelector: (value: T) => ObservableInput<any>): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    let lastValue: T | null = null;\n    let durationSubscriber: Subscriber<any> | null = null;\n    let isComplete = false;\n\n    const endDuration = () => {\n      durationSubscriber?.unsubscribe();\n      durationSubscriber = null;\n      if (hasValue) {\n        hasValue = false;\n        const value = lastValue!;\n        lastValue = null;\n        subscriber.next(value);\n      }\n      isComplete && subscriber.complete();\n    };\n\n    const cleanupDuration = () => {\n      durationSubscriber = null;\n      isComplete && subscriber.complete();\n    };\n\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value) => {\n          hasValue = true;\n          lastValue = value;\n          if (!durationSubscriber) {\n            innerFrom(durationSelector(value)).subscribe(\n              (durationSubscriber = new OperatorSubscriber(subscriber, endDuration, cleanupDuration))\n            );\n          }\n        },\n        () => {\n          isComplete = true;\n          (!hasValue || !durationSubscriber || durationSubscriber.closed) && subscriber.complete();\n        }\n      )\n    );\n  });\n}\n","import { async } from '../scheduler/async';\nimport { audit } from './audit';\nimport { timer } from '../observable/timer';\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\n\n/**\n * Ignores source values for `duration` milliseconds, then emits the most recent\n * value from the source Observable, then repeats this process.\n *\n * <span class=\"informal\">When it sees a source value, it ignores that plus\n * the next ones for `duration` milliseconds, and then it emits the most recent\n * value from the source.</span>\n *\n * ![](auditTime.png)\n *\n * `auditTime` is similar to `throttleTime`, but emits the last value from the\n * silenced time window, instead of the first value. `auditTime` emits the most\n * recent value from the source Observable on the output Observable as soon as\n * its internal timer becomes disabled, and ignores source values while the\n * timer is enabled. Initially, the timer is disabled. As soon as the first\n * source value arrives, the timer is enabled. After `duration` milliseconds (or\n * the time unit determined internally by the optional `scheduler`) has passed,\n * the timer is disabled, then the most recent source value is emitted on the\n * output Observable, and this process repeats for the next source value.\n * Optionally takes a {@link SchedulerLike} for managing timers.\n *\n * ## Example\n *\n * Emit clicks at a rate of at most one click per second\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { auditTime } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(auditTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttleTime}\n *\n * @param {number} duration Time to wait before emitting the most recent source\n * value, measured in milliseconds or the time unit determined internally\n * by the optional `scheduler`.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the rate-limiting behavior.\n * @return A function that returns an Observable that performs rate-limiting of\n * emissions from the source Observable.\n */\nexport function auditTime<T>(duration: number, scheduler: SchedulerLike = async): MonoTypeOperatorFunction<T> {\n  return audit(() => timer(duration, scheduler));\n}\n","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Buffers the source Observable values until `closingNotifier` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when another Observable emits.</span>\n *\n * ![](buffer.png)\n *\n * Buffers the incoming Observable values until the given `closingNotifier`\n * Observable emits a value, at which point it emits the buffer on the output\n * Observable and starts a new buffer internally, awaiting the next time\n * `closingNotifier` emits.\n *\n * ## Example\n *\n * On every click, emit array of most recent interval events\n *\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { buffer } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const intervalEvents = interval(1000);\n * const buffered = intervalEvents.pipe(buffer(clicks));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link window}\n *\n * @param {Observable<any>} closingNotifier An Observable that signals the\n * buffer to be emitted on the output Observable.\n * @return A function that returns an Observable of buffers, which are arrays\n * of values.\n */\nexport function buffer<T>(closingNotifier: Observable<any>): OperatorFunction<T, T[]> {\n  return operate((source, subscriber) => {\n    // The current buffered values.\n    let currentBuffer: T[] = [];\n\n    // Subscribe to our source.\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value) => currentBuffer.push(value),\n        () => {\n          subscriber.next(currentBuffer);\n          subscriber.complete();\n        }\n      )\n    );\n\n    // Subscribe to the closing notifier.\n    closingNotifier.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        () => {\n          // Start a new buffer and emit the previous one.\n          const b = currentBuffer;\n          currentBuffer = [];\n          subscriber.next(b);\n        },\n        noop\n      )\n    );\n\n    return () => {\n      // Ensure buffered values are released on teardown.\n      currentBuffer = null!;\n    };\n  });\n}\n","import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { arrRemove } from '../util/arrRemove';\n\n/**\n * Buffers the source Observable values until the size hits the maximum\n * `bufferSize` given.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * that array only when its size reaches `bufferSize`.</span>\n *\n * ![](bufferCount.png)\n *\n * Buffers a number of values from the source Observable by `bufferSize` then\n * emits the buffer and clears it, and starts a new buffer each\n * `startBufferEvery` values. If `startBufferEvery` is not provided or is\n * `null`, then new buffers are started immediately at the start of the source\n * and when each buffer closes and is emitted.\n *\n * ## Examples\n *\n * Emit the last two click events as an array\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { bufferCount } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferCount(2));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * On every click, emit the last two click events as an array\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { bufferCount } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferCount(2, 1));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link pairwise}\n * @see {@link windowCount}\n *\n * @param {number} bufferSize The maximum size of the buffer emitted.\n * @param {number} [startBufferEvery] Interval at which to start a new buffer.\n * For example if `startBufferEvery` is `2`, then a new buffer will be started\n * on every other value from the source. A new buffer is started at the\n * beginning of the source by default.\n * @return A function that returns an Observable of arrays of buffered values.\n */\nexport function bufferCount<T>(bufferSize: number, startBufferEvery: number | null = null): OperatorFunction<T, T[]> {\n  // If no `startBufferEvery` value was supplied, then we're\n  // opening and closing on the bufferSize itself.\n  startBufferEvery = startBufferEvery ?? bufferSize;\n\n  return operate((source, subscriber) => {\n    let buffers: T[][] = [];\n    let count = 0;\n\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value) => {\n          let toEmit: T[][] | null = null;\n\n          // Check to see if we need to start a buffer.\n          // This will start one at the first value, and then\n          // a new one every N after that.\n          if (count++ % startBufferEvery! === 0) {\n            buffers.push([]);\n          }\n\n          // Push our value into our active buffers.\n          for (const buffer of buffers) {\n            buffer.push(value);\n            // Check to see if we're over the bufferSize\n            // if we are, record it so we can emit it later.\n            // If we emitted it now and removed it, it would\n            // mutate the `buffers` array while we're looping\n            // over it.\n            if (bufferSize <= buffer.length) {\n              toEmit = toEmit ?? [];\n              toEmit.push(buffer);\n            }\n          }\n\n          if (toEmit) {\n            // We have found some buffers that are over the\n            // `bufferSize`. Emit them, and remove them from our\n            // buffers list.\n            for (const buffer of toEmit) {\n              arrRemove(buffers, buffer);\n              subscriber.next(buffer);\n            }\n          }\n        },\n        () => {\n          // When the source completes, emit all of our\n          // active buffers.\n          for (const buffer of buffers) {\n            subscriber.next(buffer);\n          }\n          subscriber.complete();\n        },\n        // Pass all errors through to consumer.\n        undefined,\n        () => {\n          // Clean up our memory when we teardown\n          buffers = null!;\n        }\n      )\n    );\n  });\n}\n","import { Subscription } from '../Subscription';\nimport { OperatorFunction, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { arrRemove } from '../util/arrRemove';\nimport { asyncScheduler } from '../scheduler/async';\nimport { popScheduler } from '../util/args';\n\n/* tslint:disable:max-line-length */\nexport function bufferTime<T>(bufferTimeSpan: number, scheduler?: SchedulerLike): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(\n  bufferTimeSpan: number,\n  bufferCreationInterval: number | null | undefined,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T[]>;\nexport function bufferTime<T>(\n  bufferTimeSpan: number,\n  bufferCreationInterval: number | null | undefined,\n  maxBufferSize: number,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T[]>;\n/* tslint:enable:max-line-length */\n\n/**\n * Buffers the source Observable values for a specific time period.\n *\n * <span class=\"informal\">Collects values from the past as an array, and emits\n * those arrays periodically in time.</span>\n *\n * ![](bufferTime.png)\n *\n * Buffers values from the source for a specific time duration `bufferTimeSpan`.\n * Unless the optional argument `bufferCreationInterval` is given, it emits and\n * resets the buffer every `bufferTimeSpan` milliseconds. If\n * `bufferCreationInterval` is given, this operator opens the buffer every\n * `bufferCreationInterval` milliseconds and closes (emits and resets) the\n * buffer every `bufferTimeSpan` milliseconds. When the optional argument\n * `maxBufferSize` is specified, the buffer will be closed either after\n * `bufferTimeSpan` milliseconds or when it contains `maxBufferSize` elements.\n *\n * ## Examples\n *\n * Every second, emit an array of the recent click events\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { bufferTime } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferTime(1000));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * Every 5 seconds, emit the click events from the next 2 seconds\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { bufferTime } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferTime(2000, 5000));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferToggle}\n * @see {@link bufferWhen}\n * @see {@link windowTime}\n *\n * @param {number} bufferTimeSpan The amount of time to fill each buffer array.\n * @param {number} [bufferCreationInterval] The interval at which to start new\n * buffers.\n * @param {number} [maxBufferSize] The maximum buffer size.\n * @param {SchedulerLike} [scheduler=async] The scheduler on which to schedule the\n * intervals that determine buffer boundaries.\n * @return A function that returns an Observable of arrays of buffered values.\n */\nexport function bufferTime<T>(bufferTimeSpan: number, ...otherArgs: any[]): OperatorFunction<T, T[]> {\n  const scheduler = popScheduler(otherArgs) ?? asyncScheduler;\n  const bufferCreationInterval = (otherArgs[0] as number) ?? null;\n  const maxBufferSize = (otherArgs[1] as number) || Infinity;\n\n  return operate((source, subscriber) => {\n    // The active buffers, their related subscriptions, and removal functions.\n    let bufferRecords: { buffer: T[]; subs: Subscription }[] | null = [];\n    // If true, it means that every time we emit a buffer, we want to start a new buffer\n    // this is only really used for when *just* the buffer time span is passed.\n    let restartOnEmit = false;\n\n    /**\n     * Does the work of emitting the buffer from the record, ensuring that the\n     * record is removed before the emission so reentrant code (from some custom scheduling, perhaps)\n     * does not alter the buffer. Also checks to see if a new buffer needs to be started\n     * after the emit.\n     */\n    const emit = (record: { buffer: T[]; subs: Subscription }) => {\n      const { buffer, subs } = record;\n      subs.unsubscribe();\n      arrRemove(bufferRecords, record);\n      subscriber.next(buffer);\n      restartOnEmit && startBuffer();\n    };\n\n    /**\n     * Called every time we start a new buffer. This does\n     * the work of scheduling a job at the requested bufferTimeSpan\n     * that will emit the buffer (if it's not unsubscribed before then).\n     */\n    const startBuffer = () => {\n      if (bufferRecords) {\n        const subs = new Subscription();\n        subscriber.add(subs);\n        const buffer: T[] = [];\n        const record = {\n          buffer,\n          subs,\n        };\n        bufferRecords.push(record);\n        subs.add(scheduler.schedule(() => emit(record), bufferTimeSpan));\n      }\n    };\n\n    bufferCreationInterval !== null && bufferCreationInterval >= 0\n      ? // The user passed both a bufferTimeSpan (required), and a creation interval\n        // That means we need to start new buffers on the interval, and those buffers need\n        // to wait the required time span before emitting.\n        subscriber.add(\n          scheduler.schedule(function () {\n            startBuffer();\n            !this.closed && subscriber.add(this.schedule(null, bufferCreationInterval));\n          }, bufferCreationInterval)\n        )\n      : (restartOnEmit = true);\n\n    startBuffer();\n\n    const bufferTimeSubscriber = new OperatorSubscriber(\n      subscriber,\n      (value: T) => {\n        // Copy the records, so if we need to remove one we\n        // don't mutate the array. It's hard, but not impossible to\n        // set up a buffer time that could mutate the array and\n        // cause issues here.\n        const recordsCopy = bufferRecords!.slice();\n        for (const record of recordsCopy) {\n          // Loop over all buffers and\n          const { buffer } = record;\n          buffer.push(value);\n          // If the buffer is over the max size, we need to emit it.\n          maxBufferSize <= buffer.length && emit(record);\n        }\n      },\n      () => {\n        // The source completed, emit all of the active\n        // buffers we have before we complete.\n        while (bufferRecords?.length) {\n          subscriber.next(bufferRecords.shift()!.buffer);\n        }\n        bufferTimeSubscriber?.unsubscribe();\n        subscriber.complete();\n        subscriber.unsubscribe();\n      },\n      // Pass all errors through to consumer.\n      undefined,\n      // Clean up\n      () => (bufferRecords = null)\n    );\n\n    source.subscribe(bufferTimeSubscriber);\n  });\n}\n","import { Subscription } from '../Subscription';\nimport { OperatorFunction, ObservableInput } from '../types';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/from';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nimport { arrRemove } from '../util/arrRemove';\n\n/**\n * Buffers the source Observable values starting from an emission from\n * `openings` and ending when the output of `closingSelector` emits.\n *\n * <span class=\"informal\">Collects values from the past as an array. Starts\n * collecting only when `opening` emits, and calls the `closingSelector`\n * function to get an Observable that tells when to close the buffer.</span>\n *\n * ![](bufferToggle.png)\n *\n * Buffers values from the source by opening the buffer via signals from an\n * Observable provided to `openings`, and closing and sending the buffers when\n * a Subscribable or Promise returned by the `closingSelector` function emits.\n *\n * ## Example\n *\n * Every other second, emit the click events from the next 500ms\n *\n * ```ts\n * import { fromEvent, interval, EMPTY } from 'rxjs';\n * import { bufferToggle } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const openings = interval(1000);\n * const buffered = clicks.pipe(bufferToggle(openings, i =>\n *   i % 2 ? interval(500) : EMPTY\n * ));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferWhen}\n * @see {@link windowToggle}\n *\n * @param openings A Subscribable or Promise of notifications to start new\n * buffers.\n * @param closingSelector A function that takes\n * the value emitted by the `openings` observable and returns a Subscribable or Promise,\n * which, when it emits, signals that the associated buffer should be emitted\n * and cleared.\n * @return A function that returns an Observable of arrays of buffered values.\n */\nexport function bufferToggle<T, O>(\n  openings: ObservableInput<O>,\n  closingSelector: (value: O) => ObservableInput<any>\n): OperatorFunction<T, T[]> {\n  return operate((source, subscriber) => {\n    const buffers: T[][] = [];\n\n    // Subscribe to the openings notifier first\n    innerFrom(openings).subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (openValue) => {\n          const buffer: T[] = [];\n          buffers.push(buffer);\n          // We use this composite subscription, so that\n          // when the closing notifier emits, we can tear it down.\n          const closingSubscription = new Subscription();\n\n          const emitBuffer = () => {\n            arrRemove(buffers, buffer);\n            subscriber.next(buffer);\n            closingSubscription.unsubscribe();\n          };\n\n          // The line below will add the subscription to the parent subscriber *and* the closing subscription.\n          closingSubscription.add(innerFrom(closingSelector(openValue)).subscribe(new OperatorSubscriber(subscriber, emitBuffer, noop)));\n        },\n        noop\n      )\n    );\n\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value) => {\n          // Value from our source. Add it to all pending buffers.\n          for (const buffer of buffers) {\n            buffer.push(value);\n          }\n        },\n        () => {\n          // Source complete. Emit all pending buffers.\n          while (buffers.length > 0) {\n            subscriber.next(buffers.shift()!);\n          }\n          subscriber.complete();\n        }\n      )\n    );\n  });\n}\n","import { Subscriber } from '../Subscriber';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/from';\n\n/**\n * Buffers the source Observable values, using a factory function of closing\n * Observables to determine when to close, emit, and reset the buffer.\n *\n * <span class=\"informal\">Collects values from the past as an array. When it\n * starts collecting values, it calls a function that returns an Observable that\n * tells when to close the buffer and restart collecting.</span>\n *\n * ![](bufferWhen.png)\n *\n * Opens a buffer immediately, then closes the buffer when the observable\n * returned by calling `closingSelector` function emits a value. When it closes\n * the buffer, it immediately opens a new buffer and repeats the process.\n *\n * ## Example\n *\n * Emit an array of the last clicks every [1-5] random seconds\n *\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { bufferWhen } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const buffered = clicks.pipe(bufferWhen(() =>\n *   interval(1000 + Math.random() * 4000)\n * ));\n * buffered.subscribe(x => console.log(x));\n * ```\n *\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n * @see {@link bufferTime}\n * @see {@link bufferToggle}\n * @see {@link windowWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals buffer closure.\n * @return A function that returns an Observable of arrays of buffered values.\n */\nexport function bufferWhen<T>(closingSelector: () => ObservableInput<any>): OperatorFunction<T, T[]> {\n  return operate((source, subscriber) => {\n    // The buffer we keep and emit.\n    let buffer: T[] | null = null;\n    // A reference to the subscriber used to subscribe to\n    // the closing notifier. We need to hold this so we can\n    // end the subscription after the first notification.\n    let closingSubscriber: Subscriber<T> | null = null;\n\n    // Ends the previous closing notifier subscription, so it\n    // terminates after the first emission, then emits\n    // the current buffer  if there is one, starts a new buffer, and starts a\n    // new closing notifier.\n    const openBuffer = () => {\n      // Make sure to teardown the closing subscription, we only cared\n      // about one notification.\n      closingSubscriber?.unsubscribe();\n      // emit the buffer if we have one, and start a new buffer.\n      const b = buffer;\n      buffer = [];\n      b && subscriber.next(b);\n\n      // Get a new closing notifier and subscribe to it.\n      innerFrom(closingSelector()).subscribe((closingSubscriber = new OperatorSubscriber(subscriber, openBuffer, noop)));\n    };\n\n    // Start the first buffer.\n    openBuffer();\n\n    // Subscribe to our source.\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        // Add every new value to the current buffer.\n        (value) => buffer?.push(value),\n        // When we complete, emit the buffer if we have one,\n        // then complete the result.\n        () => {\n          buffer && subscriber.next(buffer);\n          subscriber.complete();\n        },\n        // Pass all errors through to consumer.\n        undefined,\n        // Release memory on teardown\n        () => (buffer = closingSubscriber = null!)\n      )\n    );\n  });\n}\n","import { Observable } from '../Observable';\n\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { Subscription } from '../Subscription';\nimport { innerFrom } from '../observable/from';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { operate } from '../util/lift';\n\n/* tslint:disable:max-line-length */\nexport function catchError<T, O extends ObservableInput<any>>(\n  selector: (err: any, caught: Observable<T>) => O\n): OperatorFunction<T, T | ObservedValueOf<O>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Catches errors on the observable to be handled by returning a new observable or throwing an error.\n *\n * <span class=\"informal\">\n * It only listens to the error channel and ignores notifications.\n * Handles errors from the source observable, and maps them to a new observable.\n * The error may also be rethrown, or a new error can be thrown to emit an error from the result.\n * </span>\n *\n * ![](catch.png)\n *\n * This operator handles errors, but forwards along all other events to the resulting observable.\n * If the source observable terminates with an error, it will map that error to a new observable,\n * subscribe to it, and forward all of its events to the resulting observable.\n *\n * ## Examples\n * Continues with a different Observable when there's an error\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { map, catchError } from 'rxjs/operators';\n *\n * of(1, 2, 3, 4, 5).pipe(\n *     map(n => {\n *   \t   if (n === 4) {\n * \t       throw 'four!';\n *       }\n *\t     return n;\n *     }),\n *     catchError(err => of('I', 'II', 'III', 'IV', 'V')),\n *   )\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, I, II, III, IV, V\n * ```\n *\n * Retries the caught source Observable again in case of error, similar to retry() operator\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { map, catchError, take } from 'rxjs/operators';\n *\n * of(1, 2, 3, 4, 5).pipe(\n *     map(n => {\n *   \t   if (n === 4) {\n *   \t     throw 'four!';\n *       }\n * \t     return n;\n *     }),\n *     catchError((err, caught) => caught),\n *     take(30),\n *   )\n *   .subscribe(x => console.log(x));\n *   // 1, 2, 3, 1, 2, 3, ...\n * ```\n *\n * Throws a new error when the source Observable throws an error\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { map, catchError } from 'rxjs/operators';\n *\n * of(1, 2, 3, 4, 5).pipe(\n *     map(n => {\n *       if (n === 4) {\n *         throw 'four!';\n *       }\n *       return n;\n *     }),\n *     catchError(err => {\n *       throw 'error in source. Details: ' + err;\n *     }),\n *   )\n *   .subscribe(\n *     x => console.log(x),\n *     err => console.log(err)\n *   );\n *   // 1, 2, 3, error in source. Details: four!\n * ```\n *\n * @see {@link onErrorResumeNext}\n * @see {@link repeat}\n * @see {@link repeatWhen}\n * @see {@link retry }\n * @see {@link retryWhen}\n *\n * @param {function} selector a function that takes as arguments `err`, which is the error, and `caught`, which\n * is the source observable, in case you'd like to \"retry\" that observable by returning it again. Whatever observable\n * is returned by the `selector` will be used to continue the observable chain.\n * @return A function that returns an Observable that originates from either\n * the source or the Observable returned by the `selector` function.\n */\nexport function catchError<T, O extends ObservableInput<any>>(\n  selector: (err: any, caught: Observable<T>) => O\n): OperatorFunction<T, T | ObservedValueOf<O>> {\n  return operate((source, subscriber) => {\n    let innerSub: Subscription | null = null;\n    let syncUnsub = false;\n    let handledResult: Observable<ObservedValueOf<O>>;\n\n    innerSub = source.subscribe(\n      new OperatorSubscriber(subscriber, undefined, undefined, (err) => {\n        handledResult = innerFrom(selector(err, catchError(selector)(source)));\n        if (innerSub) {\n          innerSub.unsubscribe();\n          innerSub = null;\n          handledResult.subscribe(subscriber);\n        } else {\n          // We don't have an innerSub yet, that means the error was synchronous\n          // because the subscribe call hasn't returned yet.\n          syncUnsub = true;\n        }\n      })\n    );\n\n    if (syncUnsub) {\n      // We have a synchronous error, we need to make sure to\n      // teardown right away. This ensures that `finalize` is called\n      // at the right time, and that teardown occurs at the expected\n      // time between the source error and the subscription to the\n      // next observable.\n      innerSub.unsubscribe();\n      innerSub = null;\n      handledResult!.subscribe(subscriber);\n    }\n  });\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * A basic scan operation. This is used for `scan` and `reduce`.\n * @param accumulator The accumulator to use\n * @param seed The seed value for the state to accumulate\n * @param hasSeed Whether or not a seed was provided\n * @param emitOnNext Whether or not to emit the state on next\n * @param emitBeforeComplete Whether or not to emit the before completion\n */\n\nexport function scanInternals<V, A, S>(\n  accumulator: (acc: V | A | S, value: V, index: number) => A,\n  seed: S,\n  hasSeed: boolean,\n  emitOnNext: boolean,\n  emitBeforeComplete?: undefined | true\n) {\n  return (source: Observable<V>, subscriber: Subscriber<any>) => {\n    // Whether or not we have state yet. This will only be\n    // false before the first value arrives if we didn't get\n    // a seed value.\n    let hasState = hasSeed;\n    // The state that we're tracking, starting with the seed,\n    // if there is one, and then updated by the return value\n    // from the accumulator on each emission.\n    let state: any = seed;\n    // An index to pass to the accumulator function.\n    let index = 0;\n\n    // Subscribe to our source. All errors and completions are passed through.\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value) => {\n          // Always increment the index.\n          const i = index++;\n          // Set the state\n          state = hasState\n            ? // We already have state, so we can get the new state from the accumulator\n              accumulator(state, value, i)\n            : // We didn't have state yet, a seed value was not provided, so\n\n              // we set the state to the first value, and mark that we have state now\n              ((hasState = true), value);\n\n          // Maybe send it to the consumer.\n          emitOnNext && subscriber.next(state);\n        },\n        // If an onComplete was given, call it, otherwise\n        // just pass through the complete notification to the consumer.\n        emitBeforeComplete &&\n          (() => {\n            hasState && subscriber.next(state);\n            subscriber.complete();\n          })\n      )\n    );\n  };\n}\n","import { scanInternals } from './scanInternals';\nimport { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\n\nexport function reduce<V, A = V>(accumulator: (acc: A | V, value: V, index: number) => A): OperatorFunction<V, V | A>;\nexport function reduce<V, A>(accumulator: (acc: A, value: V, index: number) => A, seed: A): OperatorFunction<V, A>;\nexport function reduce<V, A, S = A>(accumulator: (acc: A | S, value: V, index: number) => A, seed: S): OperatorFunction<V, A>;\n\n/**\n * Applies an accumulator function over the source Observable, and returns the\n * accumulated result when the source completes, given an optional seed value.\n *\n * <span class=\"informal\">Combines together all values emitted on the source,\n * using an accumulator function that knows how to join a new source value into\n * the accumulation from the past.</span>\n *\n * ![](reduce.png)\n *\n * Like\n * [Array.prototype.reduce()](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce),\n * `reduce` applies an `accumulator` function against an accumulation and each\n * value of the source Observable (from the past) to reduce it to a single\n * value, emitted on the output Observable. Note that `reduce` will only emit\n * one value, only when the source Observable completes. It is equivalent to\n * applying operator {@link scan} followed by operator {@link last}.\n *\n * Returns an Observable that applies a specified `accumulator` function to each\n * item emitted by the source Observable. If a `seed` value is specified, then\n * that value will be used as the initial value for the accumulator. If no seed\n * value is specified, the first item of the source is used as the seed.\n *\n * ## Example\n * Count the number of click events that happened in 5 seconds\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { reduce, takeUntil, mapTo } from 'rxjs/operators';\n *\n * const clicksInFiveSeconds = fromEvent(document, 'click').pipe(\n *   takeUntil(interval(5000)),\n * );\n * const ones = clicksInFiveSeconds.pipe(mapTo(1));\n * const seed = 0;\n * const count = ones.pipe(reduce((acc, one) => acc + one, seed));\n * count.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link count}\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link scan}\n *\n * @param {function(acc: A, value: V, index: number): A} accumulator The accumulator function\n * called on each source value.\n * @param {A} [seed] The initial accumulation value.\n * @return A function that returns an Observable that emits a single value that\n * is the result of accumulating the values emitted by the source Observable.\n */\nexport function reduce<V, A>(accumulator: (acc: V | A, value: V, index: number) => A, seed?: any): OperatorFunction<V, V | A> {\n  return operate(scanInternals(accumulator, seed, arguments.length >= 2, false, true));\n}\n","import { reduce } from './reduce';\nimport { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\n\nconst arrReducer = (arr: any[], value: any) => (arr.push(value), arr);\n\n/**\n * Collects all source emissions and emits them as an array when the source completes.\n *\n * <span class=\"informal\">Get all values inside an array when the source completes</span>\n *\n * ![](toArray.png)\n *\n * `toArray` will wait until the source Observable completes before emitting\n * the array containing all emissions. When the source Observable errors no\n * array will be emitted.\n *\n *  ## Example\n * ```ts\n * import { interval } from 'rxjs';\n * import { toArray, take } from 'rxjs/operators';\n *\n * const source = interval(1000);\n * const example = source.pipe(\n *   take(10),\n *   toArray()\n * );\n *\n * const subscribe = example.subscribe(val => console.log(val));\n *\n * // output: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n * ```\n *\n * @return A function that returns an Observable that emits an array of items\n * emitted by the source Observable when source completes.\n */\nexport function toArray<T>(): OperatorFunction<T, T[]> {\n  // Because arrays are mutable, and we're mutating the array in this\n  // reducer process, we have to escapulate the creation of the initial\n  // array within this `operate` function.\n  return operate((source, subscriber) => {\n    reduce(arrReducer, [] as T[])(source).subscribe(subscriber)\n  });\n}\n","import { Observable } from '../Observable';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { identity } from '../util/identity';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { pipe } from '../util/pipe';\nimport { mergeMap } from './mergeMap';\nimport { toArray } from './toArray';\n\n/**\n * Collects all of the inner sources from source observable. Then, once the\n * source completes, joins the values using the given static.\n *\n * This is used for {@link combineLatestAll} and {@link zipAll} which both have the\n * same behavior of collecting all inner observables, then operating on them.\n *\n * @param joinFn The type of static join to apply to the sources collected\n * @param project The projection function to apply to the values, if any\n */\nexport function joinAllInternals<T, R>(joinFn: (sources: ObservableInput<T>[]) => Observable<T>, project?: (...args: any[]) => R) {\n  return pipe(\n    // Collect all inner sources into an array, and emit them when the\n    // source completes.\n    toArray() as OperatorFunction<ObservableInput<T>, ObservableInput<T>[]>,\n    // Run the join function on the collected array of inner sources.\n    mergeMap((sources) => joinFn(sources)),\n    // If a projection function was supplied, apply it to each result.\n    project ? mapOneOrManyArgs(project) : (identity as any)\n  );\n}\n","import { combineLatest } from '../observable/combineLatest';\nimport { OperatorFunction, ObservableInput } from '../types';\nimport { joinAllInternals } from './joinAllInternals';\n\nexport function combineLatestAll<T>(): OperatorFunction<ObservableInput<T>, T[]>;\nexport function combineLatestAll<T>(): OperatorFunction<any, T[]>;\nexport function combineLatestAll<T, R>(project: (...values: T[]) => R): OperatorFunction<ObservableInput<T>, R>;\nexport function combineLatestAll<R>(project: (...values: Array<any>) => R): OperatorFunction<any, R>;\n\n/**\n * Flattens an Observable-of-Observables by applying {@link combineLatest} when the Observable-of-Observables completes.\n *\n * ![](combineLatestAll.png)\n *\n * `combineLatestAll` takes an Observable of Observables, and collects all Observables from it. Once the outer Observable completes,\n * it subscribes to all collected Observables and combines their values using the {@link combineLatest}</a> strategy, such that:\n *\n * * Every time an inner Observable emits, the output Observable emits\n * * When the returned observable emits, it emits all of the latest values by:\n *    * If a `project` function is provided, it is called with each recent value from each inner Observable in whatever order they\n *      arrived, and the result of the `project` function is what is emitted by the output Observable.\n *    * If there is no `project` function, an array of all the most recent values is emitted by the output Observable.\n *\n * ---\n *\n * ## Examples\n *\n * ### Map two click events to a finite interval Observable, then apply `combineLatestAll`\n *\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { map, combineLatestAll, take } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map(ev =>\n *      interval(Math.random() * 2000).pipe(take(3))\n *   ),\n *   take(2)\n * );\n * const result = higherOrder.pipe(\n *   combineLatestAll()\n * );\n *\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineLatest}\n * @see {@link combineLatestWith}\n * @see {@link mergeAll}\n *\n * @param project optional function to map the most recent values from each inner Observable into a new result.\n * Takes each of the most recent values from each collected inner Observable as arguments, in order.\n * @return A function that returns an Observable that flattens Observables\n * emitted by the source Observable.\n */\nexport function combineLatestAll<R>(project?: (...values: Array<any>) => R) {\n  return joinAllInternals(combineLatest, project);\n}\n","import { combineLatestAll } from './combineLatestAll';\n\n/**\n * @deprecated Renamed to {@link combineLatestAll}. Will be removed in v8.\n */\nexport const combineAll = combineLatestAll;\n","import { combineLatestInit } from '../observable/combineLatest';\nimport { ObservableInput, ObservableInputTuple, OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { mapOneOrManyArgs } from '../util/mapOneOrManyArgs';\nimport { pipe } from '../util/pipe';\nimport { popResultSelector } from '../util/args';\n\n/** @deprecated Replaced with {@link combineLatestWith}. Will be removed in v8. */\nexport function combineLatest<T, A extends readonly unknown[], R>(\n  sources: [...ObservableInputTuple<A>],\n  project: (...values: [T, ...A]) => R\n): OperatorFunction<T, R>;\n/** @deprecated Replaced with {@link combineLatestWith}. Will be removed in v8. */\nexport function combineLatest<T, A extends readonly unknown[], R>(sources: [...ObservableInputTuple<A>]): OperatorFunction<T, [T, ...A]>;\n\n/** @deprecated Replaced with {@link combineLatestWith}. Will be removed in v8. */\nexport function combineLatest<T, A extends readonly unknown[], R>(\n  ...sourcesAndProject: [...ObservableInputTuple<A>, (...values: [T, ...A]) => R]\n): OperatorFunction<T, R>;\n/** @deprecated Replaced with {@link combineLatestWith}. Will be removed in v8. */\nexport function combineLatest<T, A extends readonly unknown[], R>(...sources: [...ObservableInputTuple<A>]): OperatorFunction<T, [T, ...A]>;\n\n/**\n * @deprecated Replaced with {@link combineLatestWith}. Will be removed in v8.\n */\nexport function combineLatest<T, R>(...args: (ObservableInput<any> | ((...values: any[]) => R))[]): OperatorFunction<T, unknown> {\n  const resultSelector = popResultSelector(args);\n  return resultSelector\n    ? pipe(combineLatest(...args), mapOneOrManyArgs(resultSelector))\n    : operate((source, subscriber) => {\n        combineLatestInit([source, ...argsOrArgArray(args)])(subscriber);\n      });\n}\n","import { ObservableInputTuple, OperatorFunction, Cons } from '../types';\nimport { combineLatest } from './combineLatest';\n\n/**\n * Create an observable that combines the latest values from all passed observables and the source\n * into arrays and emits them.\n *\n * Returns an observable, that when subscribed to, will subscribe to the source observable and all\n * sources provided as arguments. Once all sources emit at least one value, all of the latest values\n * will be emitted as an array. After that, every time any source emits a value, all of the latest values\n * will be emitted as an array.\n *\n * This is a useful operator for eagerly calculating values based off of changed inputs.\n *\n * ### Example\n *\n * Simple calculation from two inputs.\n *\n * ```\n * // Setup: Add two inputs to the page\n * const input1 = document.createElement('input');\n * document.body.appendChild(input1);\n * const input2 = document.createElement('input');\n * document.body.appendChild(input2);\n *\n * // Get streams of changes\n * const input1Changes$ = fromEvent(input1, 'change');\n * const input2Changes$ = fromEvent(input2, 'change');\n *\n * // Combine the changes by adding them together\n * input1Changes$.pipe(\n *   combineLatestWith(input2Changes$),\n *   map(([e1, e2]) => Number(e1.target.value) + Number(e2.target.value)),\n * )\n * .subscribe(x => console.log(x));\n *\n * ```\n * @param otherSources the other sources to subscribe to.\n * @return A function that returns an Observable that emits the latest\n * emissions from both source and provided Observables.\n */\nexport function combineLatestWith<T, A extends readonly unknown[]>(\n  ...otherSources: [...ObservableInputTuple<A>]\n): OperatorFunction<T, Cons<T, A>> {\n  return combineLatest(...otherSources);\n}\n","import { ObservableInputTuple, OperatorFunction, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\nimport { concatAll } from './concatAll';\nimport { internalFromArray } from '../observable/fromArray';\nimport { popScheduler } from '../util/args';\n\n/** @deprecated Replaced with {@link concatWith}. Will be removed in v8. */\nexport function concat<T, A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): OperatorFunction<T, T | A[number]>;\n/** @deprecated Replaced with {@link concatWith}. Will be removed in v8. */\nexport function concat<T, A extends readonly unknown[]>(\n  ...sourcesAndScheduler: [...ObservableInputTuple<A>, SchedulerLike]\n): OperatorFunction<T, T | A[number]>;\n\n/**\n * @deprecated Replaced with {@link concatWith}. Will be removed in v8.\n */\nexport function concat<T, R>(...args: any[]): OperatorFunction<T, R> {\n  const scheduler = popScheduler(args);\n  return operate((source, subscriber) => {\n    concatAll()(internalFromArray([source, ...args], scheduler)).subscribe(subscriber as any);\n  });\n}\n","import { mergeMap } from './mergeMap';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function concatMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function concatMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function concatMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, in a serialized fashion waiting for each one to complete before\n * merging the next.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link concatAll}.</span>\n *\n * ![](concatMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each new inner Observable is\n * concatenated with the previous inner Observable.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMap` is equivalent to `mergeMap` with concurrency parameter set\n * to `1`.\n *\n * ## Example\n * For each click event, tick every second from 0 to 3, with no concurrency\n *\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { concatMap, take } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   concatMap(ev => interval(1000).pipe(take(4)))\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * ```\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMapTo}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and taking\n * values from each projected inner Observable sequentially.\n */\nexport function concatMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  return isFunction(resultSelector) ? mergeMap(project, resultSelector, 1) : mergeMap(project, 1);\n}\n","import { concatMap } from './concatMap';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function concatMapTo<O extends ObservableInput<unknown>>(observable: O): OperatorFunction<any, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function concatMapTo<O extends ObservableInput<unknown>>(\n  observable: O,\n  resultSelector: undefined\n): OperatorFunction<any, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function concatMapTo<T, R, O extends ObservableInput<unknown>>(\n  observable: O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in a serialized fashion on the output Observable.\n *\n * <span class=\"informal\">It's like {@link concatMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * ![](concatMapTo.png)\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. Each new `innerObservable`\n * instance emitted on the output Observable is concatenated with the previous\n * `innerObservable` instance.\n *\n * __Warning:__ if source values arrive endlessly and faster than their\n * corresponding inner Observables can complete, it will result in memory issues\n * as inner Observables amass in an unbounded buffer waiting for their turn to\n * be subscribed to.\n *\n * Note: `concatMapTo` is equivalent to `mergeMapTo` with concurrency parameter\n * set to `1`.\n *\n * ## Example\n * For each click event, tick every second from 0 to 3, with no concurrency\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { concatMapTo, take } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   concatMapTo(interval(1000).pipe(take(4))),\n * );\n * result.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // (results are not concurrent)\n * // For every click on the \"document\" it will emit values 0 to 3 spaced\n * // on a 1000ms interval\n * // one click = 1000ms-> 0 -1000ms-> 1 -1000ms-> 2 -1000ms-> 3\n * ```\n *\n * @see {@link concat}\n * @see {@link concatAll}\n * @see {@link concatMap}\n * @see {@link mergeMapTo}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @return A function that returns an Observable of values merged together by\n * joining the passed Observable with itself, one after the other, for each\n * value emitted from the source.\n */\nexport function concatMapTo<T, R, O extends ObservableInput<unknown>>(\n  innerObservable: O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  return isFunction(resultSelector) ? concatMap(() => innerObservable, resultSelector) : concatMap(() => innerObservable);\n}\n","import { ObservableInputTuple, OperatorFunction } from '../types';\nimport { concat } from './concat';\n\n/**\n * Emits all of the values from the source observable, then, once it completes, subscribes\n * to each observable source provided, one at a time, emitting all of their values, and not subscribing\n * to the next one until it completes.\n *\n * `concat(a$, b$, c$)` is the same as `a$.pipe(concatWith(b$, c$))`.\n *\n * ## Example\n *\n * Listen for one mouse click, then listen for all mouse moves.\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { concatWith } from 'rxjs/operators';\n *\n * const clicks$ = fromEvent(document, 'click');\n * const moves$ = fromEvent(document, 'mousemove');\n *\n * clicks$.pipe(\n *   map(() => 'click'),\n *   take(1),\n *   concatWith(\n *     moves$.pipe(\n *       map(() => 'move')\n *     )\n *   )\n * )\n * .subscribe(x => console.log(x));\n *\n * // 'click'\n * // 'move'\n * // 'move'\n * // 'move'\n * // ...\n * ```\n *\n * @param otherSources Other observable sources to subscribe to, in sequence, after the original source is complete.\n * @return A function that returns an Observable that concatenates\n * subscriptions to the source and provided Observables subscribing to the next\n * only once the current subscription completes.\n */\nexport function concatWith<T, A extends readonly unknown[]>(\n  ...otherSources: [...ObservableInputTuple<A>]\n): OperatorFunction<T, T | A[number]> {\n  return concat(...otherSources);\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { Subscribable } from '../types';\n\n/**\n * Used to convert a subscribable to an observable.\n *\n * Currently, this is only used within internals.\n *\n * TODO: Discuss ObservableInput supporting \"Subscribable\".\n * https://github.com/ReactiveX/rxjs/issues/5909\n *\n * @param subscribable A subscribable\n */\nexport function fromSubscribable<T>(subscribable: Subscribable<T>) {\n  return new Observable((subscriber: Subscriber<T>) => subscribable.subscribe(subscriber));\n}\n","import { OperatorFunction, ObservableInput, ObservedValueOf, SubjectLike } from '../types';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { from } from '../observable/from';\nimport { operate } from '../util/lift';\nimport { fromSubscribable } from '../observable/fromSubscribable';\n\nexport interface ConnectConfig<T> {\n  /**\n   * A factory function used to create the Subject through which the source\n   * is multicast. By default this creates a {@link Subject}.\n   */\n  connector: () => SubjectLike<T>;\n}\n\n/**\n * The default configuration for `connect`.\n */\nconst DEFAULT_CONFIG: ConnectConfig<unknown> = {\n  connector: () => new Subject<unknown>(),\n};\n\n/**\n * Creates an observable by multicasting the source within a function that\n * allows the developer to define the usage of the multicast prior to connection.\n *\n * This is particularly useful if the observable source you wish to multicast could\n * be synchronous or asynchronous. This sets it apart from {@link share}, which, in the\n * case of totally synchronous sources will fail to share a single subscription with\n * multiple consumers, as by the time the subscription to the result of {@link share}\n * has returned, if the source is synchronous its internal reference count will jump from\n * 0 to 1 back to 0 and reset.\n *\n * To use `connect`, you provide a `selector` function that will give you\n * a multicast observable that is not yet connected. You then use that multicast observable\n * to create a resulting observable that, when subscribed, will set up your multicast. This is\n * generally, but not always, accomplished with {@link merge}.\n *\n * Note that using a {@link takeUntil} inside of `connect`'s `selector` _might_ mean you were looking\n * to use the {@link takeWhile} operator instead.\n *\n * When you subscribe to the result of `connect`, the `selector` function will be called. After\n * the `selector` function returns, the observable it returns will be subscribed to, _then_ the\n * multicast will be connected to the source.\n *\n * ### Example\n *\n * Sharing a totally synchronous observable\n *\n * ```ts\n * import { defer, of } from 'rxjs';\n * import { tap, connect } from 'rxjs/operators';\n *\n * const source$ = defer(() => {\n *  console.log('subscription started');\n *  return of(1, 2, 3, 4, 5).pipe(\n *    tap(n => console.log(`source emitted ${n}`))\n *  );\n * });\n *\n * source$.pipe(\n *  // Notice in here we're merging 3 subscriptions to `shared$`.\n *  connect((shared$) => merge(\n *      shared$.pipe(map(n => `all ${n}`)),\n *      shared$.pipe(filter(n => n % 2 === 0), map(n => `even ${n}`)),\n *      shared$.pipe(filter(n => n % 2 === 1), map(n => `odd ${n}`)),\n *  ))\n * )\n * .subscribe(console.log);\n *\n * // Expected output: (notice only one subscription)\n * \"subscription started\"\n * \"source emitted 1\"\n * \"all 1\"\n * \"odd 1\"\n * \"source emitted 2\"\n * \"all 2\"\n * \"even 2\"\n * \"source emitted 3\"\n * \"all 3\"\n * \"odd 3\"\n * \"source emitted 4\"\n * \"all 4\"\n * \"even 4\"\n * \"source emitted 5\"\n * \"all 5\"\n * \"odd 5\"\n * ```\n *\n * @param selector A function used to set up the multicast. Gives you a multicast observable\n * that is not yet connected. With that, you're expected to create and return\n * and Observable, that when subscribed to, will utilize the multicast observable.\n * After this function is executed -- and its return value subscribed to -- the\n * the operator will subscribe to the source, and the connection will be made.\n * @param config The configuration object for `connect`.\n */\nexport function connect<T, O extends ObservableInput<unknown>>(\n  selector: (shared: Observable<T>) => O,\n  config: ConnectConfig<T> = DEFAULT_CONFIG\n): OperatorFunction<T, ObservedValueOf<O>> {\n  const { connector } = config;\n  return operate((source, subscriber) => {\n    const subject = connector();\n    from(selector(fromSubscribable(subject))).subscribe(subscriber);\n    subscriber.add(source.subscribe(subject));\n  });\n}\n","import { OperatorFunction } from '../types';\nimport { reduce } from './reduce';\n/**\n * Counts the number of emissions on the source and emits that number when the\n * source completes.\n *\n * <span class=\"informal\">Tells how many values were emitted, when the source\n * completes.</span>\n *\n * ![](count.png)\n *\n * `count` transforms an Observable that emits values into an Observable that\n * emits a single value that represents the number of values emitted by the\n * source Observable. If the source Observable terminates with an error, `count`\n * will pass this error notification along without emitting a value first. If\n * the source Observable does not terminate at all, `count` will neither emit\n * a value nor terminate. This operator takes an optional `predicate` function\n * as argument, in which case the output emission will represent the number of\n * source values that matched `true` with the `predicate`.\n *\n * ## Examples\n *\n * Counts how many seconds have passed before the first click happened\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { count, takeUntil } from 'rxjs/operators';\n *\n * const seconds = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const secondsBeforeClick = seconds.pipe(takeUntil(clicks));\n * const result = secondsBeforeClick.pipe(count());\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Counts how many odd numbers are there between 1 and 7\n * ```ts\n * import { range } from 'rxjs';\n * import { count } from 'rxjs/operators';\n *\n * const numbers = range(1, 7);\n * const result = numbers.pipe(count(i => i % 2 === 1));\n * result.subscribe(x => console.log(x));\n * // Results in:\n * // 4\n * ```\n *\n * @see {@link max}\n * @see {@link min}\n * @see {@link reduce}\n *\n * @param predicate A function that is used to analyze the value and the index and\n * determine whether or not to increment the count. Return `true` to increment the count,\n * and return `false` to keep the count the same.\n * If the predicate is not provided, every value will be counted.\n * @return A function that returns an Observable that emits one number that\n * represents the count of emissions.\n */\n\nexport function count<T>(predicate?: (value: T, index: number) => boolean): OperatorFunction<T, number> {\n  return reduce((total, value, i) => (!predicate || predicate(value, i) ? total + 1 : total), 0);\n}\n","import { Subscriber } from '../Subscriber';\nimport { MonoTypeOperatorFunction, ObservableInput } from '../types';\nimport { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/from';\n\n/**\n * Emits a notification from the source Observable only after a particular time span\n * determined by another Observable has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link debounceTime}, but the time span of\n * emission silence is determined by a second Observable.</span>\n *\n * ![](debounce.png)\n *\n * `debounce` delays notifications emitted by the source Observable, but drops previous\n * pending delayed emissions if a new notification arrives on the source Observable.\n * This operator keeps track of the most recent notification from the source\n * Observable, and spawns a duration Observable by calling the\n * `durationSelector` function. The notification is emitted only when the duration\n * Observable emits a next notification, and if no other notification was emitted on\n * the source Observable since the duration Observable was spawned. If a new\n * notification appears before the duration Observable emits, the previous notification will\n * not be emitted and a new duration is scheduled from `durationSelector` is scheduled.\n * If the completing event happens during the scheduled duration the last cached notification\n * is emitted before the completion event is forwarded to the output observable.\n * If the error event happens during the scheduled duration or after it only the error event is\n * forwarded to the output observable. The cache notification is not emitted in this case.\n *\n * Like {@link debounceTime}, this is a rate-limiting operator, and also a\n * delay-like operator since output emissions do not necessarily occur at the\n * same time as they did on the source Observable.\n *\n * ## Example\n * Emit the most recent click after a burst of clicks\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { scan, debounce } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   scan((i) => ++i, 1),\n *   debounce((i) => interval(200 * i))\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link sampleTime}\n * @see {@link throttle}\n * @see {@link throttleTime}\n *\n * @param durationSelector A function\n * that receives a value from the source Observable, for computing the timeout\n * duration for each source value, returned as an Observable or a Promise.\n * @return A function that returns an Observable that delays the emissions of\n * the source Observable by the specified duration Observable returned by\n * `durationSelector`, and may drop some values if they occur too frequently.\n */\nexport function debounce<T>(durationSelector: (value: T) => ObservableInput<any>): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    let lastValue: T | null = null;\n    // The subscriber/subscription for the current debounce, if there is one.\n    let durationSubscriber: Subscriber<any> | null = null;\n\n    const emit = () => {\n      // Unsubscribe any current debounce subscription we have,\n      // we only cared about the first notification from it, and we\n      // want to clean that subscription up as soon as possible.\n      durationSubscriber?.unsubscribe();\n      durationSubscriber = null;\n      if (hasValue) {\n        // We have a value! Free up memory first, then emit the value.\n        hasValue = false;\n        const value = lastValue!;\n        lastValue = null;\n        subscriber.next(value);\n      }\n    };\n\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value: T) => {\n          // Cancel any pending debounce duration. We don't\n          // need to null it out here yet tho, because we're just going\n          // to create another one in a few lines.\n          durationSubscriber?.unsubscribe();\n          hasValue = true;\n          lastValue = value;\n          // Capture our duration subscriber, so we can unsubscribe it when we're notified\n          // and we're going to emit the value.\n          durationSubscriber = new OperatorSubscriber(subscriber, emit, noop);\n          // Subscribe to the duration.\n          innerFrom(durationSelector(value)).subscribe(durationSubscriber);\n        },\n        () => {\n          // Source completed.\n          // Emit any pending debounced values then complete\n          emit();\n          subscriber.complete();\n        },\n        // Pass all errors through to consumer\n        undefined,\n        () => {\n          // Teardown.\n          lastValue = durationSubscriber = null;\n        }\n      )\n    );\n  });\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, SchedulerAction, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Emits a notification from the source Observable only after a particular time span\n * has passed without another source emission.\n *\n * <span class=\"informal\">It's like {@link delay}, but passes only the most\n * recent notification from each burst of emissions.</span>\n *\n * ![](debounceTime.png)\n *\n * `debounceTime` delays notifications emitted by the source Observable, but drops\n * previous pending delayed emissions if a new notification arrives on the source\n * Observable. This operator keeps track of the most recent notification from the\n * source Observable, and emits that only when `dueTime` has passed\n * without any other notification appearing on the source Observable. If a new value\n * appears before `dueTime` silence occurs, the previous notification will be dropped\n * and will not be emitted and a new `dueTime` is scheduled.\n * If the completing event happens during `dueTime` the last cached notification\n * is emitted before the completion event is forwarded to the output observable.\n * If the error event happens during `dueTime` or after it only the error event is\n * forwarded to the output observable. The cache notification is not emitted in this case.\n *\n * This is a rate-limiting operator, because it is impossible for more than one\n * notification to be emitted in any time window of duration `dueTime`, but it is also\n * a delay-like operator since output emissions do not occur at the same time as\n * they did on the source Observable. Optionally takes a {@link SchedulerLike} for\n * managing timers.\n *\n * ## Example\n * Emit the most recent click after a burst of clicks\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { debounceTime } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(debounceTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link auditTime}\n * @see {@link debounce}\n * @see {@link debounceTime}\n * @see {@link sample}\n * @see {@link sampleTime}\n * @see {@link throttle}\n * @see {@link throttleTime}\n *\n * @param {number} dueTime The timeout duration in milliseconds (or the time\n * unit determined internally by the optional `scheduler`) for the window of\n * time required to wait for emission silence before emitting the most recent\n * source value.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the timeout for each value.\n * @return A function that returns an Observable that delays the emissions of\n * the source Observable by the specified `dueTime`, and may drop some values\n * if they occur too frequently.\n */\nexport function debounceTime<T>(dueTime: number, scheduler: SchedulerLike = asyncScheduler): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let activeTask: Subscription | null = null;\n    let lastValue: T | null = null;\n    let lastTime: number | null = null;\n\n    const emit = () => {\n      if (activeTask) {\n        // We have a value! Free up memory first, then emit the value.\n        activeTask.unsubscribe();\n        activeTask = null;\n        const value = lastValue!;\n        lastValue = null;\n        subscriber.next(value);\n      }\n    };\n    function emitWhenIdle(this: SchedulerAction<unknown>) {\n      // This is called `dueTime` after the first value\n      // but we might have received new values during this window!\n\n      const targetTime = lastTime! + dueTime;\n      const now = scheduler.now();\n      if (now < targetTime) {\n        // On that case, re-schedule to the new target\n        activeTask = this.schedule(undefined, targetTime - now);\n        return;\n      }\n\n      emit();\n    }\n\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value: T) => {\n          lastValue = value;\n          lastTime = scheduler.now();\n\n          // Only set up a task if it's not already up\n          if (!activeTask) {\n            activeTask = scheduler.schedule(emitWhenIdle, dueTime);\n          }\n        },\n        () => {\n          // Source completed.\n          // Emit any pending debounced values then complete\n          emit();\n          subscriber.complete();\n        },\n        // Pass all errors through to consumer.\n        undefined,\n        () => {\n          // Teardown.\n          lastValue = activeTask = null;\n        }\n      )\n    );\n  });\n}\n","import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Emits a given value if the source Observable completes without emitting any\n * `next` value, otherwise mirrors the source Observable.\n *\n * <span class=\"informal\">If the source Observable turns out to be empty, then\n * this operator will emit a default value.</span>\n *\n * ![](defaultIfEmpty.png)\n *\n * `defaultIfEmpty` emits the values emitted by the source Observable or a\n * specified default value if the source Observable is empty (completes without\n * having emitted any `next` value).\n *\n * ## Example\n * If no clicks happen in 5 seconds, then emit \"no clicks\"\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { defaultIfEmpty, takeUntil } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const clicksBeforeFive = clicks.pipe(takeUntil(interval(5000)));\n * const result = clicksBeforeFive.pipe(defaultIfEmpty('no clicks'));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link empty}\n * @see {@link last}\n *\n * @param defaultValue The default value used if the source\n * Observable is empty.\n * @return A function that returns an Observable that emits either the\n * specified `defaultValue` if the source Observable emits no items, or the\n * values emitted by the source Observable.\n */\nexport function defaultIfEmpty<T, R>(defaultValue: R): OperatorFunction<T, T | R> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value) => {\n          hasValue = true;\n          subscriber.next(value);\n        },\n        () => {\n          if (!hasValue) {\n            subscriber.next(defaultValue!);\n          }\n          subscriber.complete();\n        }\n      )\n    );\n  });\n}\n","import { MonoTypeOperatorFunction } from '../types';\nimport { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Emits only the first `count` values emitted by the source Observable.\n *\n * <span class=\"informal\">Takes the first `count` values from the source, then\n * completes.</span>\n *\n * ![](take.png)\n *\n * `take` returns an Observable that emits only the first `count` values emitted\n * by the source Observable. If the source emits fewer than `count` values then\n * all of its values are emitted. After that, it completes, regardless if the\n * source completes.\n *\n * ## Example\n * Take the first 5 seconds of an infinite 1-second interval Observable\n * ```ts\n * import { interval } from 'rxjs';\n * import { take } from 'rxjs/operators';\n *\n * const intervalCount = interval(1000);\n * const takeFive = intervalCount.pipe(take(5));\n * takeFive.subscribe(x => console.log(x));\n *\n * // Logs:\n * // 0\n * // 1\n * // 2\n * // 3\n * // 4\n * ```\n *\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param count The maximum number of `next` values to emit.\n * @return A function that returns an Observable that emits only the first\n * `count` values emitted by the source Observable, or all of the values from\n * the source if the source emits fewer than `count` values.\n */\nexport function take<T>(count: number): MonoTypeOperatorFunction<T> {\n  return count <= 0\n    ? // If we are taking no values, that's empty.\n      () => EMPTY\n    : operate((source, subscriber) => {\n        let seen = 0;\n        source.subscribe(\n          new OperatorSubscriber(subscriber, (value) => {\n            // Increment the number of values we have seen,\n            // then check it against the allowed count to see\n            // if we are still letting values through.\n            if (++seen <= count) {\n              subscriber.next(value);\n              // If we have met or passed our allowed count,\n              // we need to complete. We have to do <= here,\n              // because re-entrant code will increment `seen` twice.\n              if (count <= seen) {\n                subscriber.complete();\n              }\n            }\n          })\n        );\n      });\n}\n","import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\n\n/**\n * Ignores all items emitted by the source Observable and only passes calls of `complete` or `error`.\n *\n * ![](ignoreElements.png)\n *\n * The _IgnoreElements_ operator suppresses all of the items emitted by the source Observable,\n * but allows its termination notification (either `error` or `complete`) to pass through unchanged.\n *\n * If you do not care about the items being emitted by an Observable, but you do want to be notified\n * when it completes or when it terminates with an error, you can apply the `ignoreElements` operator\n * to the Observable, which will ensure that it will never call its observers’ `next` handlers.\n *\n * ## Examples\n * ```ts\n * import { of } from 'rxjs';\n * import { ignoreElements } from 'rxjs/operators';\n *\n * of('you', 'talking', 'to', 'me').pipe(\n *   ignoreElements(),\n * )\n * .subscribe(\n *   word => console.log(word),\n *   err => console.log('error:', err),\n *   () => console.log('the end'),\n * );\n * // result:\n * // 'the end'\n * ```\n * @return A function that returns an empty Observable that only calls\n * `complete` or `error`, based on which one is called by the source\n * Observable.\n */\nexport function ignoreElements(): OperatorFunction<any, never> {\n  return operate((source, subscriber) => {\n    source.subscribe(new OperatorSubscriber(subscriber, noop));\n  });\n}\n","import { OperatorFunction } from '../types';\nimport { map } from './map';\n\nexport function mapTo<R>(value: R): OperatorFunction<any, R>;\n/** @deprecated Do not specify explicit type parameters. Signatures with type parameters that cannot be inferred will be removed in v8. */\nexport function mapTo<T, R>(value: R): OperatorFunction<T, R>;\n\n/**\n * Emits the given constant value on the output Observable every time the source\n * Observable emits a value.\n *\n * <span class=\"informal\">Like {@link map}, but it maps every source value to\n * the same output value every time.</span>\n *\n * ![](mapTo.png)\n *\n * Takes a constant `value` as argument, and emits that whenever the source\n * Observable emits a value. In other words, ignores the actual source value,\n * and simply uses the emission moment to know when to emit the given `value`.\n *\n * ## Example\n * Map every click to the string 'Hi'\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { mapTo } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const greetings = clicks.pipe(mapTo('Hi'));\n * greetings.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link map}\n *\n * @param value The value to map each source value to.\n * @return A function that returns an Observable that emits the given `value`\n * every time the source Observable emits.\n */\nexport function mapTo<R>(value: R): OperatorFunction<any, R> {\n  return map(() => value);\n}\n","import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { concat } from '../observable/concat';\nimport { take } from './take';\nimport { ignoreElements } from './ignoreElements';\nimport { mapTo } from './mapTo';\nimport { mergeMap } from './mergeMap';\n\n/** @deprecated The `subscriptionDelay` parameter will be removed in v8. */\nexport function delayWhen<T>(\n  delayDurationSelector: (value: T, index: number) => Observable<any>,\n  subscriptionDelay: Observable<any>\n): MonoTypeOperatorFunction<T>;\nexport function delayWhen<T>(delayDurationSelector: (value: T, index: number) => Observable<any>): MonoTypeOperatorFunction<T>;\n\n/**\n * Delays the emission of items from the source Observable by a given time span\n * determined by the emissions of another Observable.\n *\n * <span class=\"informal\">It's like {@link delay}, but the time span of the\n * delay duration is determined by a second Observable.</span>\n *\n * ![](delayWhen.png)\n *\n * `delayWhen` time shifts each emitted value from the source Observable by a\n * time span determined by another Observable. When the source emits a value,\n * the `delayDurationSelector` function is called with the source value as\n * argument, and should return an Observable, called the \"duration\" Observable.\n * The source value is emitted on the output Observable only when the duration\n * Observable emits a value or completes.\n * The completion of the notifier triggering the emission of the source value\n * is deprecated behavior and will be removed in future versions.\n *\n * Optionally, `delayWhen` takes a second argument, `subscriptionDelay`, which\n * is an Observable. When `subscriptionDelay` emits its first value or\n * completes, the source Observable is subscribed to and starts behaving like\n * described in the previous paragraph. If `subscriptionDelay` is not provided,\n * `delayWhen` will subscribe to the source Observable as soon as the output\n * Observable is subscribed.\n *\n * ## Example\n * Delay each click by a random amount of time, between 0 and 5 seconds\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { delayWhen } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const delayedClicks = clicks.pipe(\n *   delayWhen(event => interval(Math.random() * 5000)),\n * );\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link delay}\n * @see {@link throttle}\n * @see {@link throttleTime}\n * @see {@link debounce}\n * @see {@link debounceTime}\n * @see {@link sample}\n * @see {@link sampleTime}\n * @see {@link audit}\n * @see {@link auditTime}\n *\n * @param {function(value: T, index: number): Observable} delayDurationSelector A function that\n * returns an Observable for each value emitted by the source Observable, which\n * is then used to delay the emission of that item on the output Observable\n * until the Observable returned from this function emits a value.\n * @param {Observable} subscriptionDelay An Observable that triggers the\n * subscription to the source Observable once it emits any value.\n * @return A function that returns an Observable that delays the emissions of\n * the source Observable by an amount of time specified by the Observable\n * returned by `delayDurationSelector`.\n */\nexport function delayWhen<T>(\n  delayDurationSelector: (value: T, index: number) => Observable<any>,\n  subscriptionDelay?: Observable<any>\n): MonoTypeOperatorFunction<T> {\n  if (subscriptionDelay) {\n    // DEPRECATED PATH\n    return (source: Observable<T>) =>\n      concat(subscriptionDelay.pipe(take(1), ignoreElements()), source.pipe(delayWhen(delayDurationSelector)));\n  }\n\n  return mergeMap((value, index) => delayDurationSelector(value, index).pipe(take(1), mapTo(value)));\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { delayWhen } from './delayWhen';\nimport { timer } from '../observable/timer';\n\n/**\n * Delays the emission of items from the source Observable by a given timeout or\n * until a given Date.\n *\n * <span class=\"informal\">Time shifts each item by some specified amount of\n * milliseconds.</span>\n *\n * ![](delay.png)\n *\n * If the delay argument is a Number, this operator time shifts the source\n * Observable by that amount of time expressed in milliseconds. The relative\n * time intervals between the values are preserved.\n *\n * If the delay argument is a Date, this operator time shifts the start of the\n * Observable execution until the given date occurs.\n *\n * ## Examples\n * Delay each click by one second\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { delay } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const delayedClicks = clicks.pipe(delay(1000)); // each click emitted after 1 second\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * Delay all clicks until a future date happens\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { delay } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const date = new Date('March 15, 2050 12:00:00'); // in the future\n * const delayedClicks = clicks.pipe(delay(date)); // click emitted only after that date\n * delayedClicks.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link delayWhen}\n * @see {@link throttle}\n * @see {@link throttleTime}\n * @see {@link debounce}\n * @see {@link debounceTime}\n * @see {@link sample}\n * @see {@link sampleTime}\n * @see {@link audit}\n * @see {@link auditTime}\n *\n * @param {number|Date} due The delay duration in milliseconds (a `number`) or\n * a `Date` until which the emission of the source items is delayed.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the time-shift for each item.\n * @return A function that returns an Observable that delays the emissions of\n * the source Observable by the specified timeout or Date.\n */\nexport function delay<T>(due: number | Date, scheduler: SchedulerLike = asyncScheduler): MonoTypeOperatorFunction<T> {\n  const duration = timer(due, scheduler);\n  return delayWhen(() => duration);\n}\n","import { observeNotification } from '../Notification';\nimport { OperatorFunction, ObservableNotification, ValueFromNotification } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Converts an Observable of {@link ObservableNotification} objects into the emissions\n * that they represent.\n *\n * <span class=\"informal\">Unwraps {@link ObservableNotification} objects as actual `next`,\n * `error` and `complete` emissions. The opposite of {@link materialize}.</span>\n *\n * ![](dematerialize.png)\n *\n * `dematerialize` is assumed to operate an Observable that only emits\n * {@link ObservableNotification} objects as `next` emissions, and does not emit any\n * `error`. Such Observable is the output of a `materialize` operation. Those\n * notifications are then unwrapped using the metadata they contain, and emitted\n * as `next`, `error`, and `complete` on the output Observable.\n *\n * Use this operator in conjunction with {@link materialize}.\n *\n * ## Example\n *\n * Convert an Observable of Notifications to an actual Observable\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { dematerialize } from 'rxjs/operators';\n *\n * const notifA = { kind: 'N', value: 'A' };\n * const notifB = { kind: 'N', value: 'B' };\n * const notifE = { kind: 'E', error: new TypeError('x.toUpperCase is not a function') }\n *\n * const materialized = of(notifA, notifB, notifE);\n *\n * const upperCase = materialized.pipe(dematerialize());\n * upperCase.subscribe({\n *    next: x => console.log(x),\n *    error: e => console.error(e)\n * });\n *\n * // Results in:\n * // A\n * // B\n * // TypeError: x.toUpperCase is not a function\n * ```\n * @see {@link materialize}\n *\n * @return A function that returns an Observable that emits items and\n * notifications embedded in Notification objects emitted by the source\n * Observable.\n */\nexport function dematerialize<N extends ObservableNotification<any>>(): OperatorFunction<N, ValueFromNotification<N>> {\n  return operate((source, subscriber) => {\n    source.subscribe(new OperatorSubscriber(subscriber, (notification) => observeNotification(notification, subscriber)));\n  });\n}\n","import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from previous items.\n *\n * If a keySelector function is provided, then it will project each value from the source observable into a new value that it will\n * check for equality with previously projected values. If a keySelector function is not provided, it will use each value from the\n * source observable directly with an equality check against previous values.\n *\n * In JavaScript runtimes that support `Set`, this operator will use a `Set` to improve performance of the distinct value checking.\n *\n * In other runtimes, this operator will use a minimal implementation of `Set` that relies on an `Array` and `indexOf` under the\n * hood, so performance will degrade as more values are checked for distinction. Even in newer browsers, a long-running `distinct`\n * use might result in memory leaks. To help alleviate this in some scenarios, an optional `flushes` parameter is also provided so\n * that the internal `Set` can be \"flushed\", basically clearing it of values.\n *\n * ## Examples\n *\n * A simple example with numbers\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { distinct } from 'rxjs/operators';\n *\n * of(1, 1, 2, 2, 2, 1, 2, 3, 4, 3, 2, 1)\n *   .pipe(\n *     distinct()\n *   )\n *   .subscribe(x => console.log(x));\n *\n * // Outputs\n * // 1\n * // 2\n * // 3\n * // 4\n * ```\n *\n * An example using a keySelector function\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { distinct } from 'rxjs/operators';\n *\n * interface Person {\n *    age: number,\n *    name: string\n * }\n *\n * of(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'}\n *   ).pipe(\n *     distinct((p: Person) => p.name)\n *   )\n *   .subscribe(x => console.log(x));\n *\n * // Outputs\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * ```\n * @see {@link distinctUntilChanged}\n * @see {@link distinctUntilKeyChanged}\n *\n * @param {function} [keySelector] Optional function to select which value you want to check as distinct.\n * @param {Observable} [flushes] Optional Observable for flushing the internal HashSet of the operator.\n * @return A function that returns an Observable that emits items from the\n * source Observable with distinct values.\n */\nexport function distinct<T, K>(keySelector?: (value: T) => K, flushes?: Observable<any>): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    const distinctKeys = new Set();\n    source.subscribe(\n      new OperatorSubscriber(subscriber, (value) => {\n        const key = keySelector ? keySelector(value) : value;\n        if (!distinctKeys.has(key)) {\n          distinctKeys.add(key);\n          subscriber.next(value);\n        }\n      })\n    );\n\n    flushes?.subscribe(new OperatorSubscriber(subscriber, () => distinctKeys.clear(), noop));\n  });\n}\n","import { MonoTypeOperatorFunction } from '../types';\nimport { identity } from '../util/identity';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Returns a result {@link Observable} that emits all values pushed by the source observable if they\n * are distinct in comparison to the last value the result observable emitted.\n *\n * 1. It will always emit the first value from the source.\n * 2. For all subsequent values pushed by the source, they will be compared to the previously emitted values\n *    using the provided `comparator` or an `===` equality check.\n * 3. If the value pushed by the source is determined to be unequal by this check, that value is emitted and\n *    becomes the new \"previously emitted value\" internally.\n *\n * ## Example\n *\n * A very basic example with no `comparator`. Note that `1` is emitted more than once,\n * because it's distinct in comparison to the _previously emitted_ value,\n * not in comparison to _all other emitted values_.\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { distinctUntilChanged } from 'rxjs/operators';\n *\n * of(1, 1, 1, 2, 2, 2, 1, 1, 3, 3).pipe(\n *  distinctUntilChanged()\n * )\n * .subscribe(console.log);\n * // Logs: 1, 2, 1, 3\n * ```\n *\n * ## Example\n *\n * With a `comparator`, you can do custom comparisons. Let's say\n * you only want to emit a value when all of its components have\n * changed:\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { distinctUntilChanged } from 'rxjs/operators';\n *\n * const totallyDifferentBuilds$ = of(\n *   { engineVersion: '1.1.0', transmissionVersion: '1.2.0' },\n *   { engineVersion: '1.1.0', transmissionVersion: '1.4.0' },\n *   { engineVersion: '1.3.0', transmissionVersion: '1.4.0' },\n *   { engineVersion: '1.3.0', transmissionVersion: '1.5.0' },\n *   { engineVersion: '2.0.0', transmissionVersion: '1.5.0' }\n * ).pipe(\n *   distinctUntilChanged((prev, curr) => {\n *     return (\n *       prev.engineVersion === curr.engineVersion ||\n *       prev.transmissionVersion === curr.transmissionVersion\n *     );\n *   })\n * );\n *\n * totallyDifferentBuilds$.subscribe(console.log);\n *\n * // Logs:\n * // {engineVersion: \"1.1.0\", transmissionVersion: \"1.2.0\"}\n * // {engineVersion: \"1.3.0\", transmissionVersion: \"1.4.0\"}\n * // {engineVersion: \"2.0.0\", transmissionVersion: \"1.5.0\"}\n * ```\n *\n * ## Example\n *\n * You can also provide a custom `comparator` to check that emitted\n * changes are only in one direction. Let's say you only want to get\n * the next record temperature:\n *\n * ```ts\n * import { of } from \"rxjs\";\n * import { distinctUntilChanged } from \"rxjs/operators\";\n *\n * const temps$ = of(30, 31, 20, 34, 33, 29, 35, 20);\n *\n * const recordHighs$ = temps$.pipe(\n *   distinctUntilChanged((prevHigh, temp) => {\n *     // If the current temp is less than\n *     // or the same as the previous record,\n *     // the record hasn't changed.\n *     return temp <= prevHigh;\n *   })\n * );\n *\n * recordHighs$.subscribe(console.log);\n * // Logs: 30, 31, 34, 35\n * ```\n *\n * @param comparator A function used to compare the previous and current values for\n * equality. Defaults to a `===` check.\n * @return A function that returns an Observable that emits items from the\n * source Observable with distinct values.\n */\nexport function distinctUntilChanged<T>(comparator?: (previous: T, current: T) => boolean): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns a result {@link Observable} that emits all values pushed by the source observable if they\n * are distinct in comparison to the last value the result observable emitted.\n *\n * 1. It will always emit the first value from the source.\n * 2. The `keySelector` will be run against all values, including the first value.\n * 3. For all values after the first, the selected key will be compared against the key selected from\n *    the previously emitted value using the `comparator`.\n * 4. If the keys are determined to be unequal by this check, the value (not the key), is emitted\n *    and the selected key from that value is saved for future comparisons against other keys.\n *\n * ## Example\n *\n * Selecting update events only when the `updatedBy` field shows\n * the account changed hands...\n *\n * ```ts\n * // A stream of updates to a given account\n * const accountUpdates$ = of(\n *   { updatedBy: \"blesh\", data: [] },\n *   { updatedBy: \"blesh\", data: [] },\n *   { updatedBy: \"ncjamieson\", data: [] },\n *   { updatedBy: \"ncjamieson\", data: [] },\n *   { updatedBy: \"blesh\", data: [] }\n * );\n *\n * // We only want the events where it changed hands\n * const changedHands$ = accountUpdates$.pipe(\n *   distinctUntilChanged(undefined, update => update.updatedBy)\n * );\n *\n * changedHands$.subscribe(console.log);\n * // Logs:\n * // {updatedBy: \"blesh\", data: Array[0]}\n * // {updatedBy: \"ncjamieson\", data: Array[0]}\n * // {updatedBy: \"blesh\", data: Array[0]}\n * ```\n *\n * @param comparator A function used to compare the previous and current keys for\n * equality. Defaults to a `===` check.\n * @param keySelector Used to select a key value to be passed to the `comparator`.\n * @return A function that returns an Observable that emits items from the\n * source Observable with distinct values.\n */\nexport function distinctUntilChanged<T, K>(\n  comparator: (previous: K, current: K) => boolean,\n  keySelector: (value: T) => K\n): MonoTypeOperatorFunction<T>;\n\nexport function distinctUntilChanged<T, K>(\n  comparator?: (previous: K, current: K) => boolean,\n  keySelector: (value: T) => K = identity as (value: T) => K\n): MonoTypeOperatorFunction<T> {\n  // We've been allowing `null` do be passed as the `compare`, so we can't do\n  // a default value for the parameter, because that will only work\n  // for `undefined`.\n  comparator = comparator ?? defaultCompare;\n\n  return operate((source, subscriber) => {\n    // The previous key, used to compare against keys selected\n    // from new arrivals to determine \"distinctiveness\".\n    let previousKey: K;\n    // Whether or not this is the first value we've gotten.\n    let first = true;\n\n    source.subscribe(\n      new OperatorSubscriber(subscriber, (value) => {\n        // We always call the key selector.\n        const currentKey = keySelector(value);\n\n        // If it's the first value, we always emit it.\n        // Otherwise, we compare this key to the previous key, and\n        // if the comparer returns false, we emit.\n        if (first || !comparator!(previousKey, currentKey)) {\n          // Update our state *before* we emit the value\n          // as emission can be the source of re-entrant code\n          // in functional libraries like this. We only really\n          // need to do this if it's the first value, or if the\n          // key we're tracking in previous needs to change.\n          first = false;\n          previousKey = currentKey;\n\n          // Emit the value!\n          subscriber.next(value);\n        }\n      })\n    );\n  });\n}\n\nfunction defaultCompare(a: any, b: any) {\n  return a === b;\n}\n","import { distinctUntilChanged } from './distinctUntilChanged';\nimport { MonoTypeOperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function distinctUntilKeyChanged<T>(key: keyof T): MonoTypeOperatorFunction<T>;\nexport function distinctUntilKeyChanged<T, K extends keyof T>(key: K, compare: (x: T[K], y: T[K]) => boolean): MonoTypeOperatorFunction<T>;\n/* tslint:enable:max-line-length */\n\n/**\n * Returns an Observable that emits all items emitted by the source Observable that are distinct by comparison from the previous item,\n * using a property accessed by using the key provided to check if the two items are distinct.\n *\n * If a comparator function is provided, then it will be called for each item to test for whether or not that value should be emitted.\n *\n * If a comparator function is not provided, an equality check is used by default.\n *\n * ## Examples\n * An example comparing the name of persons\n * ```typescript\n * import { of } from 'rxjs';\n * import { distinctUntilKeyChanged } from 'rxjs/operators';\n *\n *  interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n *of(\n *     { age: 4, name: 'Foo'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo'},\n *     { age: 6, name: 'Foo'},\n *   ).pipe(\n *     distinctUntilKeyChanged('name'),\n *   )\n *   .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo' }\n * ```\n *\n * An example comparing the first letters of the name\n * ```typescript\n * import { of } from 'rxjs';\n * import { distinctUntilKeyChanged } from 'rxjs/operators';\n *\n * interface Person {\n *     age: number,\n *     name: string\n *  }\n *\n *of(\n *     { age: 4, name: 'Foo1'},\n *     { age: 7, name: 'Bar'},\n *     { age: 5, name: 'Foo2'},\n *     { age: 6, name: 'Foo3'},\n *   ).pipe(\n *     distinctUntilKeyChanged('name', (x: string, y: string) => x.substring(0, 3) === y.substring(0, 3)),\n *   )\n *   .subscribe(x => console.log(x));\n *\n * // displays:\n * // { age: 4, name: 'Foo1' }\n * // { age: 7, name: 'Bar' }\n * // { age: 5, name: 'Foo2' }\n * ```\n *\n * @see {@link distinct}\n * @see {@link distinctUntilChanged}\n *\n * @param {string} key String key for object property lookup on each item.\n * @param {function} [compare] Optional comparison function called to test if an item is distinct from the previous item in the source.\n * @return A function that returns an Observable that emits items from the\n * source Observable with distinct values based on the key specified.\n */\nexport function distinctUntilKeyChanged<T, K extends keyof T>(key: K, compare?: (x: T[K], y: T[K]) => boolean): MonoTypeOperatorFunction<T> {\n  return distinctUntilChanged((x: T, y: T) => compare ? compare(x[key], y[key]) : x[key] === y[key]);\n}\n","import { EmptyError } from '../util/EmptyError';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * If the source observable completes without emitting a value, it will emit\n * an error. The error will be created at that time by the optional\n * `errorFactory` argument, otherwise, the error will be {@link EmptyError}.\n *\n * ![](throwIfEmpty.png)\n *\n * ## Example\n * ```ts\n * import { fromEvent, timer } from 'rxjs';\n * import { throwIfEmpty, takeUntil } from 'rxjs/operators';\n *\n * const click$ = fromEvent(document, 'click');\n *\n * click$.pipe(\n *   takeUntil(timer(1000)),\n *   throwIfEmpty(\n *     () => new Error('the document was not clicked within 1 second')\n *   ),\n * )\n * .subscribe({\n *   next() { console.log('The button was clicked'); },\n *   error(err) { console.error(err); }\n * });\n * ```\n *\n * @param errorFactory A factory function called to produce the\n * error to be thrown when the source observable completes without emitting a\n * value.\n * @return A function that returns an Observable that throws an error if the\n * source Observable completed without emitting.\n */\nexport function throwIfEmpty<T>(errorFactory: () => any = defaultErrorFactory): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value) => {\n          hasValue = true;\n          subscriber.next(value);\n        },\n        () => (hasValue ? subscriber.complete() : subscriber.error(errorFactory()))\n      )\n    );\n  });\n}\n\nfunction defaultErrorFactory() {\n  return new EmptyError();\n}\n","import { ArgumentOutOfRangeError } from '../util/ArgumentOutOfRangeError';\nimport { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\nimport { filter } from './filter';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { take } from './take';\n\n/**\n * Emits the single value at the specified `index` in a sequence of emissions\n * from the source Observable.\n *\n * <span class=\"informal\">Emits only the i-th value, then completes.</span>\n *\n * ![](elementAt.png)\n *\n * `elementAt` returns an Observable that emits the item at the specified\n * `index` in the source Observable, or a default value if that `index` is out\n * of range and the `default` argument is provided. If the `default` argument is\n * not given and the `index` is out of range, the output Observable will emit an\n * `ArgumentOutOfRangeError` error.\n *\n * ## Example\n * Emit only the third click event\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { elementAt } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(elementAt(2));\n * result.subscribe(x => console.log(x));\n *\n * // Results in:\n * // click 1 = nothing\n * // click 2 = nothing\n * // click 3 = MouseEvent object logged to console\n * ```\n *\n * @see {@link first}\n * @see {@link last}\n * @see {@link skip}\n * @see {@link single}\n * @see {@link take}\n *\n * @throws {ArgumentOutOfRangeError} When using `elementAt(i)`, it delivers an\n * ArgumentOutOfRangeError to the Observer's `error` callback if `i < 0` or the\n * Observable has completed before emitting the i-th `next` notification.\n *\n * @param {number} index Is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {T} [defaultValue] The default value returned for missing indices.\n * @return A function that returns an Observable that emits a single item, if\n * it is found. Otherwise, it will emit the default value if given. If not, it\n * emits an error.\n */\nexport function elementAt<T, D = T>(index: number, defaultValue?: D): OperatorFunction<T, T | D> {\n  if (index < 0) {\n    throw new ArgumentOutOfRangeError();\n  }\n  const hasDefaultValue = arguments.length >= 2;\n  return (source: Observable<T>) =>\n    source.pipe(\n      filter((v, i) => i === index),\n      take(1),\n      hasDefaultValue ? defaultIfEmpty(defaultValue!) : throwIfEmpty(() => new ArgumentOutOfRangeError())\n    );\n}\n","/** prettier */\nimport { Observable } from '../Observable';\nimport { concat } from '../observable/concat';\nimport { of } from '../observable/of';\nimport { MonoTypeOperatorFunction, SchedulerLike, OperatorFunction, ValueFromArray } from '../types';\n\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `concatAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function endWith<T>(scheduler: SchedulerLike): MonoTypeOperatorFunction<T>;\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `concatAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function endWith<T, A extends unknown[] = T[]>(\n  ...valuesAndScheduler: [...A, SchedulerLike]\n): OperatorFunction<T, T | ValueFromArray<A>>;\n\nexport function endWith<T, A extends unknown[] = T[]>(...values: A): OperatorFunction<T, T | ValueFromArray<A>>;\n\n/**\n * Returns an observable that will emit all values from the source, then synchronously emit\n * the provided value(s) immediately after the source completes.\n *\n * NOTE: Passing a last argument of a Scheduler is _deprecated_, and may result in incorrect\n * types in TypeScript.\n *\n * This is useful for knowing when an observable ends. Particularly when paired with an\n * operator like {@link takeUntil}\n *\n * ![](endWith.png)\n *\n * ## Example\n *\n * Emit values to know when an interval starts and stops. The interval will\n * stop when a user clicks anywhere on the document.\n *\n * ```ts\n * import { interval, fromEvent } from 'rxjs';\n * import { map, startWith, takeUntil, endWith } from 'rxjs/operators';\n *\n * const ticker$ = interval(5000).pipe(\n *   map(() => 'tick'),\n * );\n *\n * const documentClicks$ = fromEvent(document, 'click');\n *\n * ticker$.pipe(\n *   startWith('interval started'),\n *   takeUntil(documentClicks$),\n *   endWith('interval ended by click'),\n * )\n * .subscribe(\n *   x = console.log(x);\n * )\n *\n * // Result (assuming a user clicks after 15 seconds)\n * // \"interval started\"\n * // \"tick\"\n * // \"tick\"\n * // \"tick\"\n * // \"interval ended by click\"\n * ```\n *\n * @param values Items you want the modified Observable to emit last.\n * @return A function that returns an Observable that emits all values from the\n * source, then synchronously emits the provided value(s) immediately after the\n * source completes.\n *\n * @see {@link startWith}\n * @see {@link concat}\n * @see {@link takeUntil}\n */\nexport function endWith<T>(...values: Array<T | SchedulerLike>): MonoTypeOperatorFunction<T> {\n  return (source: Observable<T>) => concat(source, of(...values)) as Observable<T>;\n}\n","import { Observable } from '../Observable';\nimport { Falsy, OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\nexport function every<T>(predicate: BooleanConstructor): OperatorFunction<T, Exclude<T, Falsy> extends never ? false : boolean>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function every<T>(\n  predicate: BooleanConstructor,\n  thisArg: any\n): OperatorFunction<T, Exclude<T, Falsy> extends never ? false : boolean>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function every<T, A>(\n  predicate: (this: A, value: T, index: number, source: Observable<T>) => boolean,\n  thisArg: A\n): OperatorFunction<T, boolean>;\nexport function every<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, boolean>;\n\n/**\n * Returns an Observable that emits whether or not every item of the source satisfies the condition specified.\n *\n * <span class=\"informal\">If all values pass predicate before the source completes, emits true before completion,\n * otherwise emit false, then complete.</span>\n *\n * ![](every.png)\n *\n * ## Example\n * A simple example emitting true if all elements are less than 5, false otherwise\n * ```ts\n * import { of } from 'rxjs';\n * import { every } from 'rxjs/operators';\n *\n *  of(1, 2, 3, 4, 5, 6).pipe(\n *     every(x => x < 5),\n * )\n * .subscribe(x => console.log(x)); // -> false\n * ```\n *\n * @param {function} predicate A function for determining if an item meets a specified condition.\n * @param {any} [thisArg] Optional object to use for `this` in the callback.\n * @return A function that returns an Observable of booleans that determines if\n * all items of the source Observable meet the condition specified.\n */\nexport function every<T>(\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\n  thisArg?: any\n): OperatorFunction<T, boolean> {\n  return operate((source, subscriber) => {\n    let index = 0;\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value) => {\n          if (!predicate.call(thisArg, value, index++, source)) {\n            subscriber.next(false);\n            subscriber.complete();\n          }\n        },\n        () => {\n          subscriber.next(true);\n          subscriber.complete();\n        }\n      )\n    );\n  });\n}\n","import { Subscription } from '../Subscription';\nimport { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/from';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Converts a higher-order Observable into a first-order Observable by dropping\n * inner Observables while the previous inner Observable has not yet completed.\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables by dropping the\n * next inner Observables while the current inner is still executing.</span>\n *\n * ![](exhaust.png)\n *\n * `exhaust` subscribes to an Observable that emits Observables, also known as a\n * higher-order Observable. Each time it observes one of these emitted inner\n * Observables, the output Observable begins emitting the items emitted by that\n * inner Observable. So far, it behaves like {@link mergeAll}. However,\n * `exhaust` ignores every new inner Observable if the previous Observable has\n * not yet completed. Once that one completes, it will accept and flatten the\n * next inner Observable and repeat this process.\n *\n * ## Example\n * Run a finite timer for each click, only if there is no currently active timer\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { exhaustAll, map, take } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const higherOrder = clicks.pipe(\n *   map((ev) => interval(1000).pipe(take(5))),\n * );\n * const result = higherOrder.pipe(exhaustAll());\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link concatAll}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link mergeAll}\n * @see {@link exhaustMap}\n * @see {@link zipAll}\n *\n * @return A function that returns an Observable that takes a source of\n * Observables and propagates the first Observable exclusively until it\n * completes before subscribing to the next.\n */\nexport function exhaustAll<O extends ObservableInput<any>>(): OperatorFunction<O, ObservedValueOf<O>> {\n  return operate((source, subscriber) => {\n    let isComplete = false;\n    let innerSub: Subscription | null = null;\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (inner) => {\n          if (!innerSub) {\n            innerSub = innerFrom(inner).subscribe(\n              new OperatorSubscriber(subscriber, undefined, () => {\n                innerSub = null;\n                isComplete && subscriber.complete();\n              })\n            );\n          }\n        },\n        () => {\n          isComplete = true;\n          !innerSub && subscriber.complete();\n        }\n      )\n    );\n  });\n}\n","import { exhaustAll } from './exhaustAll';\n\n/**\n * @deprecated Renamed to {@link exhaustAll}. Will be removed in v8.\n */\nexport const exhaust = exhaustAll;\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { map } from './map';\nimport { innerFrom } from '../observable/from';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/* tslint:disable:max-line-length */\nexport function exhaustMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function exhaustMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function exhaustMap<T, I, R>(\n  project: (value: T, index: number) => ObservableInput<I>,\n  resultSelector: (outerValue: T, innerValue: I, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable only if the previous projected Observable has completed.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables using {@link exhaust}.</span>\n *\n * ![](exhaustMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. When it projects a source value to\n * an Observable, the output Observable begins emitting the items emitted by\n * that projected Observable. However, `exhaustMap` ignores every new projected\n * Observable if the previous projected Observable has not yet completed. Once\n * that one completes, it will accept and flatten the next projected Observable\n * and repeat this process.\n *\n * ## Example\n * Run a finite timer for each click, only if there is no currently active timer\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { exhaustMap, take } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   exhaustMap(ev => interval(1000).pipe(take(5)))\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaust}\n * @see {@link mergeMap}\n * @see {@link switchMap}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return A function that returns an Observable containing projected\n * Observables of each item of the source, ignoring projected Observables that\n * start before their preceding Observable has completed.\n */\nexport function exhaustMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  if (resultSelector) {\n    // DEPRECATED PATH\n    return (source: Observable<T>) =>\n      source.pipe(exhaustMap((a, i) => innerFrom(project(a, i)).pipe(map((b: any, ii: any) => resultSelector(a, b, i, ii)))));\n  }\n  return operate((source, subscriber) => {\n    let index = 0;\n    let innerSub: Subscriber<T> | null = null;\n    let isComplete = false;\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (outerValue) => {\n          if (!innerSub) {\n            innerSub = new OperatorSubscriber(subscriber, undefined, () => {\n              innerSub = null;\n              isComplete && subscriber.complete();\n            });\n            innerFrom(project(outerValue, index++)).subscribe(innerSub);\n          }\n        },\n        () => {\n          isComplete = true;\n          !innerSub && subscriber.complete();\n        }\n      )\n    );\n  });\n}\n","import { OperatorFunction, ObservableInput, ObservedValueOf, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\n\n/* tslint:disable:max-line-length */\nexport function expand<T, O extends ObservableInput<unknown>>(\n  project: (value: T, index: number) => O,\n  concurrent?: number,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, ObservedValueOf<O>>;\n/**\n * @deprecated The `scheduler` parameter will be removed in v8. If you need to schedule the inner subscription,\n * use `subscribeOn` within the projection function: `expand((value) => fn(value).pipe(subscribeOn(scheduler)))`.\n * Details: Details: https://rxjs.dev/deprecations/scheduler-argument\n */\nexport function expand<T, O extends ObservableInput<unknown>>(\n  project: (value: T, index: number) => O,\n  concurrent: number | undefined,\n  scheduler: SchedulerLike\n): OperatorFunction<T, ObservedValueOf<O>>;\n/* tslint:enable:max-line-length */\n\n/**\n * Recursively projects each source value to an Observable which is merged in\n * the output Observable.\n *\n * <span class=\"informal\">It's similar to {@link mergeMap}, but applies the\n * projection function to every source value as well as every output value.\n * It's recursive.</span>\n *\n * ![](expand.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an Observable, and then merging those resulting Observables and\n * emitting the results of this merger. *Expand* will re-emit on the output\n * Observable every source value. Then, each output value is given to the\n * `project` function which returns an inner Observable to be merged on the\n * output Observable. Those output values resulting from the projection are also\n * given to the `project` function to produce new output values. This is how\n * *expand* behaves recursively.\n *\n * ## Example\n * Start emitting the powers of two on every click, at most 10 of them\n * ```ts\n * import { fromEvent, of } from 'rxjs';\n * import { expand, mapTo, delay, take } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const powersOfTwo = clicks.pipe(\n *   mapTo(1),\n *   expand(x => of(2 * x).pipe(delay(1000))),\n *   take(10),\n * );\n * powersOfTwo.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n *\n * @param {function(value: T, index: number) => Observable} project A function\n * that, when applied to an item emitted by the source or the output Observable,\n * returns an Observable.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @param {SchedulerLike} [scheduler=null] The {@link SchedulerLike} to use for subscribing to\n * each projected inner Observable.\n * @return A function that returns an Observable that emits the source values\n * and also result of applying the projection function to each value emitted on\n * the output Observable and merging the results of the Observables obtained\n * from this transformation.\n */\nexport function expand<T, O extends ObservableInput<unknown>>(\n  project: (value: T, index: number) => O,\n  concurrent = Infinity,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, ObservedValueOf<O>> {\n  concurrent = (concurrent || 0) < 1 ? Infinity : concurrent;\n  return operate((source, subscriber) =>\n    mergeInternals(\n      // General merge params\n      source,\n      subscriber,\n      project,\n      concurrent,\n\n      // onBeforeNext\n      undefined,\n\n      // Expand-specific\n      true, // Use expand path\n      scheduler // Inner subscription scheduler\n    )\n  );\n}\n","import { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\n\n/**\n * Returns an Observable that mirrors the source Observable, but will call a specified function when\n * the source terminates on complete or error.\n * The specified function will also be called when the subscriber explicitly unsubscribes.\n *\n * ## Examples\n * Execute callback function when the observable completes\n *\n * ```ts\n * import { interval } from 'rxjs';\n * import { take, finalize } from 'rxjs/operators';\n *\n * // emit value in sequence every 1 second\n * const source = interval(1000);\n * const example = source.pipe(\n *   take(5), //take only the first 5 values\n *   finalize(() => console.log('Sequence complete')) // Execute when the observable completes\n * )\n * const subscribe = example.subscribe(val => console.log(val));\n *\n * // results:\n * //   0\n * //   1\n * //   2\n * //   3\n * //   4\n * //   'Sequence complete'\n * ```\n *\n * Execute callback function when the subscriber explicitly unsubscribes\n *\n * ```ts\n * import { interval, timer, noop } from 'rxjs';\n * import { finalize, tap } from 'rxjs/operators';\n *\n * const source = interval(100).pipe(\n *   finalize(() => console.log('[finalize] Called')),\n *    tap(() => console.log('[next] Called'),\n *      () => console.log('[error] Not called'),\n *      () => console.log('[tap] Not called')),\n * );\n *\n * const sub = source.subscribe(x => console.log(x), noop, () => console.log('[complete] Not called'));\n *\n * timer(150).subscribe(() => sub.unsubscribe());\n *\n * // results:\n * //   0\n * //   '[finalize] Called'\n * ```\n *\n * @param {function} callback Function to be called when source terminates.\n * @return A function that returns an Observable that mirrors the source, but\n * will call the specified function on termination.\n */\nexport function finalize<T>(callback: () => void): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    // TODO: This try/finally was only added for `useDeprecatedSynchronousErrorHandling`.\n    // REMOVE THIS WHEN THAT HOT GARBAGE IS REMOVED IN V8.\n    try {\n      source.subscribe(subscriber);\n    } finally {\n      subscriber.add(callback);\n    }\n  });\n}\n","import { Observable } from '../Observable';\nimport { Subscriber } from '../Subscriber';\nimport { OperatorFunction, TruthyTypesOf } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\nexport function find<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function find<T, S extends T, A>(\n  predicate: (this: A, value: T, index: number, source: Observable<T>) => value is S,\n  thisArg: A\n): OperatorFunction<T, S | undefined>;\nexport function find<T, S extends T>(\n  predicate: (value: T, index: number, source: Observable<T>) => value is S\n): OperatorFunction<T, S | undefined>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function find<T, A>(\n  predicate: (this: A, value: T, index: number, source: Observable<T>) => boolean,\n  thisArg: A\n): OperatorFunction<T, T | undefined>;\nexport function find<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, T | undefined>;\n/**\n * Emits only the first value emitted by the source Observable that meets some\n * condition.\n *\n * <span class=\"informal\">Finds the first value that passes some test and emits\n * that.</span>\n *\n * ![](find.png)\n *\n * `find` searches for the first item in the source Observable that matches the\n * specified condition embodied by the `predicate`, and returns the first\n * occurrence in the source. Unlike {@link first}, the `predicate` is required\n * in `find`, and does not emit an error if a valid value is not found.\n *\n * ## Example\n * Find and emit the first click that happens on a DIV element\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { find } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(find(ev => ev.target.tagName === 'DIV'));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link filter}\n * @see {@link first}\n * @see {@link findIndex}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return A function that returns an Observable that emits the first item that\n * matches the condition.\n */\nexport function find<T>(\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\n  thisArg?: any\n): OperatorFunction<T, T | undefined> {\n  return operate(createFind(predicate, thisArg, 'value'));\n}\n\nexport function createFind<T>(\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\n  thisArg: any,\n  emit: 'value' | 'index'\n) {\n  const findIndex = emit === 'index';\n  return (source: Observable<T>, subscriber: Subscriber<any>) => {\n    let index = 0;\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value) => {\n          const i = index++;\n          if (predicate.call(thisArg, value, i, source)) {\n            subscriber.next(findIndex ? i : value);\n            subscriber.complete();\n          }\n        },\n        () => {\n          subscriber.next(findIndex ? -1 : undefined);\n          subscriber.complete();\n        }\n      )\n    );\n  };\n}\n","import { Observable } from '../Observable';\nimport { Falsy, OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { createFind } from './find';\n\nexport function findIndex<T>(predicate: BooleanConstructor): OperatorFunction<T, T extends Falsy ? -1 : number>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function findIndex<T>(predicate: BooleanConstructor, thisArg: any): OperatorFunction<T, T extends Falsy ? -1 : number>;\n/** @deprecated Use a closure instead of a `thisArg`. Signatures accepting a `thisArg` will be removed in v8. */\nexport function findIndex<T, A>(\n  predicate: (this: A, value: T, index: number, source: Observable<T>) => boolean,\n  thisArg: A\n): OperatorFunction<T, number>;\nexport function findIndex<T>(predicate: (value: T, index: number, source: Observable<T>) => boolean): OperatorFunction<T, number>;\n\n/**\n * Emits only the index of the first value emitted by the source Observable that\n * meets some condition.\n *\n * <span class=\"informal\">It's like {@link find}, but emits the index of the\n * found value, not the value itself.</span>\n *\n * ![](findIndex.png)\n *\n * `findIndex` searches for the first item in the source Observable that matches\n * the specified condition embodied by the `predicate`, and returns the\n * (zero-based) index of the first occurrence in the source. Unlike\n * {@link first}, the `predicate` is required in `findIndex`, and does not emit\n * an error if a valid value is not found.\n *\n * ## Example\n * Emit the index of first click that happens on a DIV element\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { findIndex } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(findIndex(ev => ev.target.tagName === 'DIV'));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link first}\n * @see {@link take}\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} predicate\n * A function called with each item to test for condition matching.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return A function that returns an Observable that emits the index of the\n * first item that matches the condition.\n */\nexport function findIndex<T>(\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\n  thisArg?: any\n): OperatorFunction<T, number> {\n  return operate(createFind(predicate, thisArg, 'index'));\n}\n","import { Observable } from '../Observable';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, TruthyTypesOf } from '../types';\nimport { filter } from './filter';\nimport { take } from './take';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { identity } from '../util/identity';\n\nexport function first<T, D = T>(predicate?: null, defaultValue?: D): OperatorFunction<T, T | D>;\nexport function first<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\nexport function first<T, D>(predicate: BooleanConstructor, defaultValue: D): OperatorFunction<T, TruthyTypesOf<T> | D>;\nexport function first<T, S extends T>(\n  predicate: (value: T, index: number, source: Observable<T>) => value is S,\n  defaultValue?: S\n): OperatorFunction<T, S>;\nexport function first<T, S extends T, D>(\n  predicate: (value: T, index: number, source: Observable<T>) => value is S,\n  defaultValue: D\n): OperatorFunction<T, S | D>;\nexport function first<T, D = T>(\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\n  defaultValue?: D\n): OperatorFunction<T, T | D>;\n\n/**\n * Emits only the first value (or the first value that meets some condition)\n * emitted by the source Observable.\n *\n * <span class=\"informal\">Emits only the first value. Or emits only the first\n * value that passes some test.</span>\n *\n * ![](first.png)\n *\n * If called with no arguments, `first` emits the first value of the source\n * Observable, then completes. If called with a `predicate` function, `first`\n * emits the first value of the source that matches the specified condition. Throws an error if\n * `defaultValue` was not provided and a matching element is not found.\n *\n * ## Examples\n * Emit only the first click that happens on the DOM\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { first } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(first());\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Emits the first click that happens on a DIV\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { first } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(first(ev => ev.target.tagName === 'DIV'));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link filter}\n * @see {@link find}\n * @see {@link take}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * This is how `first()` is different from {@link take}(1) which completes instead.\n *\n * @param {function(value: T, index: number, source: Observable<T>): boolean} [predicate]\n * An optional function called with each item to test for condition matching.\n * @param {R} [defaultValue] The default value emitted in case no valid value\n * was found on the source.\n * @return A function that returns an Observable that emits the first item that\n * matches the condition.\n */\nexport function first<T, D>(\n  predicate?: ((value: T, index: number, source: Observable<T>) => boolean) | null,\n  defaultValue?: D\n): OperatorFunction<T, T | D> {\n  const hasDefaultValue = arguments.length >= 2;\n  return (source: Observable<T>) =>\n    source.pipe(\n      predicate ? filter((v, i) => predicate(v, i, source)) : identity,\n      take(1),\n      hasDefaultValue ? defaultIfEmpty(defaultValue!) : throwIfEmpty(() => new EmptyError())\n    );\n}\n","import { Observable } from '../Observable';\nimport { innerFrom } from '../observable/from';\nimport { Subject } from '../Subject';\nimport { ObservableInput, Observer, OperatorFunction, SubjectLike } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\ninterface BasicGroupByOptions<K, T> {\n  element?: undefined;\n  duration?: (grouped: GroupedObservable<K, T>) => ObservableInput<any>;\n  connector?: () => SubjectLike<T>;\n}\n\ninterface GroupByOptionsWithElement<K, E, T> {\n  element: (value: T) => E;\n  duration?: (grouped: GroupedObservable<K, E>) => ObservableInput<any>;\n  connector?: () => SubjectLike<E>;\n}\n\nexport function groupBy<T, K>(key: (value: T) => K, options: BasicGroupByOptions<K, T>): OperatorFunction<T, GroupedObservable<K, T>>;\n\nexport function groupBy<T, K, E>(\n  key: (value: T) => K,\n  options: GroupByOptionsWithElement<K, E, T>\n): OperatorFunction<T, GroupedObservable<K, E>>;\n\nexport function groupBy<T, K extends T>(\n  key: (value: T) => value is K\n): OperatorFunction<T, GroupedObservable<true, K> | GroupedObservable<false, Exclude<T, K>>>;\n\nexport function groupBy<T, K>(key: (value: T) => K): OperatorFunction<T, GroupedObservable<K, T>>;\n\n/**\n * @deprecated use the options parameter instead.\n */\nexport function groupBy<T, K>(\n  key: (value: T) => K,\n  element: void,\n  duration: (grouped: GroupedObservable<K, T>) => Observable<any>\n): OperatorFunction<T, GroupedObservable<K, T>>;\n\n/**\n * @deprecated use the options parameter instead.\n */\nexport function groupBy<T, K, R>(\n  key: (value: T) => K,\n  element?: (value: T) => R,\n  duration?: (grouped: GroupedObservable<K, R>) => Observable<any>\n): OperatorFunction<T, GroupedObservable<K, R>>;\n\n/**\n * Groups the items emitted by an Observable according to a specified criterion,\n * and emits these grouped items as `GroupedObservables`, one\n * {@link GroupedObservable} per group.\n *\n * ![](groupBy.png)\n *\n * When the Observable emits an item, a key is computed for this item with the key function.\n *\n * If a {@link GroupedObservable} for this key exists, this {@link GroupedObservable} emits. Otherwise, a new\n * {@link GroupedObservable} for this key is created and emits.\n *\n * A {@link GroupedObservable} represents values belonging to the same group represented by a common key. The common\n * key is available as the `key` field of a {@link GroupedObservable} instance.\n *\n * The elements emitted by {@link GroupedObservable}s are by default the items emitted by the Observable, or elements\n * returned by the element function.\n *\n * ## Examples\n *\n * ### Group objects by id and return as array\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { mergeMap, groupBy, reduce } from 'rxjs/operators';\n *\n * of(\n *   {id: 1, name: 'JavaScript'},\n *   {id: 2, name: 'Parcel'},\n *   {id: 2, name: 'webpack'},\n *   {id: 1, name: 'TypeScript'},\n *   {id: 3, name: 'TSLint'}\n * ).pipe(\n *   groupBy(p => p.id),\n *   mergeMap((group$) => group$.pipe(reduce((acc, cur) => [...acc, cur], [])))\n * )\n * .subscribe(p => console.log(p));\n *\n * // displays:\n * // [ { id: 1, name: 'JavaScript'},\n * //   { id: 1, name: 'TypeScript'} ]\n * //\n * // [ { id: 2, name: 'Parcel'},\n * //   { id: 2, name: 'webpack'} ]\n * //\n * // [ { id: 3, name: 'TSLint'} ]\n * ```\n *\n * ### Pivot data on the id field\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { groupBy, map, mergeMap, reduce } from 'rxjs/operators';\n *\n * of(\n *   { id: 1, name: 'JavaScript' },\n *   { id: 2, name: 'Parcel' },\n *   { id: 2, name: 'webpack' },\n *   { id: 1, name: 'TypeScript' },\n *   { id: 3, name: 'TSLint' }\n * )\n *   .pipe(\n *     groupBy(p => p.id, p => p.name),\n *     mergeMap(group$ =>\n *       group$.pipe(reduce((acc, cur) => [...acc, cur], [`${group$.key}`]))\n *     ),\n *     map(arr => ({ id: parseInt(arr[0], 10), values: arr.slice(1) }))\n *  )\n *  .subscribe(p => console.log(p));\n *\n * // displays:\n * // { id: 1, values: [ 'JavaScript', 'TypeScript' ] }\n * // { id: 2, values: [ 'Parcel', 'webpack' ] }\n * // { id: 3, values: [ 'TSLint' ] }\n * ```\n *\n * @param key A function that extracts the key\n * for each item.\n * @param element A function that extracts the\n * return element for each item.\n * @param duration\n * A function that returns an Observable to determine how long each group should\n * exist.\n * @param connector Factory function to create an\n * intermediate Subject through which grouped elements are emitted.\n * @return A function that returns an Observable that emits GroupedObservables,\n * each of which corresponds to a unique key value and each of which emits\n * those items from the source Observable that share that key value.\n *\n * @deprecated Use the options parameter instead.\n */\nexport function groupBy<T, K, R>(\n  key: (value: T) => K,\n  element?: (value: T) => R,\n  duration?: (grouped: GroupedObservable<K, R>) => Observable<any>,\n  connector?: () => Subject<R>\n): OperatorFunction<T, GroupedObservable<K, R>>;\n\n// Impl\nexport function groupBy<T, K, R>(\n  keySelector: (value: T) => K,\n  elementOrOptions?: ((value: any) => any) | void | BasicGroupByOptions<K, T> | GroupByOptionsWithElement<K, R, T>,\n  duration?: (grouped: GroupedObservable<any, any>) => ObservableInput<any>,\n  connector?: () => SubjectLike<any>\n): OperatorFunction<T, GroupedObservable<K, R>> {\n  return operate((source, subscriber) => {\n    let element: ((value: any) => any) | void;\n    if (!elementOrOptions || typeof elementOrOptions === 'function') {\n      element = elementOrOptions;\n    } else {\n      ({ duration, element, connector } = elementOrOptions);\n    }\n\n    // A lookup for the groups that we have so far.\n    const groups = new Map<K, SubjectLike<any>>();\n\n    // Used for notifying all groups and the subscriber in the same way.\n    const notify = (cb: (group: Observer<any>) => void) => {\n      groups.forEach(cb);\n      cb(subscriber);\n    };\n\n    // Used to handle errors from the source, AND errors that occur during the\n    // next call from the source.\n    const handleError = (err: any) => notify((consumer) => consumer.error(err));\n\n    // Capturing a reference to this, because we need a handle to it\n    // in `createGroupedObservable` below. This is what we use to\n    // subscribe to our source observable. This sometimes needs to be unsubscribed\n    // out-of-band with our `subscriber` which is the downstream subscriber, or destination,\n    // in cases where a user unsubscribes from the main resulting subscription, but\n    // still has groups from this subscription subscribed and would expect values from it\n    // Consider:  `source.pipe(groupBy(fn), take(2))`.\n    const groupBySourceSubscriber = new GroupBySubscriber(\n      subscriber,\n      (value: T) => {\n        // Because we have to notify all groups of any errors that occur in here,\n        // we have to add our own try/catch to ensure that those errors are propagated.\n        // OperatorSubscriber will only send the error to the main subscriber.\n        try {\n          const key = keySelector(value);\n\n          let group = groups.get(key);\n          if (!group) {\n            // Create our group subject\n            groups.set(key, (group = connector ? connector() : new Subject<any>()));\n\n            // Emit the grouped observable. Note that we can't do a simple `asObservable()` here,\n            // because the grouped observable has special semantics around reference counting\n            // to ensure we don't sever our connection to the source prematurely.\n            const grouped = createGroupedObservable(key, group);\n            subscriber.next(grouped);\n\n            if (duration) {\n              const durationSubscriber = new OperatorSubscriber(\n                // Providing the group here ensures that it is disposed of -- via `unsubscribe` --\n                // wnen the duration subscription is torn down. That is important, because then\n                // if someone holds a handle to the grouped observable and tries to subscribe to it\n                // after the connection to the source has been severed, they will get an\n                // `ObjectUnsubscribedError` and know they can't possibly get any notifications.\n                group as any,\n                () => {\n                  // Our duration notified! We can complete the group.\n                  // The group will be removed from the map in the teardown phase.\n                  group!.complete();\n                  durationSubscriber?.unsubscribe();\n                },\n                // Completions are also sent to the group, but just the group.\n                undefined,\n                // Errors on the duration subscriber are sent to the group\n                // but only the group. They are not sent to the main subscription.\n                undefined,\n                // Teardown: Remove this group from our map.\n                () => groups.delete(key)\n              );\n\n              // Start our duration notifier.\n              groupBySourceSubscriber.add(innerFrom(duration(grouped)).subscribe(durationSubscriber));\n            }\n          }\n\n          // Send the value to our group.\n          group.next(element ? element(value) : value);\n        } catch (err) {\n          handleError(err);\n        }\n      },\n      // Source completes.\n      () => notify((consumer) => consumer.complete()),\n      // Error from the source.\n      handleError,\n      // Free up memory.\n      // When the source subscription is _finally_ torn down, release the subjects and keys\n      // in our groups Map, they may be quite large and we don't want to keep them around if we\n      // don't have to.\n      () => groups.clear()\n    );\n\n    // Subscribe to the source\n    source.subscribe(groupBySourceSubscriber);\n\n    /**\n     * Creates the actual grouped observable returned.\n     * @param key The key of the group\n     * @param groupSubject The subject that fuels the group\n     */\n    function createGroupedObservable(key: K, groupSubject: SubjectLike<any>) {\n      const result: any = new Observable<T>((groupSubscriber) => {\n        groupBySourceSubscriber.activeGroups++;\n        const innerSub = groupSubject.subscribe(groupSubscriber);\n        return () => {\n          innerSub.unsubscribe();\n          // We can kill the subscription to our source if we now have no more\n          // active groups subscribed, and a teardown was already attempted on\n          // the source.\n          --groupBySourceSubscriber.activeGroups === 0 &&\n            groupBySourceSubscriber.teardownAttempted &&\n            groupBySourceSubscriber.unsubscribe();\n        };\n      });\n      result.key = key;\n      return result;\n    }\n  });\n}\n\n/**\n * This was created because groupBy is a bit unique, in that emitted groups that have\n * subscriptions have to keep the subscription to the source alive until they\n * are torn down.\n */\nclass GroupBySubscriber<T> extends OperatorSubscriber<T> {\n  /**\n   * The number of actively subscribed groups\n   */\n  activeGroups = 0;\n  /**\n   * Whether or not teardown was attempted on this subscription.\n   */\n  teardownAttempted = false;\n\n  unsubscribe() {\n    this.teardownAttempted = true;\n    // We only kill our subscription to the source if we have\n    // no active groups. As stated above, consider this scenario:\n    // source$.pipe(groupBy(fn), take(2)).\n    this.activeGroups === 0 && super.unsubscribe();\n  }\n}\n\n/**\n * An observable of values that is the emitted by the result of a {@link groupBy} operator,\n * contains a `key` property for the grouping.\n */\nexport interface GroupedObservable<K, T> extends Observable<T> {\n  /**\n   * The key value for the grouped notifications.\n   */\n  readonly key: K;\n}\n","import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Emits `false` if the input Observable emits any values, or emits `true` if the\n * input Observable completes without emitting any values.\n *\n * <span class=\"informal\">Tells whether any values are emitted by an Observable.</span>\n *\n * ![](isEmpty.png)\n *\n * `isEmpty` transforms an Observable that emits values into an Observable that\n * emits a single boolean value representing whether or not any values were\n * emitted by the source Observable. As soon as the source Observable emits a\n * value, `isEmpty` will emit a `false` and complete.  If the source Observable\n * completes having not emitted anything, `isEmpty` will emit a `true` and\n * complete.\n *\n * A similar effect could be achieved with {@link count}, but `isEmpty` can emit\n * a `false` value sooner.\n *\n * ## Examples\n *\n * Emit `false` for a non-empty Observable.\n *\n * ```ts\n * import { Subject } from 'rxjs';\n * import { isEmpty } from 'rxjs/operators';\n *\n * const source = new Subject<string>();\n * const result = source.pipe(isEmpty());\n *\n * source.subscribe(x => console.log(x));\n * result.subscribe(x => console.log(x));\n *\n * source.next('a');\n * source.next('b');\n * source.next('c');\n * source.complete();\n *\n * // Outputs\n * // a\n * // false\n * // b\n * // c\n * ```\n *\n * Emit `true` for an empty Observable.\n *\n * ```ts\n * import { EMPTY } from 'rxjs';\n * import { isEmpty } from 'rxjs/operators';\n *\n * const result = EMPTY.pipe(isEmpty());\n * result.subscribe(x => console.log(x));\n *\n * // Outputs\n * // true\n * ```\n *\n * @see {@link count}\n * @see {@link index/EMPTY}\n *\n * @return A function that returns an Observable that emits boolean value\n * indicating whether the source Observable was empty or not.\n */\nexport function isEmpty<T>(): OperatorFunction<T, boolean> {\n  return operate((source, subscriber) => {\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        () => {\n          subscriber.next(false);\n          subscriber.complete();\n        },\n        () => {\n          subscriber.next(true);\n          subscriber.complete();\n        }\n      )\n    );\n  });\n}\n","import { EMPTY } from '../observable/empty';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Waits for the source to complete, then emits the last N values from the source,\n * as specified by the `count` argument.\n *\n * ![](takeLast.png)\n *\n * `takeLast` results in an observable that will hold values up to `count` values in memory,\n * until the source completes. It then pushes all values in memory to the consumer, in the\n * order they were received from the source, then notifies the consumer that it is\n * complete.\n *\n * If for some reason the source completes before the `count` supplied to `takeLast` is reached,\n * all values received until that point are emitted, and then completion is notified.\n *\n * **Warning**: Using `takeLast` with an observable that never completes will result\n * in an observable that never emits a value.\n *\n * ## Example\n *\n * Take the last 3 values of an Observable with many values\n *\n * ```ts\n * import { range } from 'rxjs';\n * import { takeLast } from 'rxjs/operators';\n *\n * const many = range(1, 100);\n * const lastThree = many.pipe(takeLast(3));\n * lastThree.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeUntil}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param count The maximum number of values to emit from the end of\n * the sequence of values emitted by the source Observable.\n * @return A function that returns an Observable that emits at most the last\n * `count` values emitted by the source Observable.\n */\nexport function takeLast<T>(count: number): MonoTypeOperatorFunction<T> {\n  return count <= 0\n    ? () => EMPTY\n    : operate((source, subscriber) => {\n        // This buffer will hold the values we are going to emit\n        // when the source completes. Since we only want to take the\n        // last N values, we can't emit until we're sure we're not getting\n        // any more values.\n        let buffer: T[] = [];\n        source.subscribe(\n          new OperatorSubscriber(\n            subscriber,\n            (value) => {\n              // Add the most recent value onto the end of our buffer.\n              buffer.push(value);\n              // If our buffer is now larger than the number of values we\n              // want to take, we remove the oldest value from the buffer.\n              count < buffer.length && buffer.shift();\n            },\n            () => {\n              // The source completed, we now know what are last values\n              // are, emit them in the order they were received.\n              for (const value of buffer) {\n                subscriber.next(value);\n              }\n              subscriber.complete();\n            },\n            // Errors are passed through to the consumer\n            undefined,\n            () => {\n              // During teardown release the values in our buffer.\n              buffer = null!;\n            }\n          )\n        );\n      });\n}\n","import { Observable } from '../Observable';\nimport { EmptyError } from '../util/EmptyError';\nimport { OperatorFunction, TruthyTypesOf } from '../types';\nimport { filter } from './filter';\nimport { takeLast } from './takeLast';\nimport { throwIfEmpty } from './throwIfEmpty';\nimport { defaultIfEmpty } from './defaultIfEmpty';\nimport { identity } from '../util/identity';\n\nexport function last<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\nexport function last<T, D>(predicate: BooleanConstructor, defaultValue: D): OperatorFunction<T, TruthyTypesOf<T> | D>;\nexport function last<T, D = T>(predicate?: null, defaultValue?: D): OperatorFunction<T, T | D>;\nexport function last<T, S extends T>(\n  predicate: (value: T, index: number, source: Observable<T>) => value is S,\n  defaultValue?: S\n): OperatorFunction<T, S>;\nexport function last<T, D = T>(\n  predicate: (value: T, index: number, source: Observable<T>) => boolean,\n  defaultValue?: D\n): OperatorFunction<T, T | D>;\n\n/**\n * Returns an Observable that emits only the last item emitted by the source Observable.\n * It optionally takes a predicate function as a parameter, in which case, rather than emitting\n * the last item from the source Observable, the resulting Observable will emit the last item\n * from the source Observable that satisfies the predicate.\n *\n * ![](last.png)\n *\n * It will throw an error if the source completes without notification or one that matches the predicate. It\n * returns the last value or if a predicate is provided last value that matches the predicate. It returns the\n * given default value if no notification is emitted or matches the predicate.\n *\n * ## Example\n * Last alphabet from the sequence.\n * ```ts\n * import { from } from 'rxjs';\n * import { last } from 'rxjs/operators';\n *\n * const source = from(['x', 'y', 'z']);\n * const example = source.pipe(last());\n * //output: \"Last alphabet: z\"\n * example.subscribe(val => console.log(`Last alphabet: ${val}`));\n * ```\n *\n * Default value when the value in the predicate is not matched.\n * ```ts\n * import { from } from 'rxjs';\n * import { last } from 'rxjs/operators';\n *\n * const source = from(['x', 'y', 'z']);\n * const example = source.pipe(last(char => char === 'a','not exist'));\n * //output: \"'a' is not exist.\"\n * example.subscribe(val => console.log(`'a' is ${val}.`));\n * ```\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipLast}\n * @see {@link skipWhile}\n *\n * @throws {EmptyError} Delivers an EmptyError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @param {function} [predicate] - The condition any source emitted item has to satisfy.\n * @param {any} [defaultValue] - An optional default value to provide if last\n * predicate isn't met or no values were emitted.\n * @return A function that returns an Observable that emits only the last item\n * satisfying the given condition from the source, or a NoSuchElementException\n * if no such items are emitted.\n * @throws - Throws if no items that match the predicate are emitted by the source Observable.\n */\nexport function last<T, D>(\n  predicate?: ((value: T, index: number, source: Observable<T>) => boolean) | null,\n  defaultValue?: D\n): OperatorFunction<T, T | D> {\n  const hasDefaultValue = arguments.length >= 2;\n  return (source: Observable<T>) =>\n    source.pipe(\n      predicate ? filter((v, i) => predicate(v, i, source)) : identity,\n      takeLast(1),\n      hasDefaultValue ? defaultIfEmpty(defaultValue!) : throwIfEmpty(() => new EmptyError())\n    );\n}\n","import { Notification } from '../Notification';\nimport { OperatorFunction, ObservableNotification } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Represents all of the notifications from the source Observable as `next`\n * emissions marked with their original types within {@link Notification}\n * objects.\n *\n * <span class=\"informal\">Wraps `next`, `error` and `complete` emissions in\n * {@link Notification} objects, emitted as `next` on the output Observable.\n * </span>\n *\n * ![](materialize.png)\n *\n * `materialize` returns an Observable that emits a `next` notification for each\n * `next`, `error`, or `complete` emission of the source Observable. When the\n * source Observable emits `complete`, the output Observable will emit `next` as\n * a Notification of type \"complete\", and then it will emit `complete` as well.\n * When the source Observable emits `error`, the output will emit `next` as a\n * Notification of type \"error\", and then `complete`.\n *\n * This operator is useful for producing metadata of the source Observable, to\n * be consumed as `next` emissions. Use it in conjunction with\n * {@link dematerialize}.\n *\n * ## Example\n *\n * Convert a faulty Observable to an Observable of Notifications\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { materialize, map } from 'rxjs/operators';\n *\n * const letters = of('a', 'b', 13, 'd');\n * const upperCase = letters.pipe(map(x => x.toUpperCase()));\n * const materialized = upperCase.pipe(materialize());\n * materialized.subscribe(x => console.log(x));\n *\n * // Results in the following:\n * // - Notification {kind: \"N\", value: \"A\", error: undefined, hasValue: true}\n * // - Notification {kind: \"N\", value: \"B\", error: undefined, hasValue: true}\n * // - Notification {kind: \"E\", value: undefined, error: TypeError:\n * //   x.toUpperCase is not a function at MapSubscriber.letters.map.x\n * //   [as project] (http://1…, hasValue: false}\n * ```\n *\n * @see {@link Notification}\n * @see {@link dematerialize}\n *\n * @return A function that returns an Observable that emits\n * {@link Notification} objects that wrap the original emissions from the\n * source Observable with metadata.\n */\nexport function materialize<T>(): OperatorFunction<T, Notification<T> & ObservableNotification<T>> {\n  return operate((source, subscriber) => {\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value) => {\n          subscriber.next(Notification.createNext(value));\n        },\n        () => {\n          subscriber.next(Notification.createComplete());\n          subscriber.complete();\n        },\n        (err) => {\n          subscriber.next(Notification.createError(err));\n          subscriber.complete();\n        }\n      )\n    );\n  });\n}\n","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { isFunction } from '../util/isFunction';\n\n/**\n * The Max operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the largest value.\n *\n * ![](max.png)\n *\n * ## Examples\n * Get the maximal value of a series of numbers\n * ```ts\n * import { of } from 'rxjs';\n * import { max } from 'rxjs/operators';\n *\n * of(5, 4, 7, 2, 8).pipe(\n *   max(),\n * )\n * .subscribe(x => console.log(x)); // -> 8\n * ```\n *\n * Use a comparer function to get the maximal item\n * ```typescript\n * import { of } from 'rxjs';\n * import { max } from 'rxjs/operators';\n *\n * interface Person {\n *   age: number,\n *   name: string\n * }\n *of(\n *   {age: 7, name: 'Foo'},\n *   {age: 5, name: 'Bar'},\n *   {age: 9, name: 'Beer'},\n * ).pipe(\n *   max<Person>((a: Person, b: Person) => a.age < b.age ? -1 : 1),\n * )\n * .subscribe((x: Person) => console.log(x.name)); // -> 'Beer'\n * ```\n *\n * @see {@link min}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return A function that returns an Observable that emits item with the\n * largest value.\n */\nexport function max<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  return reduce(isFunction(comparer) ? (x, y) => (comparer(x, y) > 0 ? x : y) : (x, y) => (x > y ? x : y));\n}\n","import { ObservableInput, ObservableInputTuple, OperatorFunction, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { internalFromArray } from '../observable/fromArray';\nimport { mergeAll } from './mergeAll';\nimport { popNumber, popScheduler } from '../util/args';\n\n/** @deprecated Replaced with {@link mergeWith}. Will be removed in v8. */\nexport function merge<T, A extends readonly unknown[]>(...sources: [...ObservableInputTuple<A>]): OperatorFunction<T, T | A[number]>;\n/** @deprecated Replaced with {@link mergeWith}. Will be removed in v8. */\nexport function merge<T, A extends readonly unknown[]>(\n  ...sourcesAndConcurrency: [...ObservableInputTuple<A>, number]\n): OperatorFunction<T, T | A[number]>;\n/** @deprecated Replaced with {@link mergeWith}. Will be removed in v8. */\nexport function merge<T, A extends readonly unknown[]>(\n  ...sourcesAndScheduler: [...ObservableInputTuple<A>, SchedulerLike]\n): OperatorFunction<T, T | A[number]>;\n/** @deprecated Replaced with {@link mergeWith}. Will be removed in v8. */\nexport function merge<T, A extends readonly unknown[]>(\n  ...sourcesAndConcurrencyAndScheduler: [...ObservableInputTuple<A>, number, SchedulerLike]\n): OperatorFunction<T, T | A[number]>;\n\nexport function merge<T>(...args: unknown[]): OperatorFunction<T, unknown> {\n  const scheduler = popScheduler(args);\n  const concurrent = popNumber(args, Infinity);\n  args = argsOrArgArray(args);\n\n  return operate((source, subscriber) => {\n    mergeAll(concurrent)(internalFromArray([source, ...(args as ObservableInput<T>[])], scheduler)).subscribe(subscriber as any);\n  });\n}\n","import { mergeMap } from './mergeMap';\n\n/**\n * @deprecated Renamed to {@link mergeMap}. Will be removed in v8.\n */\nexport const flatMap = mergeMap;\n","import { OperatorFunction, ObservedValueOf, ObservableInput } from '../types';\nimport { mergeMap } from './mergeMap';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function mergeMapTo<O extends ObservableInput<unknown>>(\n  innerObservable: O,\n  concurrent?: number\n): OperatorFunction<any, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function mergeMapTo<T, R, O extends ObservableInput<unknown>>(\n  innerObservable: O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R,\n  concurrent?: number\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is merged multiple\n * times in the output Observable.\n *\n * <span class=\"informal\">It's like {@link mergeMap}, but maps each value always\n * to the same inner Observable.</span>\n *\n * ![](mergeMapTo.png)\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then merges those resulting Observables into one\n * single Observable, which is the output Observable.\n *\n * ## Example\n * For each click event, start an interval Observable ticking every 1 second\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { mergeMapTo } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(mergeMapTo(interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link concatMapTo}\n * @see {@link merge}\n * @see {@link mergeAll}\n * @see {@link mergeMap}\n * @see {@link mergeScan}\n * @see {@link switchMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @param {number} [concurrent=Infinity] Maximum number of input\n * Observables being subscribed to concurrently.\n * @return A function that returns an Observable that emits items from the\n * given `innerObservable`.\n */\nexport function mergeMapTo<T, R, O extends ObservableInput<unknown>>(\n  innerObservable: O,\n  resultSelector?: ((outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R) | number,\n  concurrent: number = Infinity\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  if (isFunction(resultSelector)) {\n    return mergeMap(() => innerObservable, resultSelector, concurrent);\n  }\n  if (typeof resultSelector === 'number') {\n    concurrent = resultSelector;\n  }\n  return mergeMap(() => innerObservable, concurrent);\n}\n","import { ObservableInput, OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { mergeInternals } from './mergeInternals';\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, then each intermediate\n * Observable returned is merged into the output Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but the Observables returned\n * by the accumulator are merged into the outer Observable.</span>\n *\n * The first parameter of the `mergeScan` is an `accumulator` function which is\n * being called every time the source Observable emits a value. `mergeScan` will\n * subscribe to the value returned by the `accumulator` function and will emit\n * values to the subscriber emitted by inner Observable.\n *\n * The `accumulator` function is being called with three parameters passed to it:\n * `acc`, `value` and `index`. The `acc` parameter is used as the state parameter\n * whose value is initially set to the `seed` parameter (the second parameter\n * passed to the `mergeScan` operator).\n *\n * `mergeScan` internally keeps the value of the `acc` parameter: as long as the\n * source Observable emits without inner Observable emitting, the `acc` will be\n * set to `seed`. The next time the inner Observable emits a value, `mergeScan`\n * will internally remember it and it will be passed to the `accumulator`\n * function as `acc` parameter the next time source emits.\n *\n * The `value` parameter of the `accumulator` function is the value emitted by the\n * source Observable, while the `index` is a number which represent the order of the\n * current emission by the source Observable. It starts with 0.\n *\n * The last parameter to the `mergeScan` is the `concurrent` value which defaults\n * to Infinity. It represent the maximum number of inner Observable subscriptions\n * at a time.\n *\n * ## Example\n * Count the number of click events\n * ```ts\n * import { fromEvent, of } from 'rxjs';\n * import { mapTo, mergeScan } from 'rxjs/operators';\n *\n * const click$ = fromEvent(document, 'click');\n * const one$ = click$.pipe(mapTo(1));\n * const seed = 0;\n * const count$ = one$.pipe(\n *   mergeScan((acc, one) => of(acc + one), seed),\n * );\n * count$.subscribe(x => console.log(x));\n *\n * // Results:\n * // 1\n * // 2\n * // 3\n * // 4\n * // ...and so on for each click\n * ```\n *\n * @see {@link scan}\n * @see {@link switchScan}\n *\n * @param {function(acc: R, value: T): Observable<R>} accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @param {number} [concurrent=Infinity] Maximum number of\n * input Observables being subscribed to concurrently.\n * @return A function that returns an Observable of the accumulated values.\n */\nexport function mergeScan<T, R>(\n  accumulator: (acc: R, value: T, index: number) => ObservableInput<R>,\n  seed: R,\n  concurrent = Infinity\n): OperatorFunction<T, R> {\n  return operate((source, subscriber) => {\n    // The accumulated state.\n    let state = seed;\n\n    return mergeInternals(\n      source,\n      subscriber,\n      (value, index) => accumulator(state, value, index),\n      concurrent,\n      (value) => {\n        state = value;\n      },\n      false,\n      undefined,\n      () => (state = null!)\n    );\n  });\n}\n","import { ObservableInputTuple, OperatorFunction } from '../types';\nimport { merge } from './merge';\n\n/**\n * Merge the values from all observables to an single observable result.\n *\n * Creates an observable, that when subscribed to, subscribes to the source\n * observable, and all other sources provided as arguments. All values from\n * every source are emitted from the resulting subscription.\n *\n * When all sources complete, the resulting observable will complete.\n *\n * When any one source errors, the resulting observable will error.\n *\n *\n * ### Example\n *\n * Joining all outputs from multiple user input event streams:\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { map, mergeWith } from 'rxjs/operators';\n *\n * const clicks$ = fromEvent(document, 'click').pipe(map(() => 'click'));\n * const mousemoves$ = fromEvent(document, 'mousemove').pipe(map(() => 'mousemove'));\n * const dblclicks$ = fromEvent(document, 'dblclick').pipe(map(() => 'dblclick'));\n *\n * mousemoves$.pipe(\n *   mergeWith(clicks$, dblclicks$),\n * )\n * .subscribe(x => console.log(x));\n *\n * // result (assuming user interactions)\n * // \"mousemove\"\n * // \"mousemove\"\n * // \"mousemove\"\n * // \"click\"\n * // \"click\"\n * // \"dblclick\"\n * ```\n * @param otherSources the sources to combine the current source with.\n * @return A function that returns an Observable that merges the values from\n * all given Observables.\n */\nexport function mergeWith<T, A extends readonly unknown[]>(\n  ...otherSources: [...ObservableInputTuple<A>]\n): OperatorFunction<T, T | A[number]> {\n  return merge(...otherSources);\n}\n","import { reduce } from './reduce';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { isFunction } from '../util/isFunction';\n\n/**\n * The Min operator operates on an Observable that emits numbers (or items that can be compared with a provided function),\n * and when source Observable completes it emits a single item: the item with the smallest value.\n *\n * ![](min.png)\n *\n * ## Examples\n * Get the minimal value of a series of numbers\n * ```ts\n * import { of } from 'rxjs';\n * import { min } from 'rxjs/operators';\n *\n * of(5, 4, 7, 2, 8).pipe(\n *   min(),\n * )\n * .subscribe(x => console.log(x)); // -> 2\n * ```\n *\n * Use a comparer function to get the minimal item\n * ```typescript\n * import { of } from 'rxjs';\n * import { min } from 'rxjs/operators';\n *\n * interface Person {\n *   age: number,\n *   name: string\n * }\n *of(\n *   {age: 7, name: 'Foo'},\n *   {age: 5, name: 'Bar'},\n *   {age: 9, name: 'Beer'},\n * ).pipe(\n *   min<Person>( (a: Person, b: Person) => a.age < b.age ? -1 : 1),\n * )\n * .subscribe((x: Person) => console.log(x.name)); // -> 'Bar'\n * ```\n * @see {@link max}\n *\n * @param {Function} [comparer] - Optional comparer function that it will use instead of its default to compare the\n * value of two items.\n * @return A function that returns an Observable that emits item with the\n * smallest value.\n */\nexport function min<T>(comparer?: (x: T, y: T) => number): MonoTypeOperatorFunction<T> {\n  return reduce(isFunction(comparer) ? (x, y) => (comparer(x, y) < 0 ? x : y) : (x, y) => (x < y ? x : y));\n}\n","import { Subject } from '../Subject';\nimport { Observable } from '../Observable';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { OperatorFunction, UnaryFunction, ObservedValueOf, ObservableInput } from '../types';\nimport { isFunction } from '../util/isFunction';\nimport { connect } from './connect';\n\n/**\n * An operator that creates a {@link ConnectableObservable}, that when connected,\n * with the `connect` method, will use the provided subject to multicast the values\n * from the source to all consumers.\n *\n * @param subject The subject to multicast through.\n * @return A function that returns a {@link ConnectableObservable}\n * @deprecated Will be removed in v8. To create a connectable observable, use {@link connectable}.\n * If you're using {@link refCount} after `multicast`, use the {@link share} operator instead.\n * `multicast(subject), refCount()` is equivalent to\n * `share({ connector: () => subject, resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false })`.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function multicast<T>(subject: Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\n\n/**\n * Because this is deprecated in favor of the {@link connect} operator, and was otherwise poorly documented,\n * rather than duplicate the effort of documenting the same behavior, please see documentation for the\n * {@link connect} operator.\n *\n * @param subject The subject used to multicast.\n * @param selector A setup function to setup the multicast\n * @return A function that returns an observable that mirrors the observable returned by the selector.\n * @deprecated Will be removed in v8. Use the {@link connect} operator instead.\n * `multicast(subject, selector)` is equivalent to\n * `connect(selector, { connector: () => subject })`.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function multicast<T, O extends ObservableInput<any>>(\n  subject: Subject<T>,\n  selector: (shared: Observable<T>) => O\n): OperatorFunction<T, ObservedValueOf<O>>;\n\n/**\n * An operator that creates a {@link ConnectableObservable}, that when connected,\n * with the `connect` method, will use the provided subject to multicast the values\n * from the source to all consumers.\n *\n * @param subjectFactory A factory that will be called to create the subject. Passing a function here\n * will cause the underlying subject to be \"reset\" on error, completion, or refCounted unsubscription of\n * the source.\n * @return A function that returns a {@link ConnectableObservable}\n * @deprecated Will be removed in v8. To create a connectable observable, use {@link connectable}.\n * If you're using {@link refCount} after `multicast`, use the {@link share} operator instead.\n * `multicast(() => new BehaviorSubject('test')), refCount()` is equivalent to\n * `share({ connector: () => new BehaviorSubject('test') })`.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function multicast<T>(subjectFactory: () => Subject<T>): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\n\n/**\n * Because this is deprecated in favor of the {@link connect} operator, and was otherwise poorly documented,\n * rather than duplicate the effort of documenting the same behavior, please see documentation for the\n * {@link connect} operator.\n *\n * @param subjectFactory A factory that creates the subject used to multicast.\n * @param selector A function to setup the multicast and select the output.\n * @return A function that returns an observable that mirrors the observable returned by the selector.\n * @deprecated Will be removed in v8. Use the {@link connect} operator instead.\n * `multicast(subjectFactory, selector)` is equivalent to\n * `connect(selector, { connector: subjectFactory })`.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function multicast<T, O extends ObservableInput<any>>(\n  subjectFactory: () => Subject<T>,\n  selector: (shared: Observable<T>) => O\n): OperatorFunction<T, ObservedValueOf<O>>;\n\n/**\n * @deprecated Will be removed in v8. Use the {@link connectable} observable, the {@link connect} operator or the\n * {@link share} operator instead. See the overloads below for equivalent replacement examples of this operator's\n * behaviors.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function multicast<T, R>(\n  subjectOrSubjectFactory: Subject<T> | (() => Subject<T>),\n  selector?: (source: Observable<T>) => Observable<R>\n): OperatorFunction<T, R> {\n  const subjectFactory = isFunction(subjectOrSubjectFactory) ? subjectOrSubjectFactory : () => subjectOrSubjectFactory;\n\n  if (isFunction(selector)) {\n    // If a selector function is provided, then we're a \"normal\" operator that isn't\n    // going to return a ConnectableObservable. We can use `connect` to do what we\n    // need to do.\n    return connect(selector, {\n      connector: subjectFactory,\n    });\n  }\n\n  return (source: Observable<T>) => new ConnectableObservable<any>(source, subjectFactory);\n}\n","import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Groups pairs of consecutive emissions together and emits them as an array of\n * two values.\n *\n * <span class=\"informal\">Puts the current value and previous value together as\n * an array, and emits that.</span>\n *\n * ![](pairwise.png)\n *\n * The Nth emission from the source Observable will cause the output Observable\n * to emit an array [(N-1)th, Nth] of the previous and the current value, as a\n * pair. For this reason, `pairwise` emits on the second and subsequent\n * emissions from the source Observable, but not on the first emission, because\n * there is no previous value in that case.\n *\n * ## Example\n * On every click (starting from the second), emit the relative distance to the previous click\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { pairwise, map } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const pairs = clicks.pipe(pairwise());\n * const distance = pairs.pipe(\n *   map(pair => {\n *     const x0 = pair[0].clientX;\n *     const y0 = pair[0].clientY;\n *     const x1 = pair[1].clientX;\n *     const y1 = pair[1].clientY;\n *     return Math.sqrt(Math.pow(x0 - x1, 2) + Math.pow(y0 - y1, 2));\n *   }),\n * );\n * distance.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link buffer}\n * @see {@link bufferCount}\n *\n * @return A function that returns an Observable of pairs (as arrays) of\n * consecutive values from the source Observable.\n */\nexport function pairwise<T>(): OperatorFunction<T, [T, T]> {\n  return operate((source, subscriber) => {\n    let prev: T;\n    let hasPrev = false;\n    source.subscribe(\n      new OperatorSubscriber(subscriber, (value) => {\n        const p = prev;\n        prev = value;\n        hasPrev && subscriber.next([p, value]);\n        hasPrev = true;\n      })\n    );\n  });\n}\n","import { not } from '../util/not';\nimport { filter } from './filter';\nimport { Observable } from '../Observable';\nimport { UnaryFunction } from '../types';\n\n/**\n * Splits the source Observable into two, one with values that satisfy a\n * predicate, and another with values that don't satisfy the predicate.\n *\n * <span class=\"informal\">It's like {@link filter}, but returns two Observables:\n * one like the output of {@link filter}, and the other with values that did not\n * pass the condition.</span>\n *\n * ![](partition.png)\n *\n * `partition` outputs an array with two Observables that partition the values\n * from the source Observable through the given `predicate` function. The first\n * Observable in that array emits source values for which the predicate argument\n * returns true. The second Observable emits source values for which the\n * predicate returns false. The first behaves like {@link filter} and the second\n * behaves like {@link filter} with the predicate negated.\n *\n * ## Example\n * Partition click events into those on DIV elements and those elsewhere\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { partition } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const parts = clicks.pipe(partition(ev => ev.target.tagName === 'DIV'));\n * const clicksOnDivs = parts[0];\n * const clicksElsewhere = parts[1];\n * clicksOnDivs.subscribe(x => console.log('DIV clicked: ', x));\n * clicksElsewhere.subscribe(x => console.log('Other clicked: ', x));\n * ```\n *\n * @see {@link filter}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates each value emitted by the source Observable. If it returns `true`,\n * the value is emitted on the first Observable in the returned array, if\n * `false` the value is emitted on the second Observable in the array. The\n * `index` parameter is the number `i` for the i-th source emission that has\n * happened since the subscription, starting from the number `0`.\n * @param {any} [thisArg] An optional argument to determine the value of `this`\n * in the `predicate` function.\n * @return A function that returns an array with two Observables: one with\n * values that passed the predicate, and another with values that did not pass\n * the predicate.\n * @deprecated Replaced with the `partition` static creation function. Will be removed in v8.\n */\nexport function partition<T>(\n  predicate: (value: T, index: number) => boolean,\n  thisArg?: any\n): UnaryFunction<Observable<T>, [Observable<T>, Observable<T>]> {\n  return (source: Observable<T>) =>\n    [filter(predicate, thisArg)(source), filter(not(predicate, thisArg))(source)] as [Observable<T>, Observable<T>];\n}\n","import { map } from './map';\nimport { OperatorFunction } from '../types';\n\n/* tslint:disable:max-line-length */\nexport function pluck<T, K1 extends keyof T>(k1: K1): OperatorFunction<T, T[K1]>;\nexport function pluck<T, K1 extends keyof T, K2 extends keyof T[K1]>(k1: K1, k2: K2): OperatorFunction<T, T[K1][K2]>;\nexport function pluck<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2]>(\n  k1: K1,\n  k2: K2,\n  k3: K3\n): OperatorFunction<T, T[K1][K2][K3]>;\nexport function pluck<T, K1 extends keyof T, K2 extends keyof T[K1], K3 extends keyof T[K1][K2], K4 extends keyof T[K1][K2][K3]>(\n  k1: K1,\n  k2: K2,\n  k3: K3,\n  k4: K4\n): OperatorFunction<T, T[K1][K2][K3][K4]>;\nexport function pluck<\n  T,\n  K1 extends keyof T,\n  K2 extends keyof T[K1],\n  K3 extends keyof T[K1][K2],\n  K4 extends keyof T[K1][K2][K3],\n  K5 extends keyof T[K1][K2][K3][K4]\n>(k1: K1, k2: K2, k3: K3, k4: K4, k5: K5): OperatorFunction<T, T[K1][K2][K3][K4][K5]>;\nexport function pluck<\n  T,\n  K1 extends keyof T,\n  K2 extends keyof T[K1],\n  K3 extends keyof T[K1][K2],\n  K4 extends keyof T[K1][K2][K3],\n  K5 extends keyof T[K1][K2][K3][K4],\n  K6 extends keyof T[K1][K2][K3][K4][K5]\n>(k1: K1, k2: K2, k3: K3, k4: K4, k5: K5, k6: K6): OperatorFunction<T, T[K1][K2][K3][K4][K5][K6]>;\nexport function pluck<\n  T,\n  K1 extends keyof T,\n  K2 extends keyof T[K1],\n  K3 extends keyof T[K1][K2],\n  K4 extends keyof T[K1][K2][K3],\n  K5 extends keyof T[K1][K2][K3][K4],\n  K6 extends keyof T[K1][K2][K3][K4][K5]\n>(k1: K1, k2: K2, k3: K3, k4: K4, k5: K5, k6: K6, ...rest: string[]): OperatorFunction<T, unknown>;\nexport function pluck<T>(...properties: string[]): OperatorFunction<T, unknown>;\n/* tslint:enable:max-line-length */\n\n/**\n * Maps each source value to its specified nested property.\n *\n * <span class=\"informal\">Like {@link map}, but meant only for picking one of\n * the nested properties of every emitted value.</span>\n *\n * ![](pluck.png)\n *\n * Given a list of strings or numbers describing a path to a property, retrieves\n * the value of a specified nested property from all values in the source\n * Observable. If a property can't be resolved, it will return `undefined` for\n * that value.\n *\n * ## Example\n * Map every click to the tagName of the clicked target element\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { pluck } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const tagNames = clicks.pipe(pluck('target', 'tagName'));\n * tagNames.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link map}\n *\n * @param properties The nested properties to pluck from each source\n * value.\n * @return A function that returns an Observable of property values from the\n * source values.\n * @deprecated Use {@link map} and optional chaining: `pluck('foo', 'bar')` is `map(x => x?.foo?.bar)`. Will be removed in v8.\n */\nexport function pluck<T, R>(...properties: Array<string | number | symbol>): OperatorFunction<T, R> {\n  const length = properties.length;\n  if (length === 0) {\n    throw new Error('list of properties cannot be empty.');\n  }\n  return map((x) => {\n    let currentProp: any = x;\n    for (let i = 0; i < length; i++) {\n      const p = currentProp?.[properties[i]];\n      if (typeof p !== 'undefined') {\n        currentProp = p;\n      } else {\n        return undefined;\n      }\n    }\n    return currentProp;\n  });\n}\n","import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { multicast } from './multicast';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { MonoTypeOperatorFunction, OperatorFunction, UnaryFunction, ObservableInput, ObservedValueOf } from '../types';\nimport { connect } from './connect';\n\n/**\n * Returns a connectable observable that, when connected, will multicast\n * all values through a single underlying {@link Subject} instance.\n *\n * @deprecated Will be removed in v8. To create a connectable observable, use {@link connectable}.\n * `source.pipe(publish())` is equivalent to\n * `connectable(source, { connector: () => new Subject(), resetOnDisconnect: false })`.\n * If you're using {@link refCount} after `publish`, use {@link share} operator instead.\n * `source.pipe(publish(), refCount())` is equivalent to\n * `source.pipe(share({ resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false }))`.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function publish<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>>;\n\n/**\n * Returns an observable, that when subscribed to, creates an underlying {@link Subject},\n * provides an observable view of it to a `selector` function, takes the observable result of\n * that selector function and subscribes to it, sending its values to the consumer, _then_ connects\n * the subject to the original source.\n *\n * @param selector A function used to setup multicasting prior to automatic connection.\n *\n * @deprecated Will be removed in v8. Use the {@link connect} operator instead.\n * `publish(selector)` is equivalent to `connect(selector)`.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function publish<T, O extends ObservableInput<any>>(selector: (shared: Observable<T>) => O): OperatorFunction<T, ObservedValueOf<O>>;\n\n/**\n * Returns a ConnectableObservable, which is a variety of Observable that waits until its connect method is called\n * before it begins emitting items to those Observers that have subscribed to it.\n *\n * <span class=\"informal\">Makes a cold Observable hot</span>\n *\n * ![](publish.png)\n *\n * ## Examples\n * Make source$ hot by applying publish operator, then merge each inner observable into a single one\n * and subscribe.\n * ```ts\n * import { of, zip, interval, merge } from \"rxjs\";\n * import { map, publish, tap } from \"rxjs/operators\";\n *\n * const source$ = zip(interval(2000), of(1, 2, 3, 4, 5, 6, 7, 8, 9)).pipe(\n *   map(values => values[1])\n * );\n *\n * source$\n *   .pipe(\n *     publish(multicasted$ =>\n *       merge(\n *         multicasted$.pipe(tap(x => console.log('Stream 1:', x))),\n *         multicasted$.pipe(tap(x => console.log('Stream 2:', x))),\n *         multicasted$.pipe(tap(x => console.log('Stream 3:', x))),\n *       )\n *     )\n *   )\n *   .subscribe();\n *\n * // Results every two seconds\n * // Stream 1: 1\n * // Stream 2: 1\n * // Stream 3: 1\n * // ...\n * // Stream 1: 9\n * // Stream 2: 9\n * // Stream 3: 9\n * ```\n *\n * @param {Function} [selector] - Optional selector function which can use the multicasted source sequence as many times\n * as needed, without causing multiple subscriptions to the source sequence.\n * Subscribers to the given source will receive all notifications of the source from the time of the subscription on.\n * @return A function that returns a ConnectableObservable that upon connection\n * causes the source Observable to emit items to its Observers.\n * @deprecated Will be removed in v8. Use the {@link connectable} observable, the {@link connect} operator or the\n * {@link share} operator instead. See the overloads below for equivalent replacement examples of this operator's\n * behaviors.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function publish<T, R>(selector?: OperatorFunction<T, R>): MonoTypeOperatorFunction<T> | OperatorFunction<T, R> {\n  return selector ? (source) => connect(selector)(source) : (source) => multicast(new Subject<T>())(source);\n}\n","import { Observable } from '../Observable';\nimport { BehaviorSubject } from '../BehaviorSubject';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../types';\n\n/**\n * Creates a {@link ConnectableObservable} that utilizes a {@link BehaviorSubject}.\n *\n * @param initialValue The initial value passed to the {@link BehaviorSubject}.\n * @return A function that returns a {@link ConnectableObservable}\n * @deprecated Will be removed in v8. To create a connectable observable that uses a\n * {@link BehaviorSubject} under the hood, use {@link connectable}.\n * `source.pipe(publishBehavior(initValue))` is equivalent to\n * `connectable(source, { connector: () => new BehaviorSubject(initValue), resetOnDisconnect: false })`.\n * If you're using {@link refCount} after `publishBehavior`, use the {@link share} operator instead.\n * `source.pipe(publishBehavior(initValue), refCount())` is equivalent to\n * `source.pipe(share({ connector: () => new BehaviorSubject(initValue), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false  }))`.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function publishBehavior<T>(initialValue: T): UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  // Note that this has *never* supported the selector function.\n  return (source) => {\n    const subject = new BehaviorSubject<T>(initialValue);\n    return new ConnectableObservable(source, () => subject);\n  };\n}\n","import { Observable } from '../Observable';\nimport { AsyncSubject } from '../AsyncSubject';\nimport { ConnectableObservable } from '../observable/ConnectableObservable';\nimport { UnaryFunction } from '../types';\n\n/**\n * Returns a connectable observable sequence that shares a single subscription to the\n * underlying sequence containing only the last notification.\n *\n * ![](publishLast.png)\n *\n * Similar to {@link publish}, but it waits until the source observable completes and stores\n * the last emitted value.\n * Similarly to {@link publishReplay} and {@link publishBehavior}, this keeps storing the last\n * value even if it has no more subscribers. If subsequent subscriptions happen, they will\n * immediately get that last stored value and complete.\n *\n * ## Example\n *\n * ```ts\n * import { interval } from 'rxjs';\n * import { publishLast, tap, take } from 'rxjs/operators';\n *\n * const connectable =\n *   interval(1000)\n *     .pipe(\n *       tap(x => console.log(\"side effect\", x)),\n *       take(3),\n *       publishLast());\n *\n * connectable.subscribe(\n *   x => console.log(  \"Sub. A\", x),\n *   err => console.log(\"Sub. A Error\", err),\n *   () => console.log( \"Sub. A Complete\"));\n *\n * connectable.subscribe(\n *   x => console.log(  \"Sub. B\", x),\n *   err => console.log(\"Sub. B Error\", err),\n *   () => console.log( \"Sub. B Complete\"));\n *\n * connectable.connect();\n *\n * // Results:\n * //    \"side effect 0\"\n * //    \"side effect 1\"\n * //    \"side effect 2\"\n * //    \"Sub. A 2\"\n * //    \"Sub. B 2\"\n * //    \"Sub. A Complete\"\n * //    \"Sub. B Complete\"\n * ```\n *\n * @see {@link ConnectableObservable}\n * @see {@link publish}\n * @see {@link publishReplay}\n * @see {@link publishBehavior}\n *\n * @return A function that returns an Observable that emits elements of a\n * sequence produced by multicasting the source sequence.\n * @deprecated Will be removed in v8. To create a connectable observable with an\n * {@link AsyncSubject} under the hood, use {@link connectable}.\n * `source.pipe(publishLast())` is equivalent to\n * `connectable(source, { connector: () => new AsyncSubject(), resetOnDisconnect: false })`.\n * If you're using {@link refCount} after `publishLast`, use the {@link share} operator instead.\n * `source.pipe(publishLast(), refCount())` is equivalent to\n * `source.pipe(share({ connector: () => new AsyncSubject(), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false }))`.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function publishLast<T>(): UnaryFunction<Observable<T>, ConnectableObservable<T>> {\n  // Note that this has *never* supported a selector function like `publish` and `publishReplay`.\n  return (source) => {\n    const subject = new AsyncSubject<T>();\n    return new ConnectableObservable(source, () => subject);\n  };\n}\n","import { Observable } from '../Observable';\nimport { ReplaySubject } from '../ReplaySubject';\nimport { multicast } from './multicast';\nimport { MonoTypeOperatorFunction, OperatorFunction, TimestampProvider, ObservableInput, ObservedValueOf } from '../types';\nimport { isFunction } from '../util/isFunction';\n\n/**\n * Creates a {@link ConnectableObservable} that uses a {@link ReplaySubject}\n * internally.\n *\n * @param bufferSize The buffer size for the underlying {@link ReplaySubject}.\n * @param windowTime The window time for the underlying {@link ReplaySubject}.\n * @param timestampProvider The timestamp provider for the underlying {@link ReplaySubject}.\n * @deprecated Will be removed in v8. To create a connectable observable that uses a\n * {@link ReplaySubject} under the hood, use {@link connectable}.\n * `source.pipe(publishReplay(size, time, scheduler))` is equivalent to\n * `connectable(source, { connector: () => new ReplaySubject(size, time, scheduler), resetOnDisconnect: false })`.\n * If you're using {@link refCount} after `publishReplay`, use the {@link share} operator instead.\n * `publishReplay(size, time, scheduler), refCount()` is equivalent to\n * `share({ connector: () => new ReplaySubject(size, time, scheduler), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false })`.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function publishReplay<T>(\n  bufferSize?: number,\n  windowTime?: number,\n  timestampProvider?: TimestampProvider\n): MonoTypeOperatorFunction<T>;\n\n/**\n * Creates an observable, that when subscribed to, will create a {@link ReplaySubject},\n * and pass an observable from it (using [asObservable](api/index/class/Subject#asObservable)) to\n * the `selector` function, which then returns an observable that is subscribed to before\n * \"connecting\" the source to the internal `ReplaySubject`.\n *\n * Since this is deprecated, for additional details see the documentation for {@link connect}.\n *\n * @param bufferSize The buffer size for the underlying {@link ReplaySubject}.\n * @param windowTime The window time for the underlying {@link ReplaySubject}.\n * @param selector A function used to setup the multicast.\n * @param timestampProvider The timestamp provider for the underlying {@link ReplaySubject}.\n * @deprecated Will be removed in v8. Use the {@link connect} operator instead.\n * `source.pipe(publishReplay(size, window, selector, scheduler))` is equivalent to\n * `source.pipe(connect(selector, { connector: () => new ReplaySubject(size, window, scheduler) }))`.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function publishReplay<T, O extends ObservableInput<any>>(\n  bufferSize: number | undefined,\n  windowTime: number | undefined,\n  selector: (shared: Observable<T>) => O,\n  timestampProvider?: TimestampProvider\n): OperatorFunction<T, ObservedValueOf<O>>;\n\n/**\n * Creates a {@link ConnectableObservable} that uses a {@link ReplaySubject}\n * internally.\n *\n * @param bufferSize The buffer size for the underlying {@link ReplaySubject}.\n * @param windowTime The window time for the underlying {@link ReplaySubject}.\n * @param selector Passing `undefined` here determines that this operator will return a {@link ConnectableObservable}.\n * @param timestampProvider The timestamp provider for the underlying {@link ReplaySubject}.\n * @deprecated Will be removed in v8. To create a connectable observable that uses a\n * {@link ReplaySubject} under the hood, use {@link connectable}.\n * `source.pipe(publishReplay(size, time, scheduler))` is equivalent to\n * `connectable(source, { connector: () => new ReplaySubject(size, time, scheduler), resetOnDisconnect: false })`.\n * If you're using {@link refCount} after `publishReplay`, use the {@link share} operator instead.\n * `publishReplay(size, time, scheduler), refCount()` is equivalent to\n * `share({ connector: () => new ReplaySubject(size, time, scheduler), resetOnError: false, resetOnComplete: false, resetOnRefCountZero: false })`.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function publishReplay<T, O extends ObservableInput<any>>(\n  bufferSize: number | undefined,\n  windowTime: number | undefined,\n  selector: undefined,\n  timestampProvider: TimestampProvider\n): OperatorFunction<T, ObservedValueOf<O>>;\n\n/**\n * @deprecated Will be removed in v8. Use the {@link connectable} observable, the {@link connect} operator or the\n * {@link share} operator instead. See the overloads below for equivalent replacement examples of this operator's\n * behaviors.\n * Details: https://rxjs.dev/deprecations/multicasting\n */\nexport function publishReplay<T, R>(\n  bufferSize?: number,\n  windowTime?: number,\n  selectorOrScheduler?: TimestampProvider | OperatorFunction<T, R>,\n  timestampProvider?: TimestampProvider\n) {\n  if (selectorOrScheduler && !isFunction(selectorOrScheduler)) {\n    timestampProvider = selectorOrScheduler;\n  }\n  const selector = isFunction(selectorOrScheduler) ? selectorOrScheduler : undefined;\n  // Note, we're passing `selector!` here, because at runtime, `undefined` is an acceptable argument\n  // but it makes our TypeScript signature for `multicast` unhappy (as it should, because it's gross).\n  return (source: Observable<T>) => multicast(new ReplaySubject<T>(bufferSize, windowTime, timestampProvider), selector!)(source);\n}\n","import { OperatorFunction, ObservableInputTuple } from '../types';\nimport { raceInit } from '../observable/race';\nimport { operate } from '../util/lift';\nimport { identity } from '../util/identity';\n\n/**\n * Creates an Observable that mirrors the first source Observable to emit a next,\n * error or complete notification from the combination of the Observable to which\n * the operator is applied and supplied Observables.\n *\n * ## Example\n *\n * ```ts\n * import { interval } from 'rxjs';\n * import { mapTo, raceWith } from 'rxjs/operators';\n *\n * const obs1 = interval(1000).pipe(mapTo('fast one'));\n * const obs2 = interval(3000).pipe(mapTo('medium one'));\n * const obs3 = interval(5000).pipe(mapTo('slow one'));\n *\n * obs2.pipe(\n *   raceWith(obs3, obs1)\n * ).subscribe(\n *   winner => console.log(winner)\n * );\n *\n * // Outputs\n * // a series of 'fast one'\n * ```\n *\n * @param otherSources Sources used to race for which Observable emits first.\n * @return A function that returns an Observable that mirrors the output of the\n * first Observable to emit an item.\n */\n\nexport function raceWith<T, A extends readonly unknown[]>(\n  ...otherSources: [...ObservableInputTuple<A>]\n): OperatorFunction<T, T | A[number]> {\n  return !otherSources.length\n    ? identity\n    : operate((source, subscriber) => {\n        raceInit<T | A[number]>([source, ...otherSources])(subscriber);\n      });\n}\n","import { ObservableInputTuple, OperatorFunction } from '../types';\nimport { argsOrArgArray } from '../util/argsOrArgArray';\nimport { raceWith } from './raceWith';\n\n/** @deprecated Replaced with {@link raceWith}. Will be removed in v8. */\nexport function race<T, A extends readonly unknown[]>(otherSources: [...ObservableInputTuple<A>]): OperatorFunction<T, T | A[number]>;\n/** @deprecated Replaced with {@link raceWith}. Will be removed in v8. */\nexport function race<T, A extends readonly unknown[]>(...otherSources: [...ObservableInputTuple<A>]): OperatorFunction<T, T | A[number]>;\n\n/**\n * Returns an Observable that mirrors the first source Observable to emit a next,\n * error or complete notification from the combination of this Observable and supplied Observables.\n * @param args Sources used to race for which Observable emits first.\n * @return A function that returns an Observable that mirrors the output of the\n * first Observable to emit an item.\n * @deprecated Replaced with {@link raceWith}. Will be removed in v8.\n */\nexport function race<T>(...args: any[]): OperatorFunction<T, unknown> {\n  return raceWith(...argsOrArgArray(args));\n}\n","import { Subscription } from '../Subscription';\nimport { EMPTY } from '../observable/empty';\nimport { operate } from '../util/lift';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Returns an Observable that will resubscribe to the source stream when the source stream completes, at most count times.\n *\n * <span class=\"informal\">Repeats all values emitted on the source. It's like {@link retry}, but for non error cases.</span>\n *\n * ![](repeat.png)\n *\n * Similar to {@link retry}, this operator repeats the stream of items emitted by the source for non error cases.\n * Repeat can be useful for creating observables that are meant to have some repeated pattern or rhythm.\n *\n * Note: `repeat(0)` returns an empty observable and `repeat()` will repeat forever\n *\n * ## Example\n * Repeat a message stream\n * ```ts\n * import { of } from 'rxjs';\n * import { repeat, delay } from 'rxjs/operators';\n *\n * const source = of('Repeat message');\n * const example = source.pipe(repeat(3));\n * example.subscribe(x => console.log(x));\n *\n * // Results\n * // Repeat message\n * // Repeat message\n * // Repeat message\n * ```\n *\n * Repeat 3 values, 2 times\n * ```ts\n * import { interval } from 'rxjs';\n * import { repeat, take } from 'rxjs/operators';\n *\n * const source = interval(1000);\n * const example = source.pipe(take(3), repeat(2));\n * example.subscribe(x => console.log(x));\n *\n * // Results every second\n * // 0\n * // 1\n * // 2\n * // 0\n * // 1\n * // 2\n * ```\n *\n * @see {@link repeatWhen}\n * @see {@link retry}\n *\n * @param {number} [count] The number of times the source Observable items are repeated, a count of 0 will yield\n * an empty Observable.\n * @return A function that returns an Observable that will resubscribe to the\n * source stream when the source stream completes, at most `count` times.\n */\nexport function repeat<T>(count = Infinity): MonoTypeOperatorFunction<T> {\n  return count <= 0\n    ? () => EMPTY\n    : operate((source, subscriber) => {\n        let soFar = 0;\n        let innerSub: Subscription | null;\n        const subscribeForRepeat = () => {\n          let syncUnsub = false;\n          innerSub = source.subscribe(\n            new OperatorSubscriber(subscriber, undefined, () => {\n              if (++soFar < count) {\n                if (innerSub) {\n                  innerSub.unsubscribe();\n                  innerSub = null;\n                  subscribeForRepeat();\n                } else {\n                  syncUnsub = true;\n                }\n              } else {\n                subscriber.complete();\n              }\n            })\n          );\n\n          if (syncUnsub) {\n            innerSub.unsubscribe();\n            innerSub = null;\n            subscribeForRepeat();\n          }\n        };\n        subscribeForRepeat();\n      });\n}\n","import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of a `complete`. If the source\n * Observable calls `complete`, this method will emit to the Observable returned from `notifier`. If that Observable\n * calls `complete` or `error`, then this method will call `complete` or `error` on the child subscription. Otherwise\n * this method will resubscribe to the source Observable.\n *\n * ![](repeatWhen.png)\n *\n * ## Example\n * Repeat a message stream on click\n * ```ts\n * import { of, fromEvent } from 'rxjs';\n * import { repeatWhen } from 'rxjs/operators';\n *\n * const source = of('Repeat message');\n * const documentClick$ = fromEvent(document, 'click');\n *\n * source.pipe(repeatWhen(() => documentClick$)\n * ).subscribe(data => console.log(data))\n * ```\n * @see {@link repeat}\n * @see {@link retry}\n * @see {@link retryWhen}\n *\n * @param {function(notifications: Observable): Observable} notifier - Receives an Observable of notifications with\n * which a user can `complete` or `error`, aborting the repetition.\n * @return A function that returns an Observable that that mirrors the source\n * Observable with the exception of a `complete`.\n */\nexport function repeatWhen<T>(notifier: (notifications: Observable<void>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let innerSub: Subscription | null;\n    let syncResub = false;\n    let completions$: Subject<void>;\n    let isNotifierComplete = false;\n    let isMainComplete = false;\n\n    /**\n     * Checks to see if we can complete the result, completes it, and returns `true` if it was completed.\n     */\n    const checkComplete = () => isMainComplete && isNotifierComplete && (subscriber.complete(), true);\n    /**\n     * Gets the subject to send errors through. If it doesn't exist,\n     * we know we need to setup the notifier.\n     */\n    const getCompletionSubject = () => {\n      if (!completions$) {\n        completions$ = new Subject();\n\n        // If the call to `notifier` throws, it will be caught by the OperatorSubscriber\n        // In the main subscription -- in `subscribeForRepeatWhen`.\n        notifier(completions$).subscribe(\n          new OperatorSubscriber(\n            subscriber,\n            () => {\n              if (innerSub) {\n                subscribeForRepeatWhen();\n              } else {\n                // If we don't have an innerSub yet, that's because the inner subscription\n                // call hasn't even returned yet. We've arrived here synchronously.\n                // So we flag that we want to resub, such that we can ensure teardown\n                // happens before we resubscribe.\n                syncResub = true;\n              }\n            },\n            () => {\n              isNotifierComplete = true;\n              checkComplete();\n            }\n          )\n        );\n      }\n      return completions$;\n    };\n\n    const subscribeForRepeatWhen = () => {\n      isMainComplete = false;\n\n      innerSub = source.subscribe(\n        new OperatorSubscriber(subscriber, undefined, () => {\n          isMainComplete = true;\n          // Check to see if we are complete, and complete if so.\n          // If we are not complete. Get the subject. This calls the `notifier` function.\n          // If that function fails, it will throw and `.next()` will not be reached on this\n          // line. The thrown error is caught by the _complete handler in this\n          // `OperatorSubscriber` and handled appropriately.\n          !checkComplete() && getCompletionSubject().next();\n        })\n      );\n\n      if (syncResub) {\n        // Ensure that the inner subscription is torn down before\n        // moving on to the next subscription in the synchronous case.\n        // If we don't do this here, all inner subscriptions will not be\n        // torn down until the entire observable is done.\n        innerSub.unsubscribe();\n        // It is important to null this out. Not only to free up memory, but\n        // to make sure code above knows we are in a subscribing state to\n        // handle synchronous resubscription.\n        innerSub = null;\n        // We may need to do this multiple times, so reset the flags.\n        syncResub = false;\n        // Resubscribe\n        subscribeForRepeatWhen();\n      }\n    };\n\n    // Start the subscription\n    subscribeForRepeatWhen();\n  });\n}\n","import { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { Subscription } from '../Subscription';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\n\nexport interface RetryConfig {\n  count: number;\n  resetOnSuccess?: boolean;\n}\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will resubscribe to the source Observable for a maximum of `count` resubscriptions (given\n * as a number parameter) rather than propagating the `error` call.\n *\n * ![](retry.png)\n *\n * Any and all items emitted by the source Observable will be emitted by the resulting Observable, even those emitted\n * during failed subscriptions. For example, if an Observable fails at first but emits [1, 2] then succeeds the second\n * time and emits: [1, 2, 3, 4, 5] then the complete stream of emissions and notifications\n * would be: [1, 2, 1, 2, 3, 4, 5, `complete`].\n *\n * ## Example\n * ```ts\n * import { interval, of, throwError } from 'rxjs';\n * import { mergeMap, retry } from 'rxjs/operators';\n *\n * const source = interval(1000);\n * const example = source.pipe(\n *   mergeMap(val => {\n *     if(val > 5){\n *       return throwError('Error!');\n *     }\n *     return of(val);\n *   }),\n *   //retry 2 times on error\n *   retry(2)\n * );\n *\n * const subscribe = example.subscribe({\n *   next: val => console.log(val),\n *   error: val => console.log(`${val}: Retried 2 times then quit!`)\n * });\n *\n * // Output:\n * // 0..1..2..3..4..5..\n * // 0..1..2..3..4..5..\n * // 0..1..2..3..4..5..\n * // \"Error!: Retried 2 times then quit!\"\n * ```\n *\n * @param {number} count - Number of retry attempts before failing.\n * @param {boolean} resetOnSuccess - When set to `true` every successful emission will reset the error count\n * @return A function that returns an Observable that will resubscribe to the\n * source stream when the source stream errors, at most `count` times.\n */\nexport function retry<T>(count?: number): MonoTypeOperatorFunction<T>;\nexport function retry<T>(config: RetryConfig): MonoTypeOperatorFunction<T>;\nexport function retry<T>(configOrCount: number | RetryConfig = Infinity): MonoTypeOperatorFunction<T> {\n  let config: RetryConfig;\n  if (configOrCount && typeof configOrCount === 'object') {\n    config = configOrCount;\n  } else {\n    config = {\n      count: configOrCount,\n    };\n  }\n  const { count, resetOnSuccess = false } = config;\n\n  return count <= 0\n    ? identity\n    : operate((source, subscriber) => {\n        let soFar = 0;\n        let innerSub: Subscription | null;\n        const subscribeForRetry = () => {\n          let syncUnsub = false;\n          innerSub = source.subscribe(\n            new OperatorSubscriber(\n              subscriber,\n              (value) => {\n                if (resetOnSuccess) {\n                  soFar = 0;\n                }\n                subscriber.next(value);\n              },\n              // Completions are passed through to consumer.\n              undefined,\n              (err) => {\n                if (soFar++ < count) {\n                  if (innerSub) {\n                    innerSub.unsubscribe();\n                    innerSub = null;\n                    subscribeForRetry();\n                  } else {\n                    syncUnsub = true;\n                  }\n                } else {\n                  subscriber.error(err);\n                }\n              }\n            )\n          );\n          if (syncUnsub) {\n            innerSub.unsubscribe();\n            innerSub = null;\n            subscribeForRetry();\n          }\n        };\n        subscribeForRetry();\n      });\n}\n","import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\n\nimport { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Returns an Observable that mirrors the source Observable with the exception of an `error`. If the source Observable\n * calls `error`, this method will emit the Throwable that caused the error to the Observable returned from `notifier`.\n * If that Observable calls `complete` or `error` then this method will call `complete` or `error` on the child\n * subscription. Otherwise this method will resubscribe to the source Observable.\n *\n * ![](retryWhen.png)\n *\n * Retry an observable sequence on error based on custom criteria.\n *\n * ## Example\n * ```ts\n * import { timer, interval } from 'rxjs';\n * import { map, tap, retryWhen, delayWhen } from 'rxjs/operators';\n *\n * const source = interval(1000);\n * const example = source.pipe(\n *   map(val => {\n *     if (val > 5) {\n *       // error will be picked up by retryWhen\n *       throw val;\n *     }\n *     return val;\n *   }),\n *   retryWhen(errors =>\n *     errors.pipe(\n *       // log error message\n *       tap(val => console.log(`Value ${val} was too high!`)),\n *       // restart in 5 seconds\n *       delayWhen(val => timer(val * 1000))\n *     )\n *   )\n * );\n *\n * const subscribe = example.subscribe(val => console.log(val));\n *\n * // results:\n * //   0\n * //   1\n * //   2\n * //   3\n * //   4\n * //   5\n * //   \"Value 6 was too high!\"\n * //  --Wait 5 seconds then repeat\n * ```\n *\n * @param {function(errors: Observable): Observable} notifier - Receives an Observable of notifications with which a\n * user can `complete` or `error`, aborting the retry.\n * @return A function that returns an Observable that mirrors the source\n * Observable with the exception of an `error`.\n */\nexport function retryWhen<T>(notifier: (errors: Observable<any>) => Observable<any>): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let innerSub: Subscription | null;\n    let syncResub = false;\n    let errors$: Subject<any>;\n\n    const subscribeForRetryWhen = () => {\n      innerSub = source.subscribe(\n        new OperatorSubscriber(subscriber, undefined, undefined, (err) => {\n          if (!errors$) {\n            errors$ = new Subject();\n            notifier(errors$).subscribe(\n              new OperatorSubscriber(subscriber, () =>\n                // If we have an innerSub, this was an asynchronous call, kick off the retry.\n                // Otherwise, if we don't have an innerSub yet, that's because the inner subscription\n                // call hasn't even returned yet. We've arrived here synchronously.\n                // So we flag that we want to resub, such that we can ensure teardown\n                // happens before we resubscribe.\n                innerSub ? subscribeForRetryWhen() : (syncResub = true)\n              )\n            );\n          }\n          if (errors$) {\n            // We have set up the notifier without error.\n            errors$.next(err);\n          }\n        })\n      );\n\n      if (syncResub) {\n        // Ensure that the inner subscription is torn down before\n        // moving on to the next subscription in the synchronous case.\n        // If we don't do this here, all inner subscriptions will not be\n        // torn down until the entire observable is done.\n        innerSub.unsubscribe();\n        innerSub = null;\n        // We may need to do this multiple times, so reset the flag.\n        syncResub = false;\n        // Resubscribe\n        subscribeForRetryWhen();\n      }\n    };\n\n    // Start the subscription\n    subscribeForRetryWhen();\n  });\n}\n","import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { noop } from '../util/noop';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Emits the most recently emitted value from the source Observable whenever\n * another Observable, the `notifier`, emits.\n *\n * <span class=\"informal\">It's like {@link sampleTime}, but samples whenever\n * the `notifier` Observable emits something.</span>\n *\n * ![](sample.png)\n *\n * Whenever the `notifier` Observable emits a value, `sample`\n * looks at the source Observable and emits whichever value it has most recently\n * emitted since the previous sampling, unless the source has not emitted\n * anything since the previous sampling. The `notifier` is subscribed to as soon\n * as the output Observable is subscribed.\n *\n * ## Example\n * On every click, sample the most recent \"seconds\" timer\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { sample } from 'rxjs/operators';\n *\n * const seconds = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const result = seconds.pipe(sample(clicks));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param notifier The Observable to use for sampling the\n * source Observable.\n * @return A function that returns an Observable that emits the results of\n * sampling the values emitted by the source Observable whenever the notifier\n * Observable emits value or completes.\n */\nexport function sample<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    let lastValue: T | null = null;\n    source.subscribe(\n      new OperatorSubscriber(subscriber, (value) => {\n        hasValue = true;\n        lastValue = value;\n      })\n    );\n    const emit = () => {\n      if (hasValue) {\n        hasValue = false;\n        const value = lastValue!;\n        lastValue = null;\n        subscriber.next(value);\n      }\n    };\n    notifier.subscribe(new OperatorSubscriber(subscriber, emit, noop));\n  });\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { sample } from './sample';\nimport { interval } from '../observable/interval';\n\n/**\n * Emits the most recently emitted value from the source Observable within\n * periodic time intervals.\n *\n * <span class=\"informal\">Samples the source Observable at periodic time\n * intervals, emitting what it samples.</span>\n *\n * ![](sampleTime.png)\n *\n * `sampleTime` periodically looks at the source Observable and emits whichever\n * value it has most recently emitted since the previous sampling, unless the\n * source has not emitted anything since the previous sampling. The sampling\n * happens periodically in time every `period` milliseconds (or the time unit\n * defined by the optional `scheduler` argument). The sampling starts as soon as\n * the output Observable is subscribed.\n *\n * ## Example\n * Every second, emit the most recent click at most once\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { sampleTime } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(sampleTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param {number} period The sampling period expressed in milliseconds or the\n * time unit determined internally by the optional `scheduler`.\n * @param {SchedulerLike} [scheduler=async] The {@link SchedulerLike} to use for\n * managing the timers that handle the sampling.\n * @return A function that returns an Observable that emits the results of\n * sampling the values emitted by the source Observable at the specified time\n * interval.\n */\nexport function sampleTime<T>(period: number, scheduler: SchedulerLike = asyncScheduler): MonoTypeOperatorFunction<T> {\n  return sample(interval(period, scheduler));\n}\n","import { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { scanInternals } from './scanInternals';\n\nexport function scan<V, A = V>(accumulator: (acc: A | V, value: V, index: number) => A): OperatorFunction<V, V | A>;\nexport function scan<V, A>(accumulator: (acc: A, value: V, index: number) => A, seed: A): OperatorFunction<V, A>;\nexport function scan<V, A, S>(accumulator: (acc: A | S, value: V, index: number) => A, seed: S): OperatorFunction<V, A>;\n\n// TODO: link to a \"redux pattern\" section in the guide (location TBD)\n\n/**\n * Useful for encapsulating and managing state. Applies an accumulator (or \"reducer function\")\n * to each value from the source after an initial state is established -- either via\n * a `seed` value (second argument), or from the first value from the source.\n *\n * <span class=\"informal\">It's like {@link reduce}, but emits the current\n * accumulation state after each update</span>\n *\n * ![](scan.png)\n *\n * This operator maintains an internal state and emits it after processing each value as follows:\n *\n * 1. First value arrives\n *   - If a `seed` value was supplied (as the second argument to `scan`), let `state = seed` and `value = firstValue`.\n *   - If NO `seed` value was supplied (no second argument), let `state = firstValue` and go to 3.\n * 2. Let `state = accumulator(state, value)`.\n *   - If an error is thrown by `accumulator`, notify the consumer of an error. The process ends.\n * 3. Emit `state`.\n * 4. Next value arrives, let `value = nextValue`, go to 2.\n *\n * ## Example\n *\n * An average of previous numbers. This example shows how\n * not providing a `seed` can prime the stream with the\n * first value from the source.\n *\n * ```ts\n * import { interval, of } from 'rxjs';\n * import { scan, map } from 'rxjs/operators';\n *\n * const numbers$ = of(1, 2, 3);\n *\n * numbers$\n *   .pipe(\n *     // Get the sum of the numbers coming in.\n *     scan((total, n) => total + n),\n *     // Get the average by dividing the sum by the total number\n *     // received so var (which is 1 more than the zero-based index).\n *     map((sum, index) => sum / (index + 1))\n *   )\n *   .subscribe(console.log);\n * ```\n *\n * ## Example\n *\n * The Fibonacci sequence. This example shows how you can use\n * a seed to prime accumulation process. Also... you know... Fibinacci.\n * So important to like, computers and stuff that its whiteboarded\n * in job interviews. Now you can show them the Rx version! (Please don't, haha)\n *\n * ```ts\n * import { interval } from 'rxjs';\n * import { scan, map, startWith } from 'rxjs/operators';\n *\n * const firstTwoFibs = [0, 1];\n * // An endless stream of Fibonnaci numbers.\n * const fibonnaci$ = interval(1000).pipe(\n *   // Scan to get the fibonnaci numbers (after 0, 1)\n *   scan(([a, b]) => [b, a + b], firstTwoFibs),\n *   // Get the second number in the tuple, it's the one you calculated\n *   map(([, n]) => n),\n *   // Start with our first two digits :)\n *   startWith(...firstTwoFibs)\n * );\n *\n * fibonnaci$.subscribe(console.log);\n * ```\n *\n *\n * @see {@link expand}\n * @see {@link mergeScan}\n * @see {@link reduce}\n * @see {@link switchScan}\n *\n * @param accumulator A \"reducer function\". This will be called for each value after an initial state is\n * acquired.\n * @param seed The initial state. If this is not provided, the first value from the source will\n * be used as the initial state, and emitted without going through the accumulator. All subsequent values\n * will be processed by the accumulator function. If this is provided, all values will go through\n * the accumulator function.\n * @return A function that returns an Observable of the accumulated values.\n */\nexport function scan<V, A, S>(accumulator: (acc: V | A | S, value: V, index: number) => A, seed?: S): OperatorFunction<V, V | A> {\n  // providing a seed of `undefined` *should* be valid and trigger\n  // hasSeed! so don't use `seed !== undefined` checks!\n  // For this reason, we have to check it here at the original call site\n  // otherwise inside Operator/Subscriber we won't know if `undefined`\n  // means they didn't provide anything or if they literally provided `undefined`\n  return operate(scanInternals(accumulator, seed as S, arguments.length >= 2, true));\n}\n","import { Observable } from '../Observable';\n\nimport { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Compares all values of two observables in sequence using an optional comparator function\n * and returns an observable of a single boolean value representing whether or not the two sequences\n * are equal.\n *\n * <span class=\"informal\">Checks to see of all values emitted by both observables are equal, in order.</span>\n *\n * ![](sequenceEqual.png)\n *\n * `sequenceEqual` subscribes to two observables and buffers incoming values from each observable. Whenever either\n * observable emits a value, the value is buffered and the buffers are shifted and compared from the bottom\n * up; If any value pair doesn't match, the returned observable will emit `false` and complete. If one of the\n * observables completes, the operator will wait for the other observable to complete; If the other\n * observable emits before completing, the returned observable will emit `false` and complete. If one observable never\n * completes or emits after the other completes, the returned observable will never complete.\n *\n * ## Example\n * figure out if the Konami code matches\n * ```ts\n * import { from, fromEvent } from 'rxjs';\n * import { sequenceEqual, bufferCount, mergeMap, map } from 'rxjs/operators';\n *\n * const codes = innerFrom([\n *   'ArrowUp',\n *   'ArrowUp',\n *   'ArrowDown',\n *   'ArrowDown',\n *   'ArrowLeft',\n *   'ArrowRight',\n *   'ArrowLeft',\n *   'ArrowRight',\n *   'KeyB',\n *   'KeyA',\n *   'Enter', // no start key, clearly.\n * ]);\n *\n * const keys = fromEvent(document, 'keyup').pipe(map(e => e.code));\n * const matches = keys.pipe(\n *   bufferCount(11, 1),\n *   mergeMap(\n *     last11 => innerFrom(last11).pipe(sequenceEqual(codes)),\n *   ),\n * );\n * matches.subscribe(matched => console.log('Successful cheat at Contra? ', matched));\n * ```\n *\n * @see {@link combineLatest}\n * @see {@link zip}\n * @see {@link withLatestFrom}\n *\n * @param {Observable} compareTo The observable sequence to compare the source sequence to.\n * @param {function} [comparator] An optional function to compare each value pair\n * @return A function that returns an Observable that emits a single boolean\n * value representing whether or not the values emitted by the source\n * Observable and provided Observable were equal in sequence.\n */\nexport function sequenceEqual<T>(\n  compareTo: Observable<T>,\n  comparator: (a: T, b: T) => boolean = (a, b) => a === b\n): OperatorFunction<T, boolean> {\n  return operate((source, subscriber) => {\n    // The state for the source observable\n    const aState = createState<T>();\n    // The state for the compareTo observable;\n    const bState = createState<T>();\n\n    /** A utility to emit and complete */\n    const emit = (isEqual: boolean) => {\n      subscriber.next(isEqual);\n      subscriber.complete();\n    };\n\n    /**\n     * Creates a subscriber that subscribes to one of the sources, and compares its collected\n     * state -- `selfState` -- to the other source's collected state -- `otherState`. This\n     * is used for both streams.\n     */\n    const createSubscriber = (selfState: SequenceState<T>, otherState: SequenceState<T>) => {\n      const sequenceEqualSubscriber = new OperatorSubscriber(\n        subscriber,\n        (a: T) => {\n          const { buffer, complete } = otherState;\n          if (buffer.length === 0) {\n            // If there's no values in the other buffer\n            // and the other stream is complete, we know\n            // this isn't a match, because we got one more value.\n            // Otherwise, we push onto our buffer, so when the other\n            // stream emits, it can pull this value off our buffer and check it\n            // at the appropriate time.\n            complete ? emit(false) : selfState.buffer.push(a);\n          } else {\n            // If the other stream *does* have values in it's buffer,\n            // pull the oldest one off so we can compare it to what we\n            // just got. If it wasn't a match, emit `false` and complete.\n            !comparator(a, buffer.shift()!) && emit(false);\n          }\n        },\n        () => {\n          // Or observable completed\n          selfState.complete = true;\n          const { complete, buffer } = otherState;\n          // If the other observable is also complete, and there's\n          // still stuff left in their buffer, it doesn't match, if their\n          // buffer is empty, then it does match. This is because we can't\n          // possibly get more values here anymore.\n          complete && emit(buffer.length === 0);\n          // Be sure to clean up our stream as soon as possible if we can.\n          sequenceEqualSubscriber?.unsubscribe();\n        }\n      );\n\n      return sequenceEqualSubscriber;\n    };\n\n    // Subscribe to each source.\n    source.subscribe(createSubscriber(aState, bState));\n    compareTo.subscribe(createSubscriber(bState, aState));\n  });\n}\n\n/**\n * A simple structure for the data used to test each sequence\n */\ninterface SequenceState<T> {\n  /** A temporary store for arrived values before they are checked */\n  buffer: T[];\n  /** Whether or not the sequence source has completed. */\n  complete: boolean;\n}\n\n/**\n * Creates a simple structure that is used to represent\n * data used to test each sequence.\n */\nfunction createState<T>(): SequenceState<T> {\n  return {\n    buffer: [],\n    complete: false,\n  };\n}\n","import { Observable } from '../Observable';\nimport { from } from '../observable/from';\nimport { take } from '../operators/take';\nimport { Subject } from '../Subject';\nimport { SafeSubscriber } from '../Subscriber';\nimport { Subscription } from '../Subscription';\nimport { MonoTypeOperatorFunction, SubjectLike } from '../types';\nimport { operate } from '../util/lift';\n\nexport interface ShareConfig<T> {\n  /**\n   * The factory used to create the subject that will connect the source observable to\n   * multicast consumers.\n   */\n  connector?: () => SubjectLike<T>;\n  /**\n   * If true, the resulting observable will reset internal state on error from source and return to a \"cold\" state. This\n   * allows the resulting observable to be \"retried\" in the event of an error.\n   * If false, when an error comes from the source it will push the error into the connecting subject, and the subject\n   * will remain the connecting subject, meaning the resulting observable will not go \"cold\" again, and subsequent retries\n   * or resubscriptions will resubscribe to that same subject. In all cases, RxJS subjects will emit the same error again, however\n   * {@link ReplaySubject} will also push its buffered values before pushing the error.\n   * It is also possible to pass a notifier factory returning an observable instead which grants more fine-grained\n   * control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.\n   */\n  resetOnError?: boolean | ((error: any) => Observable<any>);\n  /**\n   * If true, the resulting observable will reset internal state on completion from source and return to a \"cold\" state. This\n   * allows the resulting observable to be \"repeated\" after it is done.\n   * If false, when the source completes, it will push the completion through the connecting subject, and the subject\n   * will remain the connecting subject, meaning the resulting observable will not go \"cold\" again, and subsequent repeats\n   * or resubscriptions will resubscribe to that same subject.\n   * It is also possible to pass a notifier factory returning an observable instead which grants more fine-grained\n   * control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.\n   */\n  resetOnComplete?: boolean | (() => Observable<any>);\n  /**\n   * If true, when the number of subscribers to the resulting observable reaches zero due to those subscribers unsubscribing, the\n   * internal state will be reset and the resulting observable will return to a \"cold\" state. This means that the next\n   * time the resulting observable is subscribed to, a new subject will be created and the source will be subscribed to\n   * again.\n   * If false, when the number of subscribers to the resulting observable reaches zero due to unsubscription, the subject\n   * will remain connected to the source, and new subscriptions to the result will be connected through that same subject.\n   * It is also possible to pass a notifier factory returning an observable instead which grants more fine-grained\n   * control over how and when the reset should happen. This allows behaviors like conditional or delayed resets.\n   */\n  resetOnRefCountZero?: boolean | (() => Observable<any>);\n}\n\nexport function share<T>(): MonoTypeOperatorFunction<T>;\n\nexport function share<T>(options: ShareConfig<T>): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns a new Observable that multicasts (shares) the original Observable. As long as there is at least one\n * Subscriber this Observable will be subscribed and emitting data. When all subscribers have unsubscribed it will\n * unsubscribe from the source Observable. Because the Observable is multicasting it makes the stream `hot`.\n * This is an alias for `multicast(() => new Subject()), refCount()`.\n *\n * The subscription to the underlying source Observable can be reset (unsubscribe and resubscribe for new subscribers),\n * if the subscriber count to the shared observable drops to 0, or if the source Observable errors or completes. It is\n * possible to use notifier factories for the resets to allow for behaviors like conditional or delayed resets. Please\n * note that resetting on error or complete of the source Observable does not behave like a transparent retry or restart\n * of the source because the error or complete will be forwarded to all subscribers and their subscription will be\n * closed. Only new subscribers after a reset on error or complete happened will cause a fresh subscription to the\n * source. To achieve transparent retries or restarts pipe the source through appropriate operators before sharing.\n *\n * ![](share.png)\n *\n * ## Example\n * Generate new multicast Observable from the source Observable value\n * ```ts\n * import { interval } from 'rxjs';\n * import { share, map } from 'rxjs/operators';\n *\n * const source = interval(1000)\n *   .pipe(\n *         map((x: number) => {\n *             console.log('Processing: ', x);\n *             return x*x;\n *         }),\n *         share()\n * );\n *\n * source.subscribe(x => console.log('subscription 1: ', x));\n * source.subscribe(x => console.log('subscription 1: ', x));\n *\n * // Logs:\n * // Processing:  0\n * // subscription 1:  0\n * // subscription 1:  0\n * // Processing:  1\n * // subscription 1:  1\n * // subscription 1:  1\n * // Processing:  2\n * // subscription 1:  4\n * // subscription 1:  4\n * // Processing:  3\n * // subscription 1:  9\n * // subscription 1:  9\n * // ... and so on\n * ```\n *\n * ## Example with notifier factory: Delayed reset\n * ```ts\n * import { interval } from 'rxjs';\n * import { share, take, timer } from 'rxjs/operators';\n *\n * const source = interval(1000).pipe(take(3), share({ resetOnRefCountZero: () => timer(1000) }));\n *\n * const subscriptionOne = source.subscribe(x => console.log('subscription 1: ', x));\n * setTimeout(() => subscriptionOne.unsubscribe(), 1300);\n *\n * setTimeout(() => source.subscribe(x => console.log('subscription 2: ', x)), 1700);\n *\n * setTimeout(() => source.subscribe(x => console.log('subscription 3: ', x)), 5000);\n *\n * // Logs:\n * // subscription 1:  0\n * // (subscription 1 unsubscribes here)\n * // (subscription 2 subscribes here ~400ms later, source was not reset)\n * // subscription 2:  1\n * // subscription 2:  2\n * // (subscription 2 unsubscribes here)\n * // (subscription 3 subscribes here ~2000ms later, source did reset before)\n * // subscription 3:  0\n * // subscription 3:  1\n * // subscription 3:  2\n * ```\n *\n * @see {@link api/index/function/interval}\n * @see {@link map}\n *\n * @return A function that returns an Observable that mirrors the source.\n */\nexport function share<T>(options: ShareConfig<T> = {}): MonoTypeOperatorFunction<T> {\n  const { connector = () => new Subject<T>(), resetOnError = true, resetOnComplete = true, resetOnRefCountZero = true } = options;\n  // It's necessary to use a wrapper here, as the _operator_ must be\n  // referentially transparent. Otherwise, it cannot be used in calls to the\n  // static `pipe` function - to create a partial pipeline.\n  //\n  // The _operator function_ - the function returned by the _operator_ - will\n  // not be referentially transparent - as it shares its source - but the\n  // _operator function_ is called when the complete pipeline is composed via a\n  // call to a source observable's `pipe` method - not when the static `pipe`\n  // function is called.\n  return (wrapperSource) => {\n    let connection: SafeSubscriber<T> | null = null;\n    let resetConnection: Subscription | null = null;\n    let subject: SubjectLike<T> | null = null;\n    let refCount = 0;\n    let hasCompleted = false;\n    let hasErrored = false;\n\n    const cancelReset = () => {\n      resetConnection?.unsubscribe();\n      resetConnection = null;\n    };\n    // Used to reset the internal state to a \"cold\"\n    // state, as though it had never been subscribed to.\n    const reset = () => {\n      cancelReset();\n      connection = subject = null;\n      hasCompleted = hasErrored = false;\n    };\n    const resetAndUnsubscribe = () => {\n      // We need to capture the connection before\n      // we reset (if we need to reset).\n      const conn = connection;\n      reset();\n      conn?.unsubscribe();\n    };\n\n    return operate<T, T>((source, subscriber) => {\n      refCount++;\n      if (!hasErrored && !hasCompleted) {\n        cancelReset();\n      }\n\n      // Create the subject if we don't have one yet. Grab a local reference to\n      // it as well, which avoids non-null assertations when using it and, if we\n      // connect to it now, then error/complete need a reference after it was\n      // reset.\n      const dest = (subject = subject ?? connector());\n\n      // Add the teardown directly to the subscriber - instead of returning it -\n      // so that the handling of the subscriber's unsubscription will be wired\n      // up _before_ the subscription to the source occurs. This is done so that\n      // the assignment to the source connection's `closed` property will be seen\n      // by synchronous firehose sources.\n      subscriber.add(() => {\n        refCount--;\n\n        // If we're resetting on refCount === 0, and it's 0, we only want to do\n        // that on \"unsubscribe\", really. Resetting on error or completion is a different\n        // configuration.\n        if (refCount === 0 && !hasErrored && !hasCompleted) {\n          resetConnection = handleReset(resetAndUnsubscribe, resetOnRefCountZero);\n        }\n      });\n\n      // The following line adds the subscription to the subscriber passed.\n      // Basically, `subscriber === dest.subscribe(subscriber)` is `true`.\n      dest.subscribe(subscriber);\n\n      if (!connection) {\n        // We need to create a subscriber here - rather than pass an observer and\n        // assign the returned subscription to connection - because it's possible\n        // for reentrant subscriptions to the shared observable to occur and in\n        // those situations we want connection to be already-assigned so that we\n        // don't create another connection to the source.\n        connection = new SafeSubscriber({\n          next: (value) => dest.next(value),\n          error: (err) => {\n            hasErrored = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnError, err);\n            dest.error(err);\n          },\n          complete: () => {\n            hasCompleted = true;\n            cancelReset();\n            resetConnection = handleReset(reset, resetOnComplete);\n            dest.complete();\n          },\n        });\n        from(source).subscribe(connection);\n      }\n    })(wrapperSource);\n  };\n}\n\nfunction handleReset<T extends unknown[] = never[]>(\n  reset: () => void,\n  on: boolean | ((...args: T) => Observable<any>),\n  ...args: T\n): Subscription | null {\n  if (on === true) {\n    reset();\n\n    return null;\n  }\n\n  if (on === false) {\n    return null;\n  }\n\n  return on(...args)\n    .pipe(take(1))\n    .subscribe(() => reset());\n}\n","import { ReplaySubject } from '../ReplaySubject';\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { share } from './share';\n\nexport interface ShareReplayConfig {\n  bufferSize?: number;\n  windowTime?: number;\n  refCount: boolean;\n  scheduler?: SchedulerLike;\n}\n\nexport function shareReplay<T>(config: ShareReplayConfig): MonoTypeOperatorFunction<T>;\nexport function shareReplay<T>(bufferSize?: number, windowTime?: number, scheduler?: SchedulerLike): MonoTypeOperatorFunction<T>;\n\n/**\n * Share source and replay specified number of emissions on subscription.\n *\n * This operator is a specialization of `replay` that connects to a source observable\n * and multicasts through a `ReplaySubject` constructed with the specified arguments.\n * A successfully completed source will stay cached in the `shareReplayed observable` forever,\n * but an errored source can be retried.\n *\n * ## Why use shareReplay?\n * You generally want to use `shareReplay` when you have side-effects or taxing computations\n * that you do not wish to be executed amongst multiple subscribers.\n * It may also be valuable in situations where you know you will have late subscribers to\n * a stream that need access to previously emitted values.\n * This ability to replay values on subscription is what differentiates {@link share} and `shareReplay`.\n *\n * ![](shareReplay.png)\n *\n * ## Reference counting\n * As of RXJS version 6.4.0 a new overload signature was added to allow for manual control over what\n * happens when the operators internal reference counter drops to zero.\n * If `refCount` is true, the source will be unsubscribed from once the reference count drops to zero, i.e.\n * the inner `ReplaySubject` will be unsubscribed. All new subscribers will receive value emissions from a\n * new `ReplaySubject` which in turn will cause a new subscription to the source observable.\n * If `refCount` is false on the other hand, the source will not be unsubscribed meaning that the inner\n * `ReplaySubject` will still be subscribed to the source (and potentially run for ever).\n *\n * ## Example\n * ```ts\n * import { interval } from 'rxjs';\n * import { shareReplay, take } from 'rxjs/operators';\n *\n * const obs$ = interval(1000);\n * const shared$ = obs$.pipe(\n *   take(4),\n *   shareReplay(3)\n * );\n * shared$.subscribe(x => console.log('sub A: ', x));\n * shared$.subscribe(y => console.log('sub B: ', y));\n *\n * ```\n *\n * ## Example for refCount usage\n * ```ts\n * import { interval, Observable, defer } from 'rxjs';\n * import { shareReplay, take, tap, finalize } from 'rxjs/operators';\n *\n * const log = <T>(source: Observable<T>, name: string) => defer(() => {\n *   console.log(`${name}: subscribed`);\n *   return source.pipe(\n *     tap({\n *       next: value => console.log(`${name}: ${value}`),\n *       complete: () => console.log(`${name}: complete`)\n *     }),\n *     finalize(() => console.log(`${name}: unsubscribed`))\n *   );\n * });\n *\n * const obs$ = log(interval(1000), 'source');\n *\n * const shared$ = log(obs$.pipe(\n *   shareReplay({bufferSize: 1, refCount: true }),\n *   take(2),\n * ), 'shared');\n *\n * shared$.subscribe(x => console.log('sub A: ', x));\n * shared$.subscribe(y => console.log('sub B: ', y));\n *\n * // PRINTS:\n * // shared: subscribed <-- reference count = 1\n * // source: subscribed\n * // shared: subscribed <-- reference count = 2\n * // source: 0\n * // shared: 0\n * // sub A: 0\n * // shared: 0\n * // sub B: 0\n * // source: 1\n * // shared: 1\n * // sub A: 1\n * // shared: complete <-- take(2) completes the subscription for sub A\n * // shared: unsubscribed <-- reference count = 1\n * // shared: 1\n * // sub B: 1\n * // shared: complete <-- take(2) completes the subscription for sub B\n * // shared: unsubscribed <-- reference count = 0\n * // source: unsubscribed <-- replaySubject unsubscribes from source observable because the reference count dropped to 0 and refCount is true\n *\n * // In case of refCount being false, the unsubscribe is never called on the source and the source would keep on emitting, even if no subscribers\n * // are listening.\n * // source: 2\n * // source: 3\n * // source: 4\n * // ...\n * ```\n *\n * @see {@link publish}\n * @see {@link share}\n * @see {@link publishReplay}\n *\n * @param {Number} [bufferSize=Infinity] Maximum element count of the replay buffer.\n * @param {Number} [windowTime=Infinity] Maximum time length of the replay buffer in milliseconds.\n * @param {Scheduler} [scheduler] Scheduler where connected observers within the selector function\n * will be invoked on.\n * @return A function that returns an Observable sequence that contains the\n * elements of a sequence produced by multicasting the source sequence within a\n * selector function.\n */\nexport function shareReplay<T>(\n  configOrBufferSize?: ShareReplayConfig | number,\n  windowTime?: number,\n  scheduler?: SchedulerLike\n): MonoTypeOperatorFunction<T> {\n  let bufferSize: number;\n  let refCount = false;\n  if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n    bufferSize = configOrBufferSize.bufferSize ?? Infinity;\n    windowTime = configOrBufferSize.windowTime ?? Infinity;\n    refCount = !!configOrBufferSize.refCount;\n    scheduler = configOrBufferSize.scheduler;\n  } else {\n    bufferSize = configOrBufferSize ?? Infinity;\n  }\n  return share<T>({\n    connector: () => new ReplaySubject(bufferSize, windowTime, scheduler),\n    resetOnError: true,\n    resetOnComplete: false,\n    resetOnRefCountZero: refCount\n  });\n}\n","import { Observable } from '../Observable';\nimport { EmptyError } from '../util/EmptyError';\n\nimport { MonoTypeOperatorFunction, OperatorFunction, TruthyTypesOf } from '../types';\nimport { SequenceError } from '../util/SequenceError';\nimport { NotFoundError } from '../util/NotFoundError';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\nexport function single<T>(predicate: BooleanConstructor): OperatorFunction<T, TruthyTypesOf<T>>;\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns an observable that asserts that only one value is\n * emitted from the observable that matches the predicate. If no\n * predicate is provided, then it will assert that the observable\n * only emits one value.\n *\n * In the event that the observable is empty, it will throw an\n * {@link EmptyError}.\n *\n * In the event that two values are found that match the predicate,\n * or when there are two values emitted and no predicate, it will\n * throw a {@link SequenceError}\n *\n * In the event that no values match the predicate, if one is provided,\n * it will throw a {@link NotFoundError}\n *\n * ## Example\n *\n * Expect only name beginning with 'B':\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { single } from 'rxjs/operators';\n *\n * const source1 = of(\n *  { name: 'Ben' },\n *  { name: 'Tracy' },\n *  { name: 'Laney' },\n *  { name: 'Lily' }\n * );\n *\n * source1.pipe(\n *   single(x => x.name.startsWith('B'))\n * )\n * .subscribe(x => console.log(x));\n * // Emits \"Ben\"\n *\n *\n * const source2 = of(\n *  { name: 'Ben' },\n *  { name: 'Tracy' },\n *  { name: 'Bradley' },\n *  { name: 'Lincoln' }\n * );\n *\n * source2.pipe(\n *   single(x => x.name.startsWith('B'))\n * )\n * .subscribe(x => console.log(x));\n * // Error emitted: SequenceError('Too many values match')\n *\n *\n * const source3 = of(\n *  { name: 'Laney' },\n *  { name: 'Tracy' },\n *  { name: 'Lily' },\n *  { name: 'Lincoln' }\n * );\n *\n * source3.pipe(\n *   single(x => x.name.startsWith('B'))\n * )\n * .subscribe(x => console.log(x));\n * // Error emitted: NotFoundError('No values match')\n * ```\n *\n * @see {@link first}\n * @see {@link find}\n * @see {@link findIndex}\n * @see {@link elementAt}\n *\n * @throws {NotFoundError} Delivers an NotFoundError to the Observer's `error`\n * callback if the Observable completes before any `next` notification was sent.\n * @throws {SequenceError} Delivers a SequenceError if more than one value is emitted that matches the\n * provided predicate. If no predicate is provided, will deliver a SequenceError if more\n * that one value comes from the source\n * @param {Function} predicate - A predicate function to evaluate items emitted by the source Observable.\n * @return A function that returns an Observable that emits the single item\n * emitted by the source Observable that matches the predicate.\n */\nexport function single<T>(predicate?: (value: T, index: number, source: Observable<T>) => boolean): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    let singleValue: T;\n    let seenValue = false;\n    let index = 0;\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value) => {\n          seenValue = true;\n          if (!predicate || predicate(value, index++, source)) {\n            hasValue && subscriber.error(new SequenceError('Too many matching values'));\n            hasValue = true;\n            singleValue = value;\n          }\n        },\n        () => {\n          if (hasValue) {\n            subscriber.next(singleValue);\n            subscriber.complete();\n          } else {\n            subscriber.error(seenValue ? new NotFoundError('No matching values') : new EmptyError());\n          }\n        }\n      )\n    );\n  });\n}\n","import { MonoTypeOperatorFunction } from '../types';\nimport { filter } from './filter';\n\n/**\n * Returns an Observable that skips the first `count` items emitted by the source Observable.\n *\n * ![](skip.png)\n *\n * Skips the values until the sent notifications are equal or less than provided skip count. It raises\n * an error if skip count is equal or more than the actual number of emits and source raises an error.\n *\n * ## Example\n * Skip the values before the emission\n * ```ts\n * import { interval } from 'rxjs';\n * import { skip } from 'rxjs/operators';\n *\n * //emit every half second\n * const source = interval(500);\n * //skip the first 10 emitted values\n * const example = source.pipe(skip(10));\n * //output: 10...11...12...13........\n * const subscribe = example.subscribe(val => console.log(val));\n * ```\n *\n * @see {@link last}\n * @see {@link skipWhile}\n * @see {@link skipUntil}\n * @see {@link skipLast}\n *\n * @param {Number} count - The number of times, items emitted by source Observable should be skipped.\n * @return A function that returns an Observable that skips the first `count`\n * values emitted by the source Observable.\n */\nexport function skip<T>(count: number): MonoTypeOperatorFunction<T> {\n  return filter((_, index) => count <= index);\n}\n","import { MonoTypeOperatorFunction } from '../types';\nimport { identity } from '../util/identity';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Skip a specified number of values before the completion of an observable.\n *\n * ![](skipLast.png)\n *\n * Returns an observable that will emit values as soon as it can, given a number of\n * skipped values. For example, if you `skipLast(3)` on a source, when the source\n * emits its fourth value, the first value the source emitted will finally be emitted\n * from the returned observable, as it is no longer part of what needs to be skipped.\n *\n * All values emitted by the result of `skipLast(N)` will be delayed by `N` emissions,\n * as each value is held in a buffer until enough values have been emitted that that\n * the buffered value may finally be sent to the consumer.\n *\n * After subscribing, unsubscribing will not result in the emission of the buffered\n * skipped values.\n *\n * ## Example\n *\n * Skip the last 2 values of an observable with many values\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { skipLast } from 'rxjs/operators';\n *\n * const numbers = of(1, 2, 3, 4, 5);\n * const skipLastTwo = numbers.pipe(skipLast(2));\n * skipLastTwo.subscribe(x => console.log(x));\n *\n * // Results in:\n * // 1 2 3\n * // (4 and 5 are skipped)\n * ```\n *\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipWhile}\n * @see {@link take}\n *\n * @param skipCount Number of elements to skip from the end of the source Observable.\n * @return A function that returns an Observable that skips the last `count`\n * values emitted by the source Observable.\n */\nexport function skipLast<T>(skipCount: number): MonoTypeOperatorFunction<T> {\n  return skipCount <= 0\n    ? // For skipCounts less than or equal to zero, we are just mirroring the source.\n      identity\n    : operate((source, subscriber) => {\n        // A ring buffer to hold the values while we wait to see\n        // if we can emit it or it's part of the \"skipped\" last values.\n        // Note that it is the _same size_ as the skip count.\n        let ring: T[] = new Array(skipCount);\n        // The number of values seen so far. This is used to get\n        // the index of the current value when it arrives.\n        let seen = 0;\n        source.subscribe(\n          new OperatorSubscriber(subscriber, (value) => {\n            // Get the index of the value we have right now\n            // relative to all other values we've seen, then\n            // increment `seen`. This ensures we've moved to\n            // the next slot in our ring buffer.\n            const valueIndex = seen++;\n            if (valueIndex < skipCount) {\n              // If we haven't seen enough values to fill our buffer yet,\n              // Then we aren't to a number of seen values where we can\n              // emit anything, so let's just start by filling the ring buffer.\n              ring[valueIndex] = value;\n            } else {\n              // We are traversing over the ring array in such\n              // a way that when we get to the end, we loop back\n              // and go to the start.\n              const index = valueIndex % skipCount;\n              // Pull the oldest value out so we can emit it,\n              // and stuff the new value in it's place.\n              const oldValue = ring[index];\n              ring[index] = value;\n              // Emit the old value. It is important that this happens\n              // after we swap the value in the buffer, if it happens\n              // before we swap the value in the buffer, then a synchronous\n              // source can get the buffer out of whack.\n              subscriber.next(oldValue);\n            }\n          })\n        );\n\n        return () => {\n          // Release our values in memory\n          ring = null!;\n        };\n      });\n}\n","import { Observable } from '../Observable';\nimport { MonoTypeOperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/from';\nimport { noop } from '../util/noop';\n\n/**\n * Returns an Observable that skips items emitted by the source Observable until a second Observable emits an item.\n *\n * The `skipUntil` operator causes the observable stream to skip the emission of values ​​until the passed in observable emits the first value.\n * This can be particularly useful in combination with user interactions, responses of http requests or waiting for specific times to pass by.\n *\n * ![](skipUntil.png)\n *\n * Internally the `skipUntil` operator subscribes to the passed in observable (in the following called *notifier*) in order to recognize the emission\n * of its first value. When this happens, the operator unsubscribes from the *notifier* and starts emitting the values of the *source*\n * observable. It will never let the *source* observable emit any values if the *notifier* completes or throws an error without emitting\n * a value before.\n *\n * ## Example\n *\n * In the following example, all emitted values ​​of the interval observable are skipped until the user clicks anywhere within the page.\n *\n * ```ts\n * import { interval, fromEvent } from 'rxjs';\n * import { skipUntil } from 'rxjs/operators';\n *\n * const intervalObservable = interval(1000);\n * const click = fromEvent(document, 'click');\n *\n * const emitAfterClick = intervalObservable.pipe(\n *   skipUntil(click)\n * );\n * // clicked at 4.6s. output: 5...6...7...8........ or\n * // clicked at 7.3s. output: 8...9...10..11.......\n * const subscribe = emitAfterClick.subscribe(value => console.log(value));\n * ```\n *\n * @param {Observable} notifier - The second Observable that has to emit an item before the source Observable's elements begin to\n * be mirrored by the resulting Observable.\n * @return A function that returns an Observable that skips items from the\n * source Observable until the second Observable emits an item, then emits the\n * remaining items.\n */\nexport function skipUntil<T>(notifier: Observable<any>): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let taking = false;\n\n    const skipSubscriber = new OperatorSubscriber(\n      subscriber,\n      () => {\n        skipSubscriber?.unsubscribe();\n        taking = true;\n      },\n      noop\n    );\n\n    innerFrom(notifier).subscribe(skipSubscriber);\n\n    source.subscribe(new OperatorSubscriber(subscriber, (value) => taking && subscriber.next(value)));\n  });\n}\n","import { Falsy, MonoTypeOperatorFunction, OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\nexport function skipWhile<T>(predicate: BooleanConstructor): OperatorFunction<T, Extract<T, Falsy> extends never ? never : T>;\nexport function skipWhile<T>(predicate: (value: T, index: number) => true): OperatorFunction<T, never>;\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T>;\n\n/**\n * Returns an Observable that skips all items emitted by the source Observable as long as a specified condition holds\n * true, but emits all further source items as soon as the condition becomes false.\n *\n * ![](skipWhile.png)\n *\n * Skips all the notifications with a truthy predicate. It will not skip the notifications when the predicate is falsy.\n * It can also be skipped using index. Once the predicate is true, it will not be called again.\n *\n * ## Example\n * Using Value: Skip some super heroes\n * ```ts\n * import { from } from 'rxjs';\n * import { skipWhile } from 'rxjs/operators';\n *\n * const source = from(['Green Arrow', 'SuperMan', 'Flash', 'SuperGirl', 'Black Canary'])\n * // Skip the heroes until SuperGirl\n * const example = source.pipe(skipWhile((hero) => hero !== 'SuperGirl'));\n * // output: SuperGirl, Black Canary\n * example.subscribe((femaleHero) => console.log(femaleHero));\n * ```\n * Using Index: Skip value from the array until index 5\n * ```ts\n * import { from } from 'rxjs';\n * import { skipWhile } from 'rxjs/operators';\n *\n * const source = from([1, 2, 3, 4, 5, 6, 7, 9, 10]);\n * const example = source.pipe(skipWhile((_, i) => i !== 5));\n * // output: 6, 7, 9, 10\n * example.subscribe((val) => console.log(val));\n * ```\n *\n * @see {@link last}\n * @see {@link skip}\n * @see {@link skipUntil}\n * @see {@link skipLast}\n *\n * @param {Function} predicate - A function to test each item emitted from the source Observable.\n * @return A function that returns an Observable that begins emitting items\n * emitted by the source Observable when the specified predicate becomes false.\n */\nexport function skipWhile<T>(predicate: (value: T, index: number) => boolean): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let taking = false;\n    let index = 0;\n    source.subscribe(\n      new OperatorSubscriber(subscriber, (value) => (taking || (taking = !predicate(value, index++))) && subscriber.next(value))\n    );\n  });\n}\n","import { concat } from '../observable/concat';\nimport { OperatorFunction, SchedulerLike, ValueFromArray } from '../types';\nimport { popScheduler } from '../util/args';\nimport { operate } from '../util/lift';\n\n// Devs are more likely to pass null or undefined than they are a scheduler\n// without accompanying values. To make things easier for (naughty) devs who\n// use the `strictNullChecks: false` TypeScript compiler option, these\n// overloads with explicit null and undefined values are included.\n\nexport function startWith<T>(value: null): OperatorFunction<T, T | null>;\nexport function startWith<T>(value: undefined): OperatorFunction<T, T | undefined>;\n\n/** @deprecated The `scheduler` parameter will be removed in v8. Use `scheduled` and `concatAll`. Details: https://rxjs.dev/deprecations/scheduler-argument */\nexport function startWith<T, A extends readonly unknown[] = T[]>(\n  ...valuesAndScheduler: [...A, SchedulerLike]\n): OperatorFunction<T, T | ValueFromArray<A>>;\nexport function startWith<T, A extends readonly unknown[] = T[]>(...values: A): OperatorFunction<T, T | ValueFromArray<A>>;\n\n/**\n * Returns an observable that, at the moment of subscription, will synchronously emit all\n * values provided to this operator, then subscribe to the source and mirror all of its emissions\n * to subscribers.\n *\n * This is a useful way to know when subscription has occurred on an existing observable.\n *\n * <span class=\"informal\">First emits its arguments in order, and then any\n * emissions from the source.</span>\n *\n * ![](startWith.png)\n *\n * ## Examples\n *\n * Emit a value when a timer starts.\n *\n * ```ts\n * import { timer } from 'rxjs';\n * import { startWith, map } from 'rxjs/operators';\n *\n * timer(1000)\n *   .pipe(\n *     map(() => 'timer emit'),\n *     startWith('timer start')\n *   )\n *   .subscribe(x => console.log(x));\n *\n * // results:\n * // \"timer start\"\n * // \"timer emit\"\n * ```\n *\n * @param values Items you want the modified Observable to emit first.\n * @return A function that returns an Observable that synchronously emits\n * provided values before subscribing to the source Observable.\n *\n * @see {@link endWith}\n * @see {@link finalize}\n * @see {@link concat}\n */\nexport function startWith<T, D>(...values: D[]): OperatorFunction<T, T | D> {\n  const scheduler = popScheduler(values);\n  return operate((source, subscriber) => {\n    // Here we can't pass `undefined` as a scheduler, because if we did, the\n    // code inside of `concat` would be confused by the `undefined`, and treat it\n    // like an invalid observable. So we have to split it two different ways.\n    (scheduler ? concat(values, source, scheduler) : concat(values, source)).subscribe(subscriber);\n  });\n}\n","import { Subscriber } from '../Subscriber';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { innerFrom } from '../observable/from';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/* tslint:disable:max-line-length */\nexport function switchMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function switchMap<T, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: undefined\n): OperatorFunction<T, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function switchMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to an Observable which is merged in the output\n * Observable, emitting values only from the most recently projected Observable.\n *\n * <span class=\"informal\">Maps each value to an Observable, then flattens all of\n * these inner Observables.</span>\n *\n * ![](switchMap.png)\n *\n * Returns an Observable that emits items based on applying a function that you\n * supply to each item emitted by the source Observable, where that function\n * returns an (so-called \"inner\") Observable. Each time it observes one of these\n * inner Observables, the output Observable begins emitting the items emitted by\n * that inner Observable. When a new inner Observable is emitted, `switchMap`\n * stops emitting items from the earlier-emitted inner Observable and begins\n * emitting items from the new one. It continues to behave like this for\n * subsequent inner Observables.\n *\n * ## Example\n * Generate new Observable according to source Observable values\n * ```typescript\n * import { of } from 'rxjs';\n * import { switchMap } from 'rxjs/operators';\n *\n * const switched = of(1, 2, 3).pipe(switchMap((x: number) => of(x, x ** 2, x ** 3)));\n * switched.subscribe(x => console.log(x));\n * // outputs\n * // 1\n * // 1\n * // 1\n * // 2\n * // 4\n * // 8\n * // ... and so on\n * ```\n *\n * Rerun an interval Observable on every click event\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { switchMap } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(switchMap((ev) => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link concatMap}\n * @see {@link exhaustMap}\n * @see {@link mergeMap}\n * @see {@link switchAll}\n * @see {@link switchMapTo}\n *\n * @param {function(value: T, ?index: number): ObservableInput} project A function\n * that, when applied to an item emitted by the source Observable, returns an\n * Observable.\n * @return A function that returns an Observable that emits the result of\n * applying the projection function (and the optional deprecated\n * `resultSelector`) to each item emitted by the source Observable and taking\n * only the values from the most recently projected inner Observable.\n */\nexport function switchMap<T, R, O extends ObservableInput<any>>(\n  project: (value: T, index: number) => O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  return operate((source, subscriber) => {\n    let innerSubscriber: Subscriber<ObservedValueOf<O>> | null = null;\n    let index = 0;\n    // Whether or not the source subscription has completed\n    let isComplete = false;\n\n    // We only complete the result if the source is complete AND we don't have an active inner subscription.\n    // This is called both when the source completes and when the inners complete.\n    const checkComplete = () => isComplete && !innerSubscriber && subscriber.complete();\n\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value) => {\n          // Cancel the previous inner subscription if there was one\n          innerSubscriber?.unsubscribe();\n          let innerIndex = 0;\n          const outerIndex = index++;\n          // Start the next inner subscription\n          innerFrom(project(value, outerIndex)).subscribe(\n            (innerSubscriber = new OperatorSubscriber(\n              subscriber,\n              // When we get a new inner value, next it through. Note that this is\n              // handling the deprecate result selector here. This is because with this architecture\n              // it ends up being smaller than using the map operator.\n              (innerValue) => subscriber.next(resultSelector ? resultSelector(value, innerValue, outerIndex, innerIndex++) : innerValue),\n              () => {\n                // The inner has completed. Null out the inner subcriber to\n                // free up memory and to signal that we have no inner subscription\n                // currently.\n                innerSubscriber = null!;\n                checkComplete();\n              }\n            ))\n          );\n        },\n        () => {\n          isComplete = true;\n          checkComplete();\n        }\n      )\n    );\n  });\n}\n","import { OperatorFunction, ObservableInput, ObservedValueOf } from '../types';\nimport { switchMap } from './switchMap';\nimport { identity } from '../util/identity';\n\n/**\n * Converts a higher-order Observable into a first-order Observable\n * producing values only from the most recent observable sequence\n *\n * <span class=\"informal\">Flattens an Observable-of-Observables.</span>\n *\n * ![](switchAll.png)\n *\n * `switchAll` subscribes to a source that is an observable of observables, also known as a\n * \"higher-order observable\" (or `Observable<Observable<T>>`). It subscribes to the most recently\n * provided \"inner observable\" emitted by the source, unsubscribing from any previously subscribed\n * to inner observable, such that only the most recent inner observable may be subscribed to at\n * any point in time. The resulting observable returned by `switchAll` will only complete if the\n * source observable completes, *and* any currently subscribed to inner observable also has completed,\n * if there are any.\n *\n * ## Examples\n * Spawn a new interval observable for each click event, but for every new\n * click, cancel the previous interval and subscribe to the new one.\n *\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { switchAll, map, tap } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click').pipe(tap(() => console.log('click')));\n * const source = clicks.pipe(map((ev) => interval(1000)));\n *\n * source.pipe(\n *   switchAll()\n * ).subscribe(x => console.log(x));\n *\n * // Output\n * // click\n * // 1\n * // 2\n * // 3\n * // 4\n * // ...\n * // click\n * // 1\n * // 2\n * // 3\n * // ...\n * // click\n * // ...\n * ```\n *\n * @see {@link combineLatestAll}\n * @see {@link concatAll}\n * @see {@link exhaustAll}\n * @see {@link switchMap}\n * @see {@link switchMapTo}\n * @see {@link mergeAll}\n *\n * @return A function that returns an Observable that converts a higher-order\n * Observable into a first-order Observable producing values only from the most\n * recent Observable sequence.\n */\n\nexport function switchAll<O extends ObservableInput<any>>(): OperatorFunction<O, ObservedValueOf<O>> {\n  return switchMap(identity);\n}\n","import { switchMap } from './switchMap';\nimport { ObservableInput, OperatorFunction, ObservedValueOf } from '../types';\nimport { isFunction } from '../util/isFunction';\n\n/* tslint:disable:max-line-length */\nexport function switchMapTo<O extends ObservableInput<unknown>>(observable: O): OperatorFunction<any, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function switchMapTo<O extends ObservableInput<unknown>>(\n  observable: O,\n  resultSelector: undefined\n): OperatorFunction<any, ObservedValueOf<O>>;\n/** @deprecated The `resultSelector` parameter will be removed in v8. Use an inner `map` instead. Details: https://rxjs.dev/deprecations/resultSelector */\nexport function switchMapTo<T, R, O extends ObservableInput<unknown>>(\n  observable: O,\n  resultSelector: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, R>;\n/* tslint:enable:max-line-length */\n\n/**\n * Projects each source value to the same Observable which is flattened multiple\n * times with {@link switchMap} in the output Observable.\n *\n * <span class=\"informal\">It's like {@link switchMap}, but maps each value\n * always to the same inner Observable.</span>\n *\n * ![](switchMapTo.png)\n *\n * Maps each source value to the given Observable `innerObservable` regardless\n * of the source value, and then flattens those resulting Observables into one\n * single Observable, which is the output Observable. The output Observables\n * emits values only from the most recently emitted instance of\n * `innerObservable`.\n *\n * ## Example\n * Rerun an interval Observable on every click event\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { switchMapTo } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(switchMapTo(interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link concatMapTo}\n * @see {@link switchAll}\n * @see {@link switchMap}\n * @see {@link mergeMapTo}\n *\n * @param {ObservableInput} innerObservable An Observable to replace each value from\n * the source Observable.\n * @return A function that returns an Observable that emits items from the\n * given `innerObservable` (and optionally transformed through the deprecated\n * `resultSelector`) every time a value is emitted on the source Observable,\n * and taking only the values from the most recently projected inner\n * Observable.\n */\nexport function switchMapTo<T, R, O extends ObservableInput<unknown>>(\n  innerObservable: O,\n  resultSelector?: (outerValue: T, innerValue: ObservedValueOf<O>, outerIndex: number, innerIndex: number) => R\n): OperatorFunction<T, ObservedValueOf<O> | R> {\n  return isFunction(resultSelector) ? switchMap(() => innerObservable, resultSelector) : switchMap(() => innerObservable);\n}\n","import { ObservableInput, ObservedValueOf, OperatorFunction } from '../types';\nimport { switchMap } from './switchMap';\nimport { operate } from '../util/lift';\n\n// TODO: Generate a marble diagram for these docs.\n\n/**\n * Applies an accumulator function over the source Observable where the\n * accumulator function itself returns an Observable, emitting values\n * only from the most recently returned Observable.\n *\n * <span class=\"informal\">It's like {@link scan}, but only the most recent\n * Observable returned by the accumulator is merged into the outer Observable.</span>\n *\n * @see {@link scan}\n * @see {@link mergeScan}\n * @see {@link switchMap}\n *\n * @param accumulator\n * The accumulator function called on each source value.\n * @param seed The initial accumulation value.\n * @return A function that returns an observable of the accumulated values.\n */\nexport function switchScan<T, R, O extends ObservableInput<any>>(\n  accumulator: (acc: R, value: T, index: number) => O,\n  seed: R\n): OperatorFunction<T, ObservedValueOf<O>> {\n  return operate((source, subscriber) => {\n    // The state we will keep up to date to pass into our\n    // accumulator function at each new value from the source.\n    let state = seed;\n\n    // Use `switchMap` on our `source` to do the work of creating\n    // this operator. Note the backwards order here of `switchMap()(source)`\n    // to avoid needing to use `pipe` unnecessarily\n    switchMap(\n      // On each value from the source, call the accumulator with\n      // our previous state, the value and the index.\n      (value: T, index) => accumulator(state, value, index),\n      // Using the deprecated result selector here as a dirty trick\n      // to update our state with the flattened value.\n      (_, innerValue) => ((state = innerValue), innerValue)\n    )(source).subscribe(subscriber);\n\n    return () => {\n      // Release state on teardown\n      state = null!;\n    };\n  });\n}\n","import { MonoTypeOperatorFunction, ObservableInput } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/from';\nimport { noop } from '../util/noop';\n\n/**\n * Emits the values emitted by the source Observable until a `notifier`\n * Observable emits a value.\n *\n * <span class=\"informal\">Lets values pass until a second Observable,\n * `notifier`, emits a value. Then, it completes.</span>\n *\n * ![](takeUntil.png)\n *\n * `takeUntil` subscribes and begins mirroring the source Observable. It also\n * monitors a second Observable, `notifier` that you provide. If the `notifier`\n * emits a value, the output Observable stops mirroring the source Observable\n * and completes. If the `notifier` doesn't emit any value and completes\n * then `takeUntil` will pass all values.\n *\n * ## Example\n * Tick every second until the first click happens\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { takeUntil } from 'rxjs/operators';\n *\n * const source = interval(1000);\n * const clicks = fromEvent(document, 'click');\n * const result = source.pipe(takeUntil(clicks));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeWhile}\n * @see {@link skip}\n *\n * @param {Observable} notifier The Observable whose first emitted value will\n * cause the output Observable of `takeUntil` to stop emitting values from the\n * source Observable.\n * @return A function that returns an Observable that emits the values from the\n * source Observable until `notifier` emits its first value.\n */\nexport function takeUntil<T>(notifier: ObservableInput<any>): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    innerFrom(notifier).subscribe(new OperatorSubscriber(subscriber, () => subscriber.complete(), noop));\n    !subscriber.closed && source.subscribe(subscriber);\n  });\n}\n","import { OperatorFunction, MonoTypeOperatorFunction, Falsy } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\nexport function takeWhile<T>(predicate: BooleanConstructor): OperatorFunction<T, Exclude<T, Falsy> extends never ? never : T>;\nexport function takeWhile<T>(\n  predicate: BooleanConstructor,\n  inclusive: false\n): OperatorFunction<T, Exclude<T, Falsy> extends never ? never : T>;\nexport function takeWhile<T>(predicate: BooleanConstructor, inclusive: true): MonoTypeOperatorFunction<T>;\nexport function takeWhile<T, S extends T>(predicate: (value: T, index: number) => value is S): OperatorFunction<T, S>;\nexport function takeWhile<T, S extends T>(predicate: (value: T, index: number) => value is S, inclusive: false): OperatorFunction<T, S>;\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean, inclusive?: boolean): MonoTypeOperatorFunction<T>;\n\n/**\n * Emits values emitted by the source Observable so long as each value satisfies\n * the given `predicate`, and then completes as soon as this `predicate` is not\n * satisfied.\n *\n * <span class=\"informal\">Takes values from the source only while they pass the\n * condition given. When the first value does not satisfy, it completes.</span>\n *\n * ![](takeWhile.png)\n *\n * `takeWhile` subscribes and begins mirroring the source Observable. Each value\n * emitted on the source is given to the `predicate` function which returns a\n * boolean, representing a condition to be satisfied by the source values. The\n * output Observable emits the source values until such time as the `predicate`\n * returns false, at which point `takeWhile` stops mirroring the source\n * Observable and completes the output Observable.\n *\n * ## Example\n * Emit click events only while the clientX property is greater than 200\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { takeWhile } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(takeWhile(ev => ev.clientX > 200));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link take}\n * @see {@link takeLast}\n * @see {@link takeUntil}\n * @see {@link skip}\n *\n * @param {function(value: T, index: number): boolean} predicate A function that\n * evaluates a value emitted by the source Observable and returns a boolean.\n * Also takes the (zero-based) index as the second argument.\n * @param {boolean} inclusive When set to `true` the value that caused\n * `predicate` to return `false` will also be emitted.\n * @return A function that returns an Observable that emits values from the\n * source Observable so long as each value satisfies the condition defined by\n * the `predicate`, then completes.\n */\nexport function takeWhile<T>(predicate: (value: T, index: number) => boolean, inclusive = false): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let index = 0;\n    source.subscribe(\n      new OperatorSubscriber(subscriber, (value) => {\n        const result = predicate(value, index++);\n        (result || inclusive) && subscriber.next(value);\n        !result && subscriber.complete();\n      })\n    );\n  });\n}\n","import { MonoTypeOperatorFunction, Observer } from '../types';\nimport { isFunction } from '../util/isFunction';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { identity } from '../util/identity';\n\nexport function tap<T>(observer?: Partial<Observer<T>>): MonoTypeOperatorFunction<T>;\nexport function tap<T>(next: (value: T) => void): MonoTypeOperatorFunction<T>;\n/** @deprecated Instead of passing separate callback arguments, use an observer argument. Signatures taking separate callback arguments will be removed in v8. Details: https://rxjs.dev/deprecations/subscribe-arguments */\nexport function tap<T>(\n  next?: ((value: T) => void) | null,\n  error?: ((error: any) => void) | null,\n  complete?: (() => void) | null\n): MonoTypeOperatorFunction<T>;\n\n/**\n * Used to perform side-effects for notifications from the source observable\n *\n * <span class=\"informal\">Used when you want to affect outside state with a notification without altering the notification</span>\n *\n * ![](tap.png)\n *\n * Tap is designed to allow the developer a designated place to perform side effects. While you _could_ perform side-effects\n * inside of a `map` or a `mergeMap`, that would make their mapping functions impure, which isn't always a big deal, but will\n * make it so you can't do things like memoize those functions. The `tap` operator is designed solely for such side-effects to\n * help you remove side-effects from other operations.\n *\n * For any notification, next, error, or complete, `tap` will call the appropriate callback you have provided to it, via a function\n * reference, or a partial observer, then pass that notification down the stream.\n *\n * The observable returned by `tap` is an exact mirror of the source, with one exception: Any error that occurs -- synchronously -- in a handler\n * provided to `tap` will be emitted as an error from the returned observable.\n *\n * > Be careful! You can mutate objects as they pass through the `tap` operator's handlers.\n *\n * The most common use of `tap` is actually for debugging. You can place a `tap(console.log)` anywhere\n * in your observable `pipe`, log out the notifications as they are emitted by the source returned by the previous\n * operation.\n *\n * ## Example\n * Check a random number before it is handled. Below is an observable that will use a random number between 0 and 1,\n * and emit \"big\" or \"small\" depending on the size of that number. But we wanted to log what the original number\n * was, so we have added a `tap(console.log)`.\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { tap, map } from 'rxjs/operators';\n *\n * of(Math.random()).pipe(\n *   tap(console.log),\n *   map(n => n > 0.5 ? 'big' : 'small')\n * ).subscribe(console.log);\n * ```\n *\n * ## Example\n * Using `tap` to analyze a value and force an error. Below is an observable where in our system we only\n * want to emit numbers 3 or less we get from another source. We can force our observable to error\n * using `tap`.\n *\n * ```ts\n * import { of } from 'rxjs';\n * import { tap } from 'rxjs/operators';\n *\n * const source = of(1, 2, 3, 4, 5)\n *\n * source.pipe(\n *  tap(n => {\n *    if (n > 3) {\n *      throw new TypeError(`Value ${n} is greater than 3`)\n *    }\n *  })\n * )\n * .subscribe(console.log);\n * ```\n *\n * ## Example\n * We want to know when an observable completes before moving on to the next observable. The system\n * below will emit a random series of `\"X\"` characters from 3 different observables in sequence. The\n * only way we know when one observable completes and moves to the next one, in this case, is because\n * we have added a `tap` with the side-effect of logging to console.\n *\n * ```ts\n * import { of, interval } from 'rxjs';\n * import { tap, map, concatMap, take } from 'rxjs/operators';\n *\n *\n * of(1, 2, 3).pipe(\n *  concatMap(n => interval(1000).pipe(\n *    take(Math.round(Math.random() * 10)),\n *    map(() => 'X'),\n *    tap({\n *      complete: () => console.log(`Done with ${n}`)\n *    })\n *  ))\n * )\n * .subscribe(console.log);\n * ```\n *\n * @see {@link finalize}\n * @see {@link Observable#subscribe}\n *\n * @param observerOrNext A next handler or partial observer\n * @param error An error handler\n * @param complete A completion handler\n * @return A function that returns an Observable identical to the source, but\n * runs the specified Observer or callback(s) for each item.\n */\nexport function tap<T>(\n  observerOrNext?: Partial<Observer<T>> | ((value: T) => void) | null,\n  error?: ((e: any) => void) | null,\n  complete?: (() => void) | null\n): MonoTypeOperatorFunction<T> {\n  // We have to check to see not only if next is a function,\n  // but if error or complete were passed. This is because someone\n  // could technically call tap like `tap(null, fn)` or `tap(null, null, fn)`.\n  const tapObserver =\n    isFunction(observerOrNext) || error || complete ? { next: observerOrNext as (value: T) => void, error, complete } : observerOrNext;\n\n  // TODO: Use `operate` function once this PR lands: https://github.com/ReactiveX/rxjs/pull/5742\n  return tapObserver\n    ? operate((source, subscriber) => {\n        source.subscribe(\n          new OperatorSubscriber(\n            subscriber,\n            (value) => {\n              tapObserver.next?.(value);\n              subscriber.next(value);\n            },\n            () => {\n              tapObserver.complete?.();\n              subscriber.complete();\n            },\n            (err) => {\n              tapObserver.error?.(err);\n              subscriber.error(err);\n            }\n          )\n        );\n      })\n    : // Tap was called with no valid tap observer or handler\n      // (e.g. `tap(null, null, null)` or `tap(null)` or `tap()`)\n      // so we're going to just mirror the source.\n      identity;\n}\n","import { Subscription } from '../Subscription';\n\nimport { MonoTypeOperatorFunction, ObservableInput } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/from';\n\nexport interface ThrottleConfig {\n  leading?: boolean;\n  trailing?: boolean;\n}\n\nexport const defaultThrottleConfig: ThrottleConfig = {\n  leading: true,\n  trailing: false,\n};\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for a duration determined by another Observable, then repeats this\n * process.\n *\n * <span class=\"informal\">It's like {@link throttleTime}, but the silencing\n * duration is determined by a second Observable.</span>\n *\n * ![](throttle.png)\n *\n * `throttle` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled by calling the `durationSelector` function with the source value,\n * which returns the \"duration\" Observable. When the duration Observable emits a\n * value, the timer is disabled, and this process repeats for the\n * next source value.\n *\n * ## Example\n * Emit clicks at a rate of at most one click per second\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { throttle } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(throttle(ev => interval(1000)));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link audit}\n * @see {@link debounce}\n * @see {@link delayWhen}\n * @see {@link sample}\n * @see {@link throttleTime}\n *\n * @param durationSelector A function\n * that receives a value from the source Observable, for computing the silencing\n * duration for each source value, returned as an Observable or a Promise.\n * @param config a configuration object to define `leading` and `trailing` behavior. Defaults\n * to `{ leading: true, trailing: false }`.\n * @return A function that returns an Observable that performs the throttle\n * operation to limit the rate of emissions from the source.\n */\nexport function throttle<T>(\n  durationSelector: (value: T) => ObservableInput<any>,\n  { leading, trailing }: ThrottleConfig = defaultThrottleConfig\n): MonoTypeOperatorFunction<T> {\n  return operate((source, subscriber) => {\n    let hasValue = false;\n    let sendValue: T | null = null;\n    let throttled: Subscription | null = null;\n    let isComplete = false;\n\n    const endThrottling = () => {\n      throttled?.unsubscribe();\n      throttled = null;\n      if (trailing) {\n        send();\n        isComplete && subscriber.complete();\n      }\n    };\n\n    const cleanupThrottling = () => {\n      throttled = null;\n      isComplete && subscriber.complete();\n    };\n\n    const startThrottle = (value: T) =>\n      (throttled = innerFrom(durationSelector(value)).subscribe(new OperatorSubscriber(subscriber, endThrottling, cleanupThrottling)));\n\n    const send = () => {\n      if (hasValue) {\n        // Ensure we clear out our value and hasValue flag\n        // before we emit, otherwise reentrant code can cause\n        // issues here.\n        hasValue = false;\n        const value = sendValue!;\n        sendValue = null;\n        // Emit the value.\n        subscriber.next(value);\n        !isComplete && startThrottle(value);\n      }\n    };\n\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        // Regarding the presence of throttled.closed in the following\n        // conditions, if a synchronous duration selector is specified - weird,\n        // but legal - an already-closed subscription will be assigned to\n        // throttled, so the subscription's closed property needs to be checked,\n        // too.\n        (value) => {\n          hasValue = true;\n          sendValue = value;\n          !(throttled && !throttled.closed) && (leading ? send() : startThrottle(value));\n        },\n        () => {\n          isComplete = true;\n          !(trailing && hasValue && throttled && !throttled.closed) && subscriber.complete();\n        }\n      )\n    );\n  });\n}\n","import { asyncScheduler } from '../scheduler/async';\nimport { defaultThrottleConfig, throttle } from './throttle';\nimport { MonoTypeOperatorFunction, SchedulerLike } from '../types';\nimport { timer } from '../observable/timer';\n\n/**\n * Emits a value from the source Observable, then ignores subsequent source\n * values for `duration` milliseconds, then repeats this process.\n *\n * <span class=\"informal\">Lets a value pass, then ignores source values for the\n * next `duration` milliseconds.</span>\n *\n * ![](throttleTime.png)\n *\n * `throttleTime` emits the source Observable values on the output Observable\n * when its internal timer is disabled, and ignores source values when the timer\n * is enabled. Initially, the timer is disabled. As soon as the first source\n * value arrives, it is forwarded to the output Observable, and then the timer\n * is enabled. After `duration` milliseconds (or the time unit determined\n * internally by the optional `scheduler`) has passed, the timer is disabled,\n * and this process repeats for the next source value. Optionally takes a\n * {@link SchedulerLike} for managing timers.\n *\n * ## Examples\n *\n * #### Limit click rate\n *\n * Emit clicks at a rate of at most one click per second\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { throttleTime } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(throttleTime(1000));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * #### Double Click\n *\n * The following example only emits clicks which happen within a subsequent\n * delay of 400ms of the previous click. This for example can emulate a double\n * click. It makes use of the `trailing` parameter of the throttle configuration.\n *\n * ```ts\n * import { fromEvent, asyncScheduler } from 'rxjs';\n * import { throttleTime, withLatestFrom } from 'rxjs/operators';\n *\n * // defaultThottleConfig = { leading: true, trailing: false }\n * const throttleConfig = {\n *   leading: false,\n *   trailing: true\n * }\n *\n * const click = fromEvent(document, 'click');\n * const doubleClick = click.pipe(\n *   throttleTime(400, asyncScheduler, throttleConfig)\n * );\n *\n * doubleClick.subscribe((throttleValue: Event) => {\n *   console.log(`Double-clicked! Timestamp: ${throttleValue.timeStamp}`);\n * });\n * ```\n *\n * If you enable the `leading` parameter in this example, the output would be the primary click and\n * the double click, but restricts additional clicks within 400ms.\n *\n * @see {@link auditTime}\n * @see {@link debounceTime}\n * @see {@link delay}\n * @see {@link sampleTime}\n * @see {@link throttle}\n *\n * @param duration Time to wait before emitting another value after\n * emitting the last value, measured in milliseconds or the time unit determined\n * internally by the optional `scheduler`.\n * @param scheduler The {@link SchedulerLike} to use for\n * managing the timers that handle the throttling. Defaults to {@link asyncScheduler}.\n * @param config a configuration object to define `leading` and\n * `trailing` behavior. Defaults to `{ leading: true, trailing: false }`.\n * @return A function that returns an Observable that performs the throttle\n * operation to limit the rate of emissions from the source.\n */\nexport function throttleTime<T>(\n  duration: number,\n  scheduler: SchedulerLike = asyncScheduler,\n  config = defaultThrottleConfig\n): MonoTypeOperatorFunction<T> {\n  const duration$ = timer(duration, scheduler);\n  return throttle(() => duration$, config);\n}\n","import { Observable } from '../Observable';\nimport { async } from '../scheduler/async';\nimport { SchedulerLike, OperatorFunction } from '../types';\nimport { scan } from './scan';\nimport { defer } from '../observable/defer';\nimport { map } from './map';\n\n/**\n *\n * Emits an object containing the current value, and the time that has\n * passed between emitting the current value and the previous value, which is\n * calculated by using the provided `scheduler`'s `now()` method to retrieve\n * the current time at each emission, then calculating the difference. The `scheduler`\n * defaults to {@link asyncScheduler}, so by default, the `interval` will be in\n * milliseconds.\n *\n * <span class=\"informal\">Convert an Observable that emits items into one that\n * emits indications of the amount of time elapsed between those emissions.</span>\n *\n * ![](timeInterval.png)\n *\n * ## Examples\n * Emit interval between current value with the last value\n *\n * ```ts\n * const seconds = interval(1000);\n *\n * seconds.pipe(timeInterval())\n * .subscribe(\n *     value => console.log(value),\n *     err => console.log(err),\n * );\n *\n * seconds.pipe(timeout(900))\n * .subscribe(\n *     value => console.log(value),\n *     err => console.log(err),\n * );\n *\n * // NOTE: The values will never be this precise,\n * // intervals created with `interval` or `setInterval`\n * // are non-deterministic.\n *\n * // {value: 0, interval: 1000}\n * // {value: 1, interval: 1000}\n * // {value: 2, interval: 1000}\n * ```\n *\n * @param {SchedulerLike} [scheduler] Scheduler used to get the current time.\n * @return A function that returns an Observable that emits information about\n * value and interval.\n */\nexport function timeInterval<T>(scheduler: SchedulerLike = async): OperatorFunction<T, TimeInterval<T>> {\n  return (source: Observable<T>) =>\n    defer(() => {\n      return source.pipe(\n        // TODO(benlesh): correct these typings.\n        scan(({ current }, value) => ({ value, current: scheduler.now(), last: current }), {\n          current: scheduler.now(),\n          value: undefined,\n          last: undefined,\n        } as any) as OperatorFunction<T, any>,\n        map<any, TimeInterval<T>>(({ current, last, value }) => new TimeInterval(value, current - last))\n      );\n    });\n}\n\n// TODO(benlesh): make this an interface, export the interface, but not the implemented class,\n// there's no reason users should be manually creating this type.\n\nexport class TimeInterval<T> {\n  /**\n   * @deprecated Internal implementation detail, do not construct directly. Will be made an interface in v8.\n   */\n  constructor(public value: T, public interval: number) {}\n}\n","import { async } from '../scheduler/async';\nimport { isValidDate } from '../util/isDate';\nimport { ObservableInput, OperatorFunction, SchedulerLike } from '../types';\nimport { timeout } from './timeout';\n\n/**\n * If the time of the Date object passed arrives before the first value arrives from the source, it will unsubscribe\n * from the source and switch the subscription to another observable.\n *\n * <span class=\"informal\">Use to switch to a different observable if the first value doesn't arrive by a specific time</span>\n *\n * Can be used to set a timeout only for the first value, however it's recommended to use the {@link timeout} operator with\n * the `first` configuration to get that effect.\n *\n * @param dueBy The exact time, as a `Date`, at which the timeout will be triggered if the first value does not arrive.\n * @param switchTo The observable to switch to when timeout occurs.\n * @param scheduler The scheduler to use with time-related operations within this operator. Defaults to {@link asyncScheduler}\n * @deprecated Replaced with {@link timeout}. Instead of `timeoutWith(someDate, a$, scheduler)`, use the configuration object `timeout({ first: someDate, with: () => a$, scheduler })`. Will be removed in v8.\n */\nexport function timeoutWith<T, R>(dueBy: Date, switchTo: ObservableInput<R>, scheduler?: SchedulerLike): OperatorFunction<T, T | R>;\n\n/**\n * When the passed timespan ellapses before the source emits any given value, it will unsubscribe from the source,\n * and switch the subscription to another observable.\n *\n * <span class=\"informal\">Used to switch to a different observable if your source is being slow</span>\n *\n * Useful in cases where:\n *\n * - You want to switch to a different source that may be faster\n * - You want to notify a user that the data stream is slow\n * - You want to emit a custom error rather than the {@link TimeoutError} emitted\n *   by the default usage of {@link timeout}.\n *\n * ## Example\n *\n * Fallback to a faster observable\n *\n * ```ts\n * import { interval } from 'rxjs';\n * import { timeoutWith } from 'rxjs/operators';\n *\n * const slow$ = interval(1000);\n * const faster$ = interval(500);\n *\n * slow$.pipe(\n *    timeoutWith(900, faster$)\n * )\n * .subscribe(console.log)\n * ```\n *\n * ### Example\n *\n * Emit your own custom timeout error\n *\n * ```ts\n * import { interval, throwError } from 'rxjs';\n * import { timeoutWith } from 'rxjs/operators';\n *\n * class CustomTimeoutError extends Error {\n *   constructor() {\n *      super('It was too slow');\n *      this.name = 'CustomTimeoutError';\n *   }\n * }\n *\n * const slow = interval(1000);\n *\n * slow$.pipe(\n *    timeoutWith(900, throwError(new CustomTimeoutError()))\n * )\n * .subscribe({\n *    error: console.error\n * })\n * ```\n * @param waitFor The time allowed between values from the source before timeout is triggered.\n * @param switchTo The observable to switch to when timeout occurs.\n * @param scheduler The scheduler to use with time-related operations within this operator. Defaults to {@link asyncScheduler}\n * @return A function that returns an Observable that mirrors behaviour of the\n * source Observable, unless timeout happens when it starts emitting values\n * from the Observable passed as a second parameter.\n * @deprecated Replaced with {@link timeout}. Instead of `timeoutWith(100, a$, scheduler)`, use the configuration object `timeout({ each: 100, with: () => a$, scheduler })`. Will be removed in v8.\n */\nexport function timeoutWith<T, R>(waitFor: number, switchTo: ObservableInput<R>, scheduler?: SchedulerLike): OperatorFunction<T, T | R>;\n\nexport function timeoutWith<T, R>(\n  due: number | Date,\n  withObservable: ObservableInput<R>,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, T | R> {\n  let first: number | Date | undefined;\n  let each: number | undefined;\n  let _with: () => ObservableInput<R>;\n  scheduler = scheduler ?? async;\n\n  if (isValidDate(due)) {\n    first = due;\n  } else if (typeof due === 'number') {\n    each = due;\n  }\n\n  if (withObservable) {\n    _with = () => withObservable;\n  } else {\n    throw new TypeError('No observable provided to switch to');\n  }\n\n  if (first == null && each == null) {\n    // Ensure timeout was provided at runtime.\n    throw new TypeError('No timeout provided.');\n  }\n\n  return timeout<T, ObservableInput<R>>({\n    first,\n    each,\n    scheduler,\n    with: _with,\n  });\n}\n","import { OperatorFunction, TimestampProvider, Timestamp } from '../types';\nimport { dateTimestampProvider } from '../scheduler/dateTimestampProvider';\nimport { map } from './map';\n\n/**\n * Attaches a timestamp to each item emitted by an observable indicating when it was emitted\n *\n * The `timestamp` operator maps the *source* observable stream to an object of type\n * `{value: T, timestamp: R}`. The properties are generically typed. The `value` property contains the value\n * and type of the *source* observable. The `timestamp` is generated by the schedulers `now` function. By\n * default it uses the *async* scheduler which simply returns `Date.now()` (milliseconds since 1970/01/01\n * 00:00:00:000) and therefore is of type `number`.\n *\n * ![](timestamp.png)\n *\n * ## Example\n *\n * In this example there is a timestamp attached to the documents click event.\n *\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { timestamp } from 'rxjs/operators';\n *\n * const clickWithTimestamp = fromEvent(document, 'click').pipe(\n *   timestamp()\n * );\n *\n * // Emits data of type {value: MouseEvent, timestamp: number}\n * clickWithTimestamp.subscribe(data => {\n *   console.log(data);\n * });\n * ```\n *\n * @param timestampProvider An object with a `now()` method used to get the current timestamp.\n * @return A function that returns an Observable that attaches a timestamp to\n * each item emitted by the source Observable indicating when it was emitted.\n */\nexport function timestamp<T>(timestampProvider: TimestampProvider = dateTimestampProvider): OperatorFunction<T, Timestamp<T>> {\n  return map((value: T) => ({ value, timestamp: timestampProvider.now()}));\n}\n","import { Observable } from '../Observable';\nimport { OperatorFunction } from '../types';\nimport { Subject } from '../Subject';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\n\n/**\n * Branch out the source Observable values as a nested Observable whenever\n * `windowBoundaries` emits.\n *\n * <span class=\"informal\">It's like {@link buffer}, but emits a nested Observable\n * instead of an array.</span>\n *\n * ![](window.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping\n * windows. It emits the current window and opens a new one whenever the\n * Observable `windowBoundaries` emits an item. Because each window is an\n * Observable, the output is a higher-order Observable.\n *\n * ## Example\n * In every window of 1 second each, emit at most 2 click events\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { window, mergeAll, map, take } from 'rxjs/operators';\n *\n *  const clicks = fromEvent(document, 'click');\n *  const sec = interval(1000);\n *  const result = clicks.pipe(\n *      window(sec),\n *      map(win => win.pipe(take(2))), // each window has at most 2 emissions\n *      mergeAll(),              // flatten the Observable-of-Observables\n *  );\n *  result.subscribe(x => console.log(x));\n * ```\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link buffer}\n *\n * @param {Observable<any>} windowBoundaries An Observable that completes the\n * previous window and starts a new window.\n * @return A function that returns an Observable of windows, which are\n * Observables emitting values of the source Observable.\n */\nexport function window<T>(windowBoundaries: Observable<any>): OperatorFunction<T, Observable<T>> {\n  return operate((source, subscriber) => {\n    let windowSubject: Subject<T> = new Subject<T>();\n\n    subscriber.next(windowSubject.asObservable());\n\n    const errorHandler = (err: any) => {\n      windowSubject.error(err);\n      subscriber.error(err);\n    };\n\n    // Subscribe to our source\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value) => windowSubject?.next(value),\n        () => {\n          windowSubject.complete();\n          subscriber.complete();\n        },\n        errorHandler\n      )\n    );\n\n    // Subscribe to the window boundaries.\n    windowBoundaries.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        () => {\n          windowSubject.complete();\n          subscriber.next((windowSubject = new Subject()));\n        },\n        noop,\n        errorHandler\n      )\n    );\n\n    return () => {\n      // Unsubscribing the subject ensures that anyone who has captured\n      // a reference to this window that tries to use it after it can\n      // no longer get values from the source will get an ObjectUnsubscribedError.\n      windowSubject?.unsubscribe();\n      windowSubject = null!;\n    };\n  });\n}\n","import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\n\n/**\n * Branch out the source Observable values as a nested Observable with each\n * nested Observable emitting at most `windowSize` values.\n *\n * <span class=\"informal\">It's like {@link bufferCount}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowCount.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows every `startWindowEvery`\n * items, each containing no more than `windowSize` items. When the source\n * Observable completes or encounters an error, the output Observable emits\n * the current window and propagates the notification from the source\n * Observable. If `startWindowEvery` is not provided, then new windows are\n * started immediately at the start of the source and when each window completes\n * with size `windowSize`.\n *\n * ## Examples\n * Ignore every 3rd click event, starting from the first one\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { windowCount, map, mergeAll, skip } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowCount(3),\n *   map(win => win.pipe(skip(1))), // skip first of every 3 clicks\n *   mergeAll()                     // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Ignore every 3rd click event, starting from the third one\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { windowCount, mergeAll } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowCount(2, 3),\n *   mergeAll(),              // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferCount}\n *\n * @param {number} windowSize The maximum number of values emitted by each\n * window.\n * @param {number} [startWindowEvery] Interval at which to start a new window.\n * For example if `startWindowEvery` is `2`, then a new window will be started\n * on every other value from the source. A new window is started at the\n * beginning of the source by default.\n * @return A function that returns an Observable of windows, which in turn are\n * Observable of values.\n */\nexport function windowCount<T>(windowSize: number, startWindowEvery: number = 0): OperatorFunction<T, Observable<T>> {\n  const startEvery = startWindowEvery > 0 ? startWindowEvery : windowSize;\n\n  return operate((source, subscriber) => {\n    let windows = [new Subject<T>()];\n    let starts: number[] = [];\n    let count = 0;\n\n    // Open the first window.\n    subscriber.next(windows[0].asObservable());\n\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value: T) => {\n          // Emit the value through all current windows.\n          // We don't need to create a new window yet, we\n          // do that as soon as we close one.\n          for (const window of windows) {\n            window.next(value);\n          }\n          // Here we're using the size of the window array to figure\n          // out if the oldest window has emitted enough values. We can do this\n          // because the size of the window array is a function of the values\n          // seen by the subscription. If it's time to close it, we complete\n          // it and remove it.\n          const c = count - windowSize + 1;\n          if (c >= 0 && c % startEvery === 0) {\n            windows.shift()!.complete();\n          }\n\n          // Look to see if the next count tells us it's time to open a new window.\n          // TODO: We need to figure out if this really makes sense. We're technically\n          // emitting windows *before* we have a value to emit them for. It's probably\n          // more expected that we should be emitting the window when the start\n          // count is reached -- not before.\n          if (++count % startEvery === 0) {\n            const window = new Subject<T>();\n            windows.push(window);\n            subscriber.next(window.asObservable());\n          }\n        },\n        () => {\n          while (windows.length > 0) {\n            windows.shift()!.complete();\n          }\n          subscriber.complete();\n        },\n        (err) => {\n          while (windows.length > 0) {\n            windows.shift()!.error(err);\n          }\n          subscriber.error(err);\n        },\n        () => {\n          starts = null!;\n          windows = null!;\n        }\n      )\n    );\n  });\n}\n","import { Subject } from '../Subject';\nimport { asyncScheduler } from '../scheduler/async';\nimport { Observable } from '../Observable';\nimport { Subscription } from '../Subscription';\nimport { Observer, OperatorFunction, SchedulerLike } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { arrRemove } from '../util/arrRemove';\nimport { popScheduler } from '../util/args';\n\nexport function windowTime<T>(windowTimeSpan: number, scheduler?: SchedulerLike): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(\n  windowTimeSpan: number,\n  windowCreationInterval: number,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, Observable<T>>;\nexport function windowTime<T>(\n  windowTimeSpan: number,\n  windowCreationInterval: number | null | void,\n  maxWindowSize: number,\n  scheduler?: SchedulerLike\n): OperatorFunction<T, Observable<T>>;\n/**\n * Branch out the source Observable values as a nested Observable periodically\n * in time.\n *\n * <span class=\"informal\">It's like {@link bufferTime}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowTime.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable starts a new window periodically, as\n * determined by the `windowCreationInterval` argument. It emits each window\n * after a fixed timespan, specified by the `windowTimeSpan` argument. When the\n * source Observable completes or encounters an error, the output Observable\n * emits the current window and propagates the notification from the source\n * Observable. If `windowCreationInterval` is not provided, the output\n * Observable starts a new window when the previous window of duration\n * `windowTimeSpan` completes. If `maxWindowCount` is provided, each window\n * will emit at most fixed number of values. Window will complete immediately\n * after emitting last value and next one still will open as specified by\n * `windowTimeSpan` and `windowCreationInterval` arguments.\n *\n * ## Examples\n * In every window of 1 second each, emit at most 2 click events\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { windowTime, map, mergeAll, take } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowTime(1000),\n *   map(win => win.pipe(take(2))), // each window has at most 2 emissions\n *   mergeAll(),                    // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Every 5 seconds start a window 1 second long, and emit at most 2 click events per window\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { windowTime, map, mergeAll, take } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowTime(1000, 5000),\n *   map(win => win.pipe(take(2))), // each window has at most 2 emissions\n *   mergeAll(),                    // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * Same as example above but with maxWindowCount instead of take\n * ```ts\n * import { fromEvent } from 'rxjs';\n * import { windowTime, mergeAll } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowTime(1000, 5000, 2), // each window has still at most 2 emissions\n *   mergeAll(),                // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowToggle}\n * @see {@link windowWhen}\n * @see {@link bufferTime}\n *\n * @param windowTimeSpan The amount of time, in milliseconds, to fill each window.\n * @param windowCreationInterval The interval at which to start new\n * windows.\n * @param maxWindowSize Max number of\n * values each window can emit before completion.\n * @param scheduler The scheduler on which to schedule the\n * intervals that determine window boundaries.\n * @return A function that returns an Observable of windows, which in turn are\n * Observables.\n */\nexport function windowTime<T>(windowTimeSpan: number, ...otherArgs: any[]): OperatorFunction<T, Observable<T>> {\n  const scheduler = popScheduler(otherArgs) ?? asyncScheduler;\n  const windowCreationInterval = (otherArgs[0] as number) ?? null;\n  const maxWindowSize = (otherArgs[1] as number) || Infinity;\n\n  return operate((source, subscriber) => {\n    // The active windows, their related subscriptions, and removal functions.\n    let windowRecords: WindowRecord<T>[] | null = [];\n    // If true, it means that every time we close a window, we want to start a new window.\n    // This is only really used for when *just* the time span is passed.\n    let restartOnClose = false;\n\n    const closeWindow = (record: { window: Subject<T>; subs: Subscription }) => {\n      const { window, subs } = record;\n      window.complete();\n      subs.unsubscribe();\n      arrRemove(windowRecords, record);\n      restartOnClose && startWindow();\n    };\n\n    /**\n     * Called every time we start a new window. This also does\n     * the work of scheduling the job to close the window.\n     */\n    const startWindow = () => {\n      if (windowRecords) {\n        const subs = new Subscription();\n        subscriber.add(subs);\n        const window = new Subject<T>();\n        const record = {\n          window,\n          subs,\n          seen: 0,\n        };\n        windowRecords.push(record);\n        subscriber.next(window.asObservable());\n        subs.add(scheduler.schedule(() => closeWindow(record), windowTimeSpan));\n      }\n    };\n\n    windowCreationInterval !== null && windowCreationInterval >= 0\n      ? // The user passed both a windowTimeSpan (required), and a creation interval\n        // That means we need to start new window on the interval, and those windows need\n        // to wait the required time span before completing.\n        subscriber.add(\n          scheduler.schedule(function () {\n            startWindow();\n            !this.closed && subscriber.add(this.schedule(null, windowCreationInterval));\n          }, windowCreationInterval)\n        )\n      : (restartOnClose = true);\n\n    startWindow();\n\n    /**\n     * We need to loop over a copy of the window records several times in this operator.\n     * This is to save bytes over the wire more than anything.\n     * The reason we copy the array is that reentrant code could mutate the array while\n     * we are iterating over it.\n     */\n    const loop = (cb: (record: WindowRecord<T>) => void) => windowRecords!.slice().forEach(cb);\n\n    /**\n     * Used to notify all of the windows and the subscriber in the same way\n     * in the error and complete handlers.\n     */\n    const terminate = (cb: (consumer: Observer<any>) => void) => {\n      loop(({ window }) => cb(window));\n      cb(subscriber);\n      subscriber.unsubscribe();\n    };\n\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value: T) => {\n          // Notify all windows of the value.\n          loop((record) => {\n            record.window.next(value);\n            // If the window is over the max size, we need to close it.\n            maxWindowSize <= ++record.seen && closeWindow(record);\n          });\n        },\n        // Complete the windows and the downstream subscriber and clean up.\n        () => terminate((consumer) => consumer.complete()),\n        // Notify the windows and the downstream subscriber of the error and clean up.\n        (err) => terminate((consumer) => consumer.error(err))\n      )\n    );\n\n    // Additional teardown. This will be called when the\n    // destination tears down. Other teardowns are registered implicitly\n    // above via subscription.\n    return () => {\n      // Ensure that the buffer is released.\n      windowRecords = null!;\n    };\n  });\n}\n\ninterface WindowRecord<T> {\n  seen: number;\n  window: Subject<T>;\n  subs: Subscription;\n}\n","import { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { Subscription } from '../Subscription';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { innerFrom } from '../observable/from';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { noop } from '../util/noop';\nimport { arrRemove } from '../util/arrRemove';\n\n/**\n * Branch out the source Observable values as a nested Observable starting from\n * an emission from `openings` and ending when the output of `closingSelector`\n * emits.\n *\n * <span class=\"informal\">It's like {@link bufferToggle}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowToggle.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits windows that contain those items\n * emitted by the source Observable between the time when the `openings`\n * Observable emits an item and when the Observable returned by\n * `closingSelector` emits an item.\n *\n * ## Example\n * Every other second, emit the click events from the next 500ms\n * ```ts\n * import { fromEvent, interval, EMPTY } from 'rxjs';\n * import { windowToggle, mergeAll } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const openings = interval(1000);\n * const result = clicks.pipe(\n *   windowToggle(openings, i => i % 2 ? interval(500) : EMPTY),\n *   mergeAll()\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowWhen}\n * @see {@link bufferToggle}\n *\n * @param {Observable<O>} openings An observable of notifications to start new\n * windows.\n * @param {function(value: O): Observable} closingSelector A function that takes\n * the value emitted by the `openings` observable and returns an Observable,\n * which, when it emits a next notification, signals that the\n * associated window should complete.\n * @return A function that returns an Observable of windows, which in turn are\n * Observables.\n */\nexport function windowToggle<T, O>(\n  openings: ObservableInput<O>,\n  closingSelector: (openValue: O) => ObservableInput<any>\n): OperatorFunction<T, Observable<T>> {\n  return operate((source, subscriber) => {\n    const windows: Subject<T>[] = [];\n\n    const handleError = (err: any) => {\n      while (0 < windows.length) {\n        windows.shift()!.error(err);\n      }\n      subscriber.error(err);\n    };\n\n    innerFrom(openings).subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (openValue) => {\n          const window = new Subject<T>();\n          windows.push(window);\n          const closingSubscription = new Subscription();\n          const closeWindow = () => {\n            arrRemove(windows, window);\n            window.complete();\n            closingSubscription.unsubscribe();\n          };\n\n          let closingNotifier: Observable<any>;\n          try {\n            closingNotifier = innerFrom(closingSelector(openValue));\n          } catch (err) {\n            handleError(err);\n            return;\n          }\n\n          subscriber.next(window.asObservable());\n\n          closingSubscription.add(closingNotifier.subscribe(new OperatorSubscriber(subscriber, closeWindow, noop, handleError)));\n        },\n        noop\n      )\n    );\n\n    // Subcribe to the source to get things started.\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value: T) => {\n          // Copy the windows array before we emit to\n          // make sure we don't have issues with reentrant code.\n          const windowsCopy = windows.slice();\n          for (const window of windowsCopy) {\n            window.next(value);\n          }\n        },\n        () => {\n          // Complete all of our windows before we complete.\n          while (0 < windows.length) {\n            windows.shift()!.complete();\n          }\n          subscriber.complete();\n        },\n        handleError,\n        () => {\n          // Add this teardown so that all window subjects are\n          // disposed of. This way, if a user tries to subscribe\n          // to a window *after* the outer subscription has been unsubscribed,\n          // they will get an error, instead of waiting forever to\n          // see if a value arrives.\n          while (0 < windows.length) {\n            windows.shift()!.unsubscribe();\n          }\n        }\n      )\n    );\n  });\n}\n","import { Subscriber } from '../Subscriber';\nimport { Observable } from '../Observable';\nimport { Subject } from '../Subject';\nimport { ObservableInput, OperatorFunction } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/from';\n\n/**\n * Branch out the source Observable values as a nested Observable using a\n * factory function of closing Observables to determine when to start a new\n * window.\n *\n * <span class=\"informal\">It's like {@link bufferWhen}, but emits a nested\n * Observable instead of an array.</span>\n *\n * ![](windowWhen.png)\n *\n * Returns an Observable that emits windows of items it collects from the source\n * Observable. The output Observable emits connected, non-overlapping windows.\n * It emits the current window and opens a new one whenever the Observable\n * produced by the specified `closingSelector` function emits an item. The first\n * window is opened immediately when subscribing to the output Observable.\n *\n * ## Example\n * Emit only the first two clicks events in every window of [1-5] random seconds\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { windowWhen, map, mergeAll, take } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const result = clicks.pipe(\n *   windowWhen(() => interval(1000 + Math.random() * 4000)),\n *   map(win => win.pipe(take(2))),     // each window has at most 2 emissions\n *   mergeAll()                         // flatten the Observable-of-Observables\n * );\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link window}\n * @see {@link windowCount}\n * @see {@link windowTime}\n * @see {@link windowToggle}\n * @see {@link bufferWhen}\n *\n * @param {function(): Observable} closingSelector A function that takes no\n * arguments and returns an Observable that signals (on either `next` or\n * `complete`) when to close the previous window and start a new one.\n * @return A function that returns an Observable of windows, which in turn are\n * Observables.\n */\nexport function windowWhen<T>(closingSelector: () => ObservableInput<any>): OperatorFunction<T, Observable<T>> {\n  return operate((source, subscriber) => {\n    let window: Subject<T> | null;\n    let closingSubscriber: Subscriber<any> | undefined;\n\n    /**\n     * When we get an error, we have to notify both the\n     * destiation subscriber and the window.\n     */\n    const handleError = (err: any) => {\n      window!.error(err);\n      subscriber.error(err);\n    };\n\n    /**\n     * Called every time we need to open a window.\n     * Recursive, as it will start the closing notifier, which\n     * inevitably *should* call openWindow -- but may not if\n     * it is a \"never\" observable.\n     */\n    const openWindow = () => {\n      // We need to clean up our closing subscription,\n      // we only cared about the first next or complete notification.\n      closingSubscriber?.unsubscribe();\n\n      // Close our window before starting a new one.\n      window?.complete();\n\n      // Start the new window.\n      window = new Subject<T>();\n      subscriber.next(window.asObservable());\n\n      // Get our closing notifier.\n      let closingNotifier: Observable<any>;\n      try {\n        closingNotifier = innerFrom(closingSelector());\n      } catch (err) {\n        handleError(err);\n        return;\n      }\n\n      // Subscribe to the closing notifier, be sure\n      // to capture the subscriber (aka Subscription)\n      // so we can clean it up when we close the window\n      // and open a new one.\n      closingNotifier.subscribe((closingSubscriber = new OperatorSubscriber(subscriber, openWindow, openWindow, handleError)));\n    };\n\n    // Start the first window.\n    openWindow();\n\n    // Subscribe to the source\n    source.subscribe(\n      new OperatorSubscriber(\n        subscriber,\n        (value) => window!.next(value),\n        () => {\n          // The source completed, close the window and complete.\n          window!.complete();\n          subscriber.complete();\n        },\n        handleError,\n        () => {\n          // Be sure to clean up our closing subscription\n          // when this tears down.\n          closingSubscriber?.unsubscribe();\n          window = null!;\n        }\n      )\n    );\n  });\n}\n","import { OperatorFunction, ObservableInputTuple } from '../types';\nimport { operate } from '../util/lift';\nimport { OperatorSubscriber } from './OperatorSubscriber';\nimport { innerFrom } from '../observable/from';\nimport { identity } from '../util/identity';\nimport { noop } from '../util/noop';\nimport { popResultSelector } from '../util/args';\n\nexport function withLatestFrom<T, O extends unknown[]>(...inputs: [...ObservableInputTuple<O>]): OperatorFunction<T, [T, ...O]>;\n\nexport function withLatestFrom<T, O extends unknown[], R>(\n  ...inputs: [...ObservableInputTuple<O>, (...value: [T, ...O]) => R]\n): OperatorFunction<T, R>;\n\n/**\n * Combines the source Observable with other Observables to create an Observable\n * whose values are calculated from the latest values of each, only when the\n * source emits.\n *\n * <span class=\"informal\">Whenever the source Observable emits a value, it\n * computes a formula using that value plus the latest values from other input\n * Observables, then emits the output of that formula.</span>\n *\n * ![](withLatestFrom.png)\n *\n * `withLatestFrom` combines each value from the source Observable (the\n * instance) with the latest values from the other input Observables only when\n * the source emits a value, optionally using a `project` function to determine\n * the value to be emitted on the output Observable. All input Observables must\n * emit at least one value before the output Observable will emit a value.\n *\n * ## Example\n * On every click event, emit an array with the latest timer event plus the click event\n * ```ts\n * import { fromEvent, interval } from 'rxjs';\n * import { withLatestFrom } from 'rxjs/operators';\n *\n * const clicks = fromEvent(document, 'click');\n * const timer = interval(1000);\n * const result = clicks.pipe(withLatestFrom(timer));\n * result.subscribe(x => console.log(x));\n * ```\n *\n * @see {@link combineLatest}\n *\n * @param {ObservableInput} other An input Observable to combine with the source\n * Observable. More than one input Observables may be given as argument.\n * @param {Function} [project] Projection function for combining values\n * together. Receives all values in order of the Observables passed, where the\n * first parameter is a value from the source Observable. (e.g.\n * `a.pipe(withLatestFrom(b, c), map(([a1, b1, c1]) => a1 + b1 + c1))`). If this is not\n * passed, arrays will be emitted on the output Observable.\n * @return A function that returns an Observable of projected values from the\n * most recent values from each input Observable, or an array of the most\n * recent values from each input Observable.\n */\nexport function withLatestFrom<T, R>(...inputs: any[]): OperatorFunction<T, R | any[]> {\n  const project = popResultSelector(inputs) as ((...args: any[]) => R) | undefined;\n\n  return operate((source, subscriber) => {\n    const len = inputs.length;\n    const otherValues = new Array(len);\n    // An array of whether or not the other sources have emitted. Matched with them by index.\n    // TODO: At somepoint, we should investigate the performance implications here, and look\n    // into using a `Set()` and checking the `size` to see if we're ready.\n    let hasValue = inputs.map(() => false);\n    // Flipped true when we have at least one value from all other sources and\n    // we are ready to start emitting values.\n    let ready = false;\n\n    // Other sources. Note that here we are not checking `subscriber.closed`,\n    // this causes all inputs to be subscribed to, even if nothing can be emitted\n    // from them. This is an important distinction because subscription constitutes\n    // a side-effect.\n    for (let i = 0; i < len; i++) {\n      innerFrom(inputs[i]).subscribe(\n        new OperatorSubscriber(\n          subscriber,\n          (value) => {\n            otherValues[i] = value;\n            if (!ready && !hasValue[i]) {\n              // If we're not ready yet, flag to show this observable has emitted.\n              hasValue[i] = true;\n              // Intentionally terse code.\n              // If all of our other observables have emitted, set `ready` to `true`,\n              // so we know we can start emitting values, then clean up the `hasValue` array,\n              // because we don't need it anymore.\n              (ready = hasValue.every(identity)) && (hasValue = null!);\n            }\n          },\n          // Completing one of the other sources has\n          // no bearing on the completion of our result.\n          noop\n        )\n      );\n    }\n\n    // Source subscription\n    source.subscribe(\n      new OperatorSubscriber(subscriber, (value) => {\n        if (ready) {\n          // We have at least one value from the other sources. Go ahead and emit.\n          const values = [value, ...otherValues];\n          subscriber.next(project ? project(...values) : values);\n        }\n      })\n    );\n  });\n}\n","import { zip as zipStatic } from '../observable/zip';\nimport { ObservableInput, ObservableInputTuple, OperatorFunction, Cons } from '../types';\nimport { operate } from '../util/lift';\n\n/** @deprecated Replaced with {@link zipWith}. Will be removed in v8. */\nexport function zip<T, A extends readonly unknown[]>(otherInputs: [...ObservableInputTuple<A>]): OperatorFunction<T, Cons<T, A>>;\n/** @deprecated Replaced with {@link zipWith}. Will be removed in v8. */\nexport function zip<T, A extends readonly unknown[], R>(\n  otherInputsAndProject: [...ObservableInputTuple<A>],\n  project: (...values: Cons<T, A>) => R\n): OperatorFunction<T, R>;\n/** @deprecated Replaced with {@link zipWith}. Will be removed in v8. */\nexport function zip<T, A extends readonly unknown[]>(...otherInputs: [...ObservableInputTuple<A>]): OperatorFunction<T, Cons<T, A>>;\n/** @deprecated Replaced with {@link zipWith}. Will be removed in v8. */\nexport function zip<T, A extends readonly unknown[], R>(\n  ...otherInputsAndProject: [...ObservableInputTuple<A>, (...values: Cons<T, A>) => R]\n): OperatorFunction<T, R>;\n\n/**\n * @deprecated Replaced with {@link zipWith}. Will be removed in v8.\n */\nexport function zip<T, R>(...sources: Array<ObservableInput<any> | ((...values: Array<any>) => R)>): OperatorFunction<T, any> {\n  return operate((source, subscriber) => {\n    zipStatic(source, ...sources).subscribe(subscriber);\n  });\n}\n","import { OperatorFunction, ObservableInput } from '../types';\nimport { zip } from '../observable/zip';\nimport { joinAllInternals } from './joinAllInternals';\n\n/**\n * Collects all observable inner sources from the source, once the source completes,\n * it will subscribe to all inner sources, combining their values by index and emitting\n * them.\n *\n * @see {@link zipWith}\n * @see {@link zip}\n */\nexport function zipAll<T>(): OperatorFunction<ObservableInput<T>, T[]>;\nexport function zipAll<T>(): OperatorFunction<any, T[]>;\nexport function zipAll<T, R>(project: (...values: T[]) => R): OperatorFunction<ObservableInput<T>, R>;\nexport function zipAll<R>(project: (...values: Array<any>) => R): OperatorFunction<any, R>;\n\nexport function zipAll<T, R>(project?: (...values: T[]) => R) {\n  return joinAllInternals(zip, project);\n}\n","import { ObservableInputTuple, OperatorFunction, Cons } from '../types';\nimport { zip } from './zip';\n\n/**\n * Subscribes to the source, and the observable inputs provided as arguments, and combines their values, by index, into arrays.\n *\n * What is meant by \"combine by index\": The first value from each will be made into a single array, then emitted,\n * then the second value from each will be combined into a single array and emitted, then the third value\n * from each will be combined into a single array and emitted, and so on.\n *\n * This will continue until it is no longer able to combine values of the same index into an array.\n *\n * After the last value from any one completed source is emitted in an array, the resulting observable will complete,\n * as there is no way to continue \"zipping\" values together by index.\n *\n * Use-cases for this operator are limited. There are memory concerns if one of the streams is emitting\n * values at a much faster rate than the others. Usage should likely be limited to streams that emit\n * at a similar pace, or finite streams of known length.\n *\n * In many cases, authors want `combineLatestWith` and not `zipWith`.\n *\n * @param otherInputs other observable inputs to collate values from.\n * @return A function that returns an Observable that emits items by index\n * combined from the source Observable and provided Observables, in form of an\n * array.\n */\nexport function zipWith<T, A extends readonly unknown[]>(...otherInputs: [...ObservableInputTuple<A>]): OperatorFunction<T, Cons<T, A>> {\n  return zip(...otherInputs);\n}\n","/* Operator exports */\nexport { audit } from '../internal/operators/audit';\nexport { auditTime } from '../internal/operators/auditTime';\nexport { buffer } from '../internal/operators/buffer';\nexport { bufferCount } from '../internal/operators/bufferCount';\nexport { bufferTime } from '../internal/operators/bufferTime';\nexport { bufferToggle } from '../internal/operators/bufferToggle';\nexport { bufferWhen } from '../internal/operators/bufferWhen';\nexport { catchError } from '../internal/operators/catchError';\nexport { combineAll } from '../internal/operators/combineAll';\nexport { combineLatestAll } from '../internal/operators/combineLatestAll';\nexport { combineLatest } from '../internal/operators/combineLatest';\nexport { combineLatestWith } from '../internal/operators/combineLatestWith';\nexport { concat } from '../internal/operators/concat';\nexport { concatAll } from '../internal/operators/concatAll';\nexport { concatMap } from '../internal/operators/concatMap';\nexport { concatMapTo } from '../internal/operators/concatMapTo';\nexport { concatWith } from '../internal/operators/concatWith';\nexport { connect } from '../internal/operators/connect';\nexport { count } from '../internal/operators/count';\nexport { debounce } from '../internal/operators/debounce';\nexport { debounceTime } from '../internal/operators/debounceTime';\nexport { defaultIfEmpty } from '../internal/operators/defaultIfEmpty';\nexport { delay } from '../internal/operators/delay';\nexport { delayWhen } from '../internal/operators/delayWhen';\nexport { dematerialize } from '../internal/operators/dematerialize';\nexport { distinct } from '../internal/operators/distinct';\nexport { distinctUntilChanged } from '../internal/operators/distinctUntilChanged';\nexport { distinctUntilKeyChanged } from '../internal/operators/distinctUntilKeyChanged';\nexport { elementAt } from '../internal/operators/elementAt';\nexport { endWith } from '../internal/operators/endWith';\nexport { every } from '../internal/operators/every';\nexport { exhaust } from '../internal/operators/exhaust';\nexport { exhaustAll } from '../internal/operators/exhaustAll';\nexport { exhaustMap } from '../internal/operators/exhaustMap';\nexport { expand } from '../internal/operators/expand';\nexport { filter } from '../internal/operators/filter';\nexport { finalize } from '../internal/operators/finalize';\nexport { find } from '../internal/operators/find';\nexport { findIndex } from '../internal/operators/findIndex';\nexport { first } from '../internal/operators/first';\nexport { groupBy } from '../internal/operators/groupBy';\nexport { ignoreElements } from '../internal/operators/ignoreElements';\nexport { isEmpty } from '../internal/operators/isEmpty';\nexport { last } from '../internal/operators/last';\nexport { map } from '../internal/operators/map';\nexport { mapTo } from '../internal/operators/mapTo';\nexport { materialize } from '../internal/operators/materialize';\nexport { max } from '../internal/operators/max';\nexport { merge } from '../internal/operators/merge';\nexport { mergeAll } from '../internal/operators/mergeAll';\nexport { flatMap } from '../internal/operators/flatMap';\nexport { mergeMap } from '../internal/operators/mergeMap';\nexport { mergeMapTo } from '../internal/operators/mergeMapTo';\nexport { mergeScan } from '../internal/operators/mergeScan';\nexport { mergeWith } from '../internal/operators/mergeWith';\nexport { min } from '../internal/operators/min';\nexport { multicast } from '../internal/operators/multicast';\nexport { observeOn } from '../internal/operators/observeOn';\nexport { onErrorResumeNext } from '../internal/operators/onErrorResumeNext';\nexport { pairwise } from '../internal/operators/pairwise';\nexport { partition } from '../internal/operators/partition';\nexport { pluck } from '../internal/operators/pluck';\nexport { publish } from '../internal/operators/publish';\nexport { publishBehavior } from '../internal/operators/publishBehavior';\nexport { publishLast } from '../internal/operators/publishLast';\nexport { publishReplay } from '../internal/operators/publishReplay';\nexport { race } from '../internal/operators/race';\nexport { raceWith } from '../internal/operators/raceWith';\nexport { reduce } from '../internal/operators/reduce';\nexport { repeat } from '../internal/operators/repeat';\nexport { repeatWhen } from '../internal/operators/repeatWhen';\nexport { retry } from '../internal/operators/retry';\nexport { retryWhen } from '../internal/operators/retryWhen';\nexport { refCount } from '../internal/operators/refCount';\nexport { sample } from '../internal/operators/sample';\nexport { sampleTime } from '../internal/operators/sampleTime';\nexport { scan } from '../internal/operators/scan';\nexport { sequenceEqual } from '../internal/operators/sequenceEqual';\nexport { share } from '../internal/operators/share';\nexport { shareReplay } from '../internal/operators/shareReplay';\nexport { single } from '../internal/operators/single';\nexport { skip } from '../internal/operators/skip';\nexport { skipLast } from '../internal/operators/skipLast';\nexport { skipUntil } from '../internal/operators/skipUntil';\nexport { skipWhile } from '../internal/operators/skipWhile';\nexport { startWith } from '../internal/operators/startWith';\nexport { subscribeOn } from '../internal/operators/subscribeOn';\nexport { switchAll } from '../internal/operators/switchAll';\nexport { switchMap } from '../internal/operators/switchMap';\nexport { switchMapTo } from '../internal/operators/switchMapTo';\nexport { switchScan } from '../internal/operators/switchScan';\nexport { take } from '../internal/operators/take';\nexport { takeLast } from '../internal/operators/takeLast';\nexport { takeUntil } from '../internal/operators/takeUntil';\nexport { takeWhile } from '../internal/operators/takeWhile';\nexport { tap } from '../internal/operators/tap';\nexport { throttle } from '../internal/operators/throttle';\nexport { throttleTime } from '../internal/operators/throttleTime';\nexport { throwIfEmpty } from '../internal/operators/throwIfEmpty';\nexport { timeInterval } from '../internal/operators/timeInterval';\nexport { timeout } from '../internal/operators/timeout';\nexport { timeoutWith } from '../internal/operators/timeoutWith';\nexport { timestamp } from '../internal/operators/timestamp';\nexport { toArray } from '../internal/operators/toArray';\nexport { window } from '../internal/operators/window';\nexport { windowCount } from '../internal/operators/windowCount';\nexport { windowTime } from '../internal/operators/windowTime';\nexport { windowToggle } from '../internal/operators/windowToggle';\nexport { windowWhen } from '../internal/operators/windowWhen';\nexport { withLatestFrom } from '../internal/operators/withLatestFrom';\nexport { zip } from '../internal/operators/zip';\nexport { zipAll } from '../internal/operators/zipAll';\nexport { zipWith } from '../internal/operators/zipWith';\n","export function btnShow() {\r\n   button.style.display = 'inline';\r\n   console.log('showing button...');\r\n}\r\nexport function getUsers(x) {\r\n   const url = 'https://api.github.com/users?per_page=' + x.target.value;\r\n   console.log('URL is  ', url);\r\n   return url;\r\n}\r\nexport function getRandomUsers(x) {\r\n   const url = 'https://randomuser.me/api/?results=' + x.target.value;\r\n   console.log('URL is  ', url);\r\n   return url;\r\n}\r\nexport function getLocations(x) {\r\n   const url = 'https://wp-html.co.uk/api/wp-json/wordcamp/v2/locations/lo';\r\n   console.log('URL is  ', url);\r\n   return url;\r\n}\r\n\r\nexport function validNumberOfusers(val, el) {\r\n   if (val < 3) {\r\n      el.innerHTML = 'INVALID entry';\r\n   } else {\r\n      el.innerHTML = 'Valid entry...thank you.';\r\n   }\r\n}\r\nexport function validEmail(val, el) {\r\n   if (/^[a-zA-Z0-9.!#$%&'*+/=?^_`{|}~-]+@[a-zA-Z0-9-]+(?:\\.[a-zA-Z0-9-]+)*$/.test(val)) {\r\n      console.log('VALID EMAIL');\r\n      el.innerHTML = 'VALID';\r\n      return true;\r\n   } else {\r\n      console.log('!!!INVALID EMAIL');\r\n      el.innerHTML = 'NOT VALID';\r\n      return false;\r\n   }\r\n}\r\n\r\nexport function validPassword(val, el) {\r\n   if (val.length < 6) {\r\n      console.log('!!!INVALID PWD');\r\n      el.innerHTML = '6 or more characters required';\r\n      return false;\r\n   } else {\r\n      console.log('VALID LENGTH ');\r\n      el.innerHTML = 'VALID LENGTH';\r\n      return true;\r\n   }\r\n}\r\nexport function printLatLon(value, id, city, lat, lon) {\r\n   const container = document.getElementById('results-container');\r\n   const item = document.createElement('a');\r\n   item.innerHTML = `${value}<br>`;\r\n   item.setAttribute('id', id);\r\n   item.setAttribute('city', city);\r\n   item.setAttribute('lat', lat);\r\n   item.setAttribute('lon', lon);\r\n   item.setAttribute('href', '#!');\r\n   item.className = '';\r\n   container.appendChild(item);\r\n}\r\n\r\nexport function createCard(data) {\r\n   `${arrUsers[i].login} has url: ${arrUsers[i].url}<br>`;\r\n}\r\n","// import { ajax } from 'rxjs/ajax';\r\nimport { fromEvent, combineLatest } from 'rxjs';\r\nimport { tap, filter, debounceTime } from 'rxjs/operators';\r\nimport { validEmail, validPassword } from '../util/helpers';\r\n\r\nconsole.log(`%cWEATHER...`, 'color:green; font-size:20px');\r\n// MINE\r\n\r\nconsole.log(`%cWorking...`, 'color:blue; font-size:20px');\r\n\r\nconst button = document.getElementById('button');\r\nconst output = document.getElementById('output');\r\nconst email = document.getElementById('email');\r\nconst password = document.getElementById('password');\r\nconst validationEmail = document.getElementById('validation-email');\r\nconst validationPassword = document.getElementById('validation-password');\r\n\r\nconst email$ = fromEvent(email, 'keyup').pipe(\r\n\tdebounceTime(1000),\r\n\t// take(2), // number of events\r\n\tfilter(function check(x) {\r\n\t\tconst val = x.target.value;\r\n\t\treturn validEmail(val, validationEmail);\r\n\t}),\r\n);\r\n\r\nemail$.subscribe(\r\n\tfunction next(x) {\r\n\t\tconsole.log('[EMAIL SUBSCRIBE] ', x);\r\n\t},\r\n\tfunction error(err) {\r\n\t\tconsole.log(err.message);\r\n\t},\r\n\tfunction complete() {\r\n\t\tconsole.log('Email Completed');\r\n\t},\r\n);\r\n\r\nconst password$ = fromEvent(password, 'keyup').pipe(\r\n\tdebounceTime(750),\r\n\tfilter(function check(x) {\r\n\t\tconst val = x.target.value;\r\n\t\treturn validPassword(val, validationPassword);\r\n\t}),\r\n);\r\n\r\npassword$.subscribe({\r\n\tnext: (v) => console.log('[PWD SUBSCRIBE] ', v),\r\n\terror: (e) => console.error(e),\r\n\tcomplete: () => console.info('complete'),\r\n});\r\nconst button$ = fromEvent(button, 'click').pipe(\r\n\t// map((x) => {\r\n\t// \tx;\r\n\t// }),\r\n\ttap(() => {\r\n\t\toutput.innerHTML = 'Response from AJX validation';\r\n\t\tconsole.log('AJAX');\r\n\t}),\r\n);\r\n// console.log('button$', button$);\r\n\r\nbutton$.subscribe({\r\n\tnext: (v) => console.log('[BTN SUBSCRIBE] ', v),\r\n\terror: (e) => console.error(e),\r\n\tcomplete: () => console.info('complete'),\r\n});\r\ncombineLatest([email$, password$]).subscribe(() => {\r\n\tconsole.log('Show Button');\r\n\tbutton.style.display = 'block';\r\n});\r\n","import './src/lessons/01-form'; // current\r\n"]}